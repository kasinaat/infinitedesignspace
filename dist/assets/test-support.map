{"version":3,"sources":["vendor/ember-cli/test-support-prefix.js","bower_components/ember/ember-testing.js","vendor/qunit/qunit.js","vendor/qunit-notifications/index.js","vendor/ember-cli-qunit/qunit-configuration.js","vendor/ember-cli-qunit/test-loader.js","addon-test-support/ember-cli-test-loader/test-support/index.js","addon-test-support/ember-qunit.js","addon-test-support/ember-qunit/adapter.js","addon-test-support/ember-qunit/module-for-component.js","addon-test-support/ember-qunit/module-for-model.js","addon-test-support/ember-qunit/module-for.js","addon-test-support/ember-qunit/qunit-module.js","addon-test-support/ember-test-helpers.js","addon-test-support/ember-test-helpers/-legacy-overrides.js","addon-test-support/ember-test-helpers/abstract-test-module.js","addon-test-support/ember-test-helpers/build-registry.js","addon-test-support/ember-test-helpers/has-ember-version.js","addon-test-support/ember-test-helpers/test-context.js","addon-test-support/ember-test-helpers/test-module-for-acceptance.js","addon-test-support/ember-test-helpers/test-module-for-component.js","addon-test-support/ember-test-helpers/test-module-for-integration.js","addon-test-support/ember-test-helpers/test-module-for-model.js","addon-test-support/ember-test-helpers/test-module.js","addon-test-support/ember-test-helpers/test-resolver.js","addon-test-support/ember-test-helpers/wait.js","addon-test-support/qunit.js","vendor/ember-cli/test-support-suffix.js"],"sourcesContent":["/* jshint ignore:start */\n\n\n\n/* jshint ignore:end */\n",";(function() {\n/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011-2016 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   2.10.2\n */\n\nvar enifed, requireModule, Ember;\nvar mainContext = this;\n\n(function() {\n  var isNode = typeof window === 'undefined' &&\n    typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n  if (!isNode) {\n    Ember = this.Ember = this.Ember || {};\n  }\n\n  if (typeof Ember === 'undefined') { Ember = {}; }\n\n  if (typeof Ember.__loader === 'undefined') {\n    var registry = {};\n    var seen = {};\n\n    enifed = function(name, deps, callback) {\n      var value = { };\n\n      if (!callback) {\n        value.deps = [];\n        value.callback = deps;\n      } else {\n        value.deps = deps;\n        value.callback = callback;\n      }\n\n      registry[name] = value;\n    };\n\n    requireModule = function(name) {\n      return internalRequire(name, null);\n    };\n\n    // setup `require` module\n    requireModule['default'] = requireModule;\n\n    requireModule.has = function registryHas(moduleName) {\n      return !!registry[moduleName] || !!registry[moduleName + '/index'];\n    };\n\n    function missingModule(name, referrerName) {\n      if (referrerName) {\n        throw new Error('Could not find module ' + name + ' required by: ' + referrerName);\n      } else {\n        throw new Error('Could not find module ' + name);\n      }\n    }\n\n    function internalRequire(_name, referrerName) {\n      var name = _name;\n      var mod = registry[name];\n\n      if (!mod) {\n        name = name + '/index';\n        mod = registry[name];\n      }\n\n      var exports = seen[name];\n\n      if (exports !== undefined) {\n        return exports;\n      }\n\n      exports = seen[name] = {};\n\n      if (!mod) {\n        missingModule(_name, referrerName);\n      }\n\n      var deps = mod.deps;\n      var callback = mod.callback;\n      var reified = new Array(deps.length);\n\n      for (var i = 0; i < deps.length; i++) {\n        if (deps[i] === 'exports') {\n          reified[i] = exports;\n        } else if (deps[i] === 'require') {\n          reified[i] = requireModule;\n        } else {\n          reified[i] = internalRequire(deps[i], name);\n        }\n      }\n\n      callback.apply(this, reified);\n\n      return exports;\n    }\n\n    requireModule._eak_seen = registry;\n\n    Ember.__loader = {\n      define: enifed,\n      require: requireModule,\n      registry: registry\n    };\n  } else {\n    enifed = Ember.__loader.define;\n    requireModule = Ember.__loader.require;\n  }\n})();\n\nvar babelHelpers;\n\nfunction classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : defaults(subClass, superClass);\n}\n\nfunction taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nfunction defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ('value' in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction interopExportWildcard(obj, defaults) {\n  var newObj = defaults({}, obj);\n  delete newObj['default'];\n  return newObj;\n}\n\nfunction defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n  return obj;\n}\n\nbabelHelpers = {\n  classCallCheck: classCallCheck,\n  inherits: inherits,\n  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,\n  slice: Array.prototype.slice,\n  createClass: createClass,\n  interopExportWildcard: interopExportWildcard,\n  defaults: defaults\n};\n\nenifed('ember-debug/deprecate', ['exports', 'ember-metal', 'ember-console', 'ember-environment', 'ember-debug/handlers'], function (exports, _emberMetal, _emberConsole, _emberEnvironment, _emberDebugHandlers) {\n  /*global __fail__*/\n\n  'use strict';\n\n  exports.registerHandler = registerHandler;\n  exports.default = deprecate;\n\n  function registerHandler(handler) {\n    _emberDebugHandlers.registerHandler('deprecate', handler);\n  }\n\n  function formatMessage(_message, options) {\n    var message = _message;\n\n    if (options && options.id) {\n      message = message + (' [deprecation id: ' + options.id + ']');\n    }\n\n    if (options && options.url) {\n      message += ' See ' + options.url + ' for more details.';\n    }\n\n    return message;\n  }\n\n  registerHandler(function logDeprecationToConsole(message, options) {\n    var updatedMessage = formatMessage(message, options);\n\n    _emberConsole.default.warn('DEPRECATION: ' + updatedMessage);\n  });\n\n  var captureErrorForStack = undefined;\n\n  if (new Error().stack) {\n    captureErrorForStack = function () {\n      return new Error();\n    };\n  } else {\n    captureErrorForStack = function () {\n      try {\n        __fail__.fail();\n      } catch (e) {\n        return e;\n      }\n    };\n  }\n\n  registerHandler(function logDeprecationStackTrace(message, options, next) {\n    if (_emberEnvironment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {\n      var stackStr = '';\n      var error = captureErrorForStack();\n      var stack = undefined;\n\n      if (error.stack) {\n        if (error['arguments']) {\n          // Chrome\n          stack = error.stack.replace(/^\\s+at\\s+/gm, '').replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n          stack.shift();\n        } else {\n          // Firefox\n          stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').replace(/^\\(/gm, '{anonymous}(').split('\\n');\n        }\n\n        stackStr = '\\n    ' + stack.slice(2).join('\\n    ');\n      }\n\n      var updatedMessage = formatMessage(message, options);\n\n      _emberConsole.default.warn('DEPRECATION: ' + updatedMessage + stackStr);\n    } else {\n      next.apply(undefined, arguments);\n    }\n  });\n\n  registerHandler(function raiseOnDeprecation(message, options, next) {\n    if (_emberEnvironment.ENV.RAISE_ON_DEPRECATION) {\n      var updatedMessage = formatMessage(message);\n\n      throw new _emberMetal.Error(updatedMessage);\n    } else {\n      next.apply(undefined, arguments);\n    }\n  });\n\n  var missingOptionsDeprecation = 'When calling `Ember.deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';\n  exports.missingOptionsDeprecation = missingOptionsDeprecation;\n  var missingOptionsIdDeprecation = 'When calling `Ember.deprecate` you must provide `id` in options.';\n  exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;\n  var missingOptionsUntilDeprecation = 'When calling `Ember.deprecate` you must provide `until` in options.';\n\n  exports.missingOptionsUntilDeprecation = missingOptionsUntilDeprecation;\n  /**\n  @module ember\n  @submodule ember-debug\n  */\n\n  /**\n    Display a deprecation warning with the provided message and a stack trace\n    (Chrome and Firefox only).\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    @method deprecate\n    @param {String} message A description of the deprecation.\n    @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.\n    @param {Object} options\n    @param {String} options.id A unique id for this deprecation. The id can be\n      used by Ember debugging tools to change the behavior (raise, log or silence)\n      for that specific deprecation. The id should be namespaced by dots, e.g.\n      \"view.helper.select\".\n    @param {string} options.until The version of Ember when this deprecation\n      warning will be removed.\n    @param {String} [options.url] An optional url to the transition guide on the\n      emberjs.com website.\n    @for Ember\n    @public\n    @since 1.0.0\n  */\n\n  function deprecate(message, test, options) {\n    if (!options || !options.id && !options.until) {\n      deprecate(missingOptionsDeprecation, false, {\n        id: 'ember-debug.deprecate-options-missing',\n        until: '3.0.0',\n        url: 'http://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n      });\n    }\n\n    if (options && !options.id) {\n      deprecate(missingOptionsIdDeprecation, false, {\n        id: 'ember-debug.deprecate-id-missing',\n        until: '3.0.0',\n        url: 'http://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n      });\n    }\n\n    if (options && !options.until) {\n      deprecate(missingOptionsUntilDeprecation, options && options.until, {\n        id: 'ember-debug.deprecate-until-missing',\n        until: '3.0.0',\n        url: 'http://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n      });\n    }\n\n    _emberDebugHandlers.invoke.apply(undefined, ['deprecate'].concat(babelHelpers.slice.call(arguments)));\n  }\n});\nenifed(\"ember-debug/handlers\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.registerHandler = registerHandler;\n  exports.invoke = invoke;\n  var HANDLERS = {};\n\n  exports.HANDLERS = HANDLERS;\n\n  function registerHandler(type, callback) {\n    var nextHandler = HANDLERS[type] || function () {};\n\n    HANDLERS[type] = function (message, options) {\n      callback(message, options, nextHandler);\n    };\n  }\n\n  function invoke(type, message, test, options) {\n    if (test) {\n      return;\n    }\n\n    var handlerForType = HANDLERS[type];\n\n    if (!handlerForType) {\n      return;\n    }\n\n    if (handlerForType) {\n      handlerForType(message, options);\n    }\n  }\n});\nenifed('ember-debug/index', ['exports', 'ember-metal', 'ember-environment', 'ember-console', 'ember-debug/deprecate', 'ember-debug/warn'], function (exports, _emberMetal, _emberEnvironment, _emberConsole, _emberDebugDeprecate, _emberDebugWarn) {\n  'use strict';\n\n  exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;\n\n  /**\n  @module ember\n  @submodule ember-debug\n  */\n\n  /**\n  @class Ember\n  @public\n  */\n\n  /**\n    Define an assertion that will throw an exception if the condition is not met.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    ```javascript\n    // Test for truthiness\n    Ember.assert('Must pass a valid object', obj);\n  \n    // Fail unconditionally\n    Ember.assert('This code path should never be run');\n    ```\n  \n    @method assert\n    @param {String} desc A description of the assertion. This will become\n      the text of the Error thrown if the assertion fails.\n    @param {Boolean} test Must be truthy for the assertion to pass. If\n      falsy, an exception will be thrown.\n    @public\n    @since 1.0.0\n  */\n  _emberMetal.setDebugFunction('assert', function assert(desc, test) {\n    if (!test) {\n      throw new _emberMetal.Error('Assertion Failed: ' + desc);\n    }\n  });\n\n  /**\n    Display a debug notice.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    ```javascript\n    Ember.debug('I\\'m a debug notice!');\n    ```\n  \n    @method debug\n    @param {String} message A debug message to display.\n    @public\n  */\n  _emberMetal.setDebugFunction('debug', function debug(message) {\n    _emberConsole.default.debug('DEBUG: ' + message);\n  });\n\n  /**\n    Display an info notice.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    @method info\n    @private\n  */\n  _emberMetal.setDebugFunction('info', function info() {\n    _emberConsole.default.info.apply(undefined, arguments);\n  });\n\n  /**\n    Alias an old, deprecated method with its new counterpart.\n  \n    Display a deprecation warning with the provided message and a stack trace\n    (Chrome and Firefox only) when the assigned method is called.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n  \n    ```javascript\n    Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n    ```\n  \n    @method deprecateFunc\n    @param {String} message A description of the deprecation.\n    @param {Object} [options] The options object for Ember.deprecate.\n    @param {Function} func The new function called to replace its deprecated counterpart.\n    @return {Function} A new function that wraps the original function with a deprecation warning\n    @private\n  */\n  _emberMetal.setDebugFunction('deprecateFunc', function deprecateFunc() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 3) {\n      var _ret = (function () {\n        var message = args[0];\n        var options = args[1];\n        var func = args[2];\n\n        return {\n          v: function () {\n            _emberMetal.deprecate(message, false, options);\n            return func.apply(this, arguments);\n          }\n        };\n      })();\n\n      if (typeof _ret === 'object') return _ret.v;\n    } else {\n      var _ret2 = (function () {\n        var message = args[0];\n        var func = args[1];\n\n        return {\n          v: function () {\n            _emberMetal.deprecate(message);\n            return func.apply(this, arguments);\n          }\n        };\n      })();\n\n      if (typeof _ret2 === 'object') return _ret2.v;\n    }\n  });\n\n  /**\n    Run a function meant for debugging.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    ```javascript\n    Ember.runInDebug(() => {\n      Ember.Component.reopen({\n        didInsertElement() {\n          console.log(\"I'm happy\");\n        }\n      });\n    });\n    ```\n  \n    @method runInDebug\n    @param {Function} func The function to be executed.\n    @since 1.5.0\n    @public\n  */\n  _emberMetal.setDebugFunction('runInDebug', function runInDebug(func) {\n    func();\n  });\n\n  _emberMetal.setDebugFunction('debugSeal', function debugSeal(obj) {\n    Object.seal(obj);\n  });\n\n  _emberMetal.setDebugFunction('debugFreeze', function debugFreeze(obj) {\n    Object.freeze(obj);\n  });\n\n  _emberMetal.setDebugFunction('deprecate', _emberDebugDeprecate.default);\n\n  _emberMetal.setDebugFunction('warn', _emberDebugWarn.default);\n\n  /**\n    Will call `Ember.warn()` if ENABLE_OPTIONAL_FEATURES or\n    any specific FEATURES flag is truthy.\n  \n    This method is called automatically in debug canary builds.\n  \n    @private\n    @method _warnIfUsingStrippedFeatureFlags\n    @return {void}\n  */\n\n  function _warnIfUsingStrippedFeatureFlags(FEATURES, knownFeatures, featuresWereStripped) {\n    if (featuresWereStripped) {\n      _emberMetal.warn('Ember.ENV.ENABLE_OPTIONAL_FEATURES is only available in canary builds.', !_emberEnvironment.ENV.ENABLE_OPTIONAL_FEATURES, { id: 'ember-debug.feature-flag-with-features-stripped' });\n\n      var keys = Object.keys(FEATURES || {});\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (key === 'isEnabled' || !(key in knownFeatures)) {\n          continue;\n        }\n\n        _emberMetal.warn('FEATURE[\"' + key + '\"] is set as enabled, but FEATURE flags are only available in canary builds.', !FEATURES[key], { id: 'ember-debug.feature-flag-with-features-stripped' });\n      }\n    }\n  }\n\n  if (!_emberMetal.isTesting()) {\n    (function () {\n      // Complain if they're using FEATURE flags in builds other than canary\n      _emberMetal.FEATURES['features-stripped-test'] = true;\n      var featuresWereStripped = true;\n\n      if (false) {\n        featuresWereStripped = false;\n      }\n\n      delete _emberMetal.FEATURES['features-stripped-test'];\n      _warnIfUsingStrippedFeatureFlags(_emberEnvironment.ENV.FEATURES, _emberMetal.DEFAULT_FEATURES, featuresWereStripped);\n\n      // Inform the developer about the Ember Inspector if not installed.\n      var isFirefox = _emberEnvironment.environment.isFirefox;\n      var isChrome = _emberEnvironment.environment.isChrome;\n\n      if (typeof window !== 'undefined' && (isFirefox || isChrome) && window.addEventListener) {\n        window.addEventListener('load', function () {\n          if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {\n            var downloadURL;\n\n            if (isChrome) {\n              downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n            } else if (isFirefox) {\n              downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n            }\n\n            _emberMetal.debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);\n          }\n        }, false);\n      }\n    })();\n  }\n  /**\n    @public\n    @class Ember.Debug\n  */\n  _emberMetal.default.Debug = {};\n\n  /**\n    Allows for runtime registration of handler functions that override the default deprecation behavior.\n    Deprecations are invoked by calls to [Ember.deprecate](http://emberjs.com/api/classes/Ember.html#method_deprecate).\n    The following example demonstrates its usage by registering a handler that throws an error if the\n    message contains the word \"should\", otherwise defers to the default handler.\n  \n    ```javascript\n    Ember.Debug.registerDeprecationHandler((message, options, next) => {\n      if (message.indexOf('should') !== -1) {\n        throw new Error(`Deprecation message with should: ${message}`);\n      } else {\n        // defer to whatever handler was registered before this one\n        next(message, options);\n      }\n    });\n    ```\n  \n    The handler function takes the following arguments:\n  \n    <ul>\n      <li> <code>message</code> - The message received from the deprecation call.</li>\n      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n        <ul>\n          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n        </ul>\n      <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n    </ul>\n  \n    @public\n    @static\n    @method registerDeprecationHandler\n    @param handler {Function} A function to handle deprecation calls.\n    @since 2.1.0\n  */\n  _emberMetal.default.Debug.registerDeprecationHandler = _emberDebugDeprecate.registerHandler;\n  /**\n    Allows for runtime registration of handler functions that override the default warning behavior.\n    Warnings are invoked by calls made to [Ember.warn](http://emberjs.com/api/classes/Ember.html#method_warn).\n    The following example demonstrates its usage by registering a handler that does nothing overriding Ember's\n    default warning behavior.\n  \n    ```javascript\n    // next is not called, so no warnings get the default behavior\n    Ember.Debug.registerWarnHandler(() => {});\n    ```\n  \n    The handler function takes the following arguments:\n  \n    <ul>\n      <li> <code>message</code> - The message received from the warn call. </li>\n      <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n        <ul>\n          <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n        </ul>\n      <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n    </ul>\n  \n    @public\n    @static\n    @method registerWarnHandler\n    @param handler {Function} A function to handle warnings.\n    @since 2.1.0\n  */\n  _emberMetal.default.Debug.registerWarnHandler = _emberDebugWarn.registerHandler;\n\n  /*\n    We are transitioning away from `ember.js` to `ember.debug.js` to make\n    it much clearer that it is only for local development purposes.\n  \n    This flag value is changed by the tooling (by a simple string replacement)\n    so that if `ember.js` (which must be output for backwards compat reasons) is\n    used a nice helpful warning message will be printed out.\n  */\n  var runningNonEmberDebugJS = false;\n  exports.runningNonEmberDebugJS = runningNonEmberDebugJS;\n  if (runningNonEmberDebugJS) {\n    _emberMetal.warn('Please use `ember.debug.js` instead of `ember.js` for development and debugging.');\n  }\n});\n// reexports\nenifed('ember-debug/warn', ['exports', 'ember-console', 'ember-metal', 'ember-debug/handlers'], function (exports, _emberConsole, _emberMetal, _emberDebugHandlers) {\n  'use strict';\n\n  exports.registerHandler = registerHandler;\n  exports.default = warn;\n\n  function registerHandler(handler) {\n    _emberDebugHandlers.registerHandler('warn', handler);\n  }\n\n  registerHandler(function logWarning(message, options) {\n    _emberConsole.default.warn('WARNING: ' + message);\n    if ('trace' in _emberConsole.default) {\n      _emberConsole.default.trace();\n    }\n  });\n\n  var missingOptionsDeprecation = 'When calling `Ember.warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';\n  exports.missingOptionsDeprecation = missingOptionsDeprecation;\n  var missingOptionsIdDeprecation = 'When calling `Ember.warn` you must provide `id` in options.';\n\n  exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;\n  /**\n  @module ember\n  @submodule ember-debug\n  */\n\n  /**\n    Display a warning with the provided message.\n  \n    * In a production build, this method is defined as an empty function (NOP).\n    Uses of this method in Ember itself are stripped from the ember.prod.js build.\n  \n    @method warn\n    @param {String} message A warning to display.\n    @param {Boolean} test An optional boolean. If falsy, the warning\n      will be displayed.\n    @param {Object} options An object that can be used to pass a unique\n      `id` for this warning.  The `id` can be used by Ember debugging tools\n      to change the behavior (raise, log, or silence) for that specific warning.\n      The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"\n    @for Ember\n    @public\n    @since 1.0.0\n  */\n\n  function warn(message, test, options) {\n    if (!options) {\n      _emberMetal.deprecate(missingOptionsDeprecation, false, {\n        id: 'ember-debug.warn-options-missing',\n        until: '3.0.0',\n        url: 'http://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n      });\n    }\n\n    if (options && !options.id) {\n      _emberMetal.deprecate(missingOptionsIdDeprecation, false, {\n        id: 'ember-debug.warn-id-missing',\n        until: '3.0.0',\n        url: 'http://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n      });\n    }\n\n    _emberDebugHandlers.invoke.apply(undefined, ['warn'].concat(babelHelpers.slice.call(arguments)));\n  }\n});\nenifed('ember-testing/adapters/adapter', ['exports', 'ember-runtime'], function (exports, _emberRuntime) {\n  'use strict';\n\n  function K() {\n    return this;\n  }\n\n  /**\n   @module ember\n   @submodule ember-testing\n  */\n\n  /**\n    The primary purpose of this class is to create hooks that can be implemented\n    by an adapter for various test frameworks.\n  \n    @class Adapter\n    @namespace Ember.Test\n    @public\n  */\n  exports.default = _emberRuntime.Object.extend({\n    /**\n      This callback will be called whenever an async operation is about to start.\n       Override this to call your framework's methods that handle async\n      operations.\n       @public\n      @method asyncStart\n    */\n    asyncStart: K,\n\n    /**\n      This callback will be called whenever an async operation has completed.\n       @public\n      @method asyncEnd\n    */\n    asyncEnd: K,\n\n    /**\n      Override this method with your testing framework's false assertion.\n      This function is called whenever an exception occurs causing the testing\n      promise to fail.\n       QUnit example:\n       ```javascript\n        exception: function(error) {\n          ok(false, error);\n        };\n      ```\n       @public\n      @method exception\n      @param {String} error The exception to be raised.\n    */\n    exception: function (error) {\n      throw error;\n    }\n  });\n});\nenifed('ember-testing/adapters/qunit', ['exports', 'ember-utils', 'ember-testing/adapters/adapter'], function (exports, _emberUtils, _emberTestingAdaptersAdapter) {\n  'use strict';\n\n  /**\n    This class implements the methods defined by Ember.Test.Adapter for the\n    QUnit testing framework.\n  \n    @class QUnitAdapter\n    @namespace Ember.Test\n    @extends Ember.Test.Adapter\n    @public\n  */\n  exports.default = _emberTestingAdaptersAdapter.default.extend({\n    asyncStart: function () {\n      QUnit.stop();\n    },\n    asyncEnd: function () {\n      QUnit.start();\n    },\n    exception: function (error) {\n      ok(false, _emberUtils.inspect(error));\n    }\n  });\n});\nenifed('ember-testing/events', ['exports', 'ember-views', 'ember-metal'], function (exports, _emberViews, _emberMetal) {\n  'use strict';\n\n  exports.focus = focus;\n  exports.fireEvent = fireEvent;\n\n  var DEFAULT_EVENT_OPTIONS = { canBubble: true, cancelable: true };\n  var KEYBOARD_EVENT_TYPES = ['keydown', 'keypress', 'keyup'];\n  var MOUSE_EVENT_TYPES = ['click', 'mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover'];\n\n  function focus(el) {\n    if (!el) {\n      return;\n    }\n    var $el = _emberViews.jQuery(el);\n    if ($el.is(':input, [contenteditable=true]')) {\n      var type = $el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        _emberMetal.run(null, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n\n          if (!document.hasFocus || document.hasFocus()) {\n            el.focus();\n          } else {\n            $el.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function fireEvent(element, type) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    if (!element) {\n      return;\n    }\n    var event = undefined;\n    if (KEYBOARD_EVENT_TYPES.indexOf(type) > -1) {\n      event = buildKeyboardEvent(type, options);\n    } else if (MOUSE_EVENT_TYPES.indexOf(type) > -1) {\n      var rect = element.getBoundingClientRect();\n      var x = rect.left + 1;\n      var y = rect.top + 1;\n      var simulatedCoordinates = {\n        screenX: x + 5,\n        screenY: y + 95,\n        clientX: x,\n        clientY: y\n      };\n      event = buildMouseEvent(type, _emberViews.jQuery.extend(simulatedCoordinates, options));\n    } else {\n      event = buildBasicEvent(type, options);\n    }\n    element.dispatchEvent(event);\n  }\n\n  function buildBasicEvent(type) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var event = document.createEvent('Events');\n    event.initEvent(type, true, true);\n    _emberViews.jQuery.extend(event, options);\n    return event;\n  }\n\n  function buildMouseEvent(type) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var event = undefined;\n    try {\n      event = document.createEvent('MouseEvents');\n      var eventOpts = _emberViews.jQuery.extend({}, DEFAULT_EVENT_OPTIONS, options);\n      event.initMouseEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.detail, eventOpts.screenX, eventOpts.screenY, eventOpts.clientX, eventOpts.clientY, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.button, eventOpts.relatedTarget);\n    } catch (e) {\n      event = buildBasicEvent(type, options);\n    }\n    return event;\n  }\n\n  function buildKeyboardEvent(type) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var event = undefined;\n    try {\n      event = document.createEvent('KeyEvents');\n      var eventOpts = _emberViews.jQuery.extend({}, DEFAULT_EVENT_OPTIONS, options);\n      event.initKeyEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.keyCode, eventOpts.charCode);\n    } catch (e) {\n      event = buildBasicEvent(type, options);\n    }\n    return event;\n  }\n});\nenifed('ember-testing/ext/application', ['exports', 'ember-application', 'ember-testing/setup_for_testing', 'ember-testing/test/helpers', 'ember-testing/test/promise', 'ember-testing/test/run', 'ember-testing/test/on_inject_helpers', 'ember-testing/test/adapter'], function (exports, _emberApplication, _emberTestingSetup_for_testing, _emberTestingTestHelpers, _emberTestingTestPromise, _emberTestingTestRun, _emberTestingTestOn_inject_helpers, _emberTestingTestAdapter) {\n  'use strict';\n\n  _emberApplication.Application.reopen({\n    /**\n     This property contains the testing helpers for the current application. These\n     are created once you call `injectTestHelpers` on your `Ember.Application`\n     instance. The included helpers are also available on the `window` object by\n     default, but can be used from this object on the individual application also.\n       @property testHelpers\n      @type {Object}\n      @default {}\n      @public\n    */\n    testHelpers: {},\n\n    /**\n     This property will contain the original methods that were registered\n     on the `helperContainer` before `injectTestHelpers` is called.\n      When `removeTestHelpers` is called, these methods are restored to the\n     `helperContainer`.\n       @property originalMethods\n      @type {Object}\n      @default {}\n      @private\n      @since 1.3.0\n    */\n    originalMethods: {},\n\n    /**\n    This property indicates whether or not this application is currently in\n    testing mode. This is set when `setupForTesting` is called on the current\n    application.\n     @property testing\n    @type {Boolean}\n    @default false\n    @since 1.3.0\n    @public\n    */\n    testing: false,\n\n    /**\n      This hook defers the readiness of the application, so that you can start\n      the app when your tests are ready to run. It also sets the router's\n      location to 'none', so that the window's location will not be modified\n      (preventing both accidental leaking of state between tests and interference\n      with your testing framework).\n       Example:\n       ```\n      App.setupForTesting();\n      ```\n       @method setupForTesting\n      @public\n    */\n    setupForTesting: function () {\n      _emberTestingSetup_for_testing.default();\n\n      this.testing = true;\n\n      this.Router.reopen({\n        location: 'none'\n      });\n    },\n\n    /**\n      This will be used as the container to inject the test helpers into. By\n      default the helpers are injected into `window`.\n       @property helperContainer\n      @type {Object} The object to be used for test helpers.\n      @default window\n      @since 1.2.0\n      @private\n    */\n    helperContainer: null,\n\n    /**\n      This injects the test helpers into the `helperContainer` object. If an object is provided\n      it will be used as the helperContainer. If `helperContainer` is not set it will default\n      to `window`. If a function of the same name has already been defined it will be cached\n      (so that it can be reset if the helper is removed with `unregisterHelper` or\n      `removeTestHelpers`).\n       Any callbacks registered with `onInjectHelpers` will be called once the\n      helpers have been injected.\n       Example:\n      ```\n      App.injectTestHelpers();\n      ```\n       @method injectTestHelpers\n      @public\n    */\n    injectTestHelpers: function (helperContainer) {\n      if (helperContainer) {\n        this.helperContainer = helperContainer;\n      } else {\n        this.helperContainer = window;\n      }\n\n      this.reopen({\n        willDestroy: function () {\n          this._super.apply(this, arguments);\n          this.removeTestHelpers();\n        }\n      });\n\n      this.testHelpers = {};\n      for (var _name in _emberTestingTestHelpers.helpers) {\n        this.originalMethods[_name] = this.helperContainer[_name];\n        this.testHelpers[_name] = this.helperContainer[_name] = helper(this, _name);\n        protoWrap(_emberTestingTestPromise.default.prototype, _name, helper(this, _name), _emberTestingTestHelpers.helpers[_name].meta.wait);\n      }\n\n      _emberTestingTestOn_inject_helpers.invokeInjectHelpersCallbacks(this);\n    },\n\n    /**\n      This removes all helpers that have been registered, and resets and functions\n      that were overridden by the helpers.\n       Example:\n       ```javascript\n      App.removeTestHelpers();\n      ```\n       @public\n      @method removeTestHelpers\n    */\n    removeTestHelpers: function () {\n      if (!this.helperContainer) {\n        return;\n      }\n\n      for (var _name2 in _emberTestingTestHelpers.helpers) {\n        this.helperContainer[_name2] = this.originalMethods[_name2];\n        delete _emberTestingTestPromise.default.prototype[_name2];\n        delete this.testHelpers[_name2];\n        delete this.originalMethods[_name2];\n      }\n    }\n  });\n\n  // This method is no longer needed\n  // But still here for backwards compatibility\n  // of helper chaining\n  function protoWrap(proto, name, callback, isAsync) {\n    proto[name] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (isAsync) {\n        return callback.apply(this, args);\n      } else {\n        return this.then(function () {\n          return callback.apply(this, args);\n        });\n      }\n    };\n  }\n\n  function helper(app, name) {\n    var fn = _emberTestingTestHelpers.helpers[name].method;\n    var meta = _emberTestingTestHelpers.helpers[name].meta;\n    if (!meta.wait) {\n      return function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return fn.apply(app, [app].concat(args));\n      };\n    }\n\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var lastPromise = _emberTestingTestRun.default(function () {\n        return _emberTestingTestPromise.resolve(_emberTestingTestPromise.getLastPromise());\n      });\n\n      // wait for last helper's promise to resolve and then\n      // execute. To be safe, we need to tell the adapter we're going\n      // asynchronous here, because fn may not be invoked before we\n      // return.\n      _emberTestingTestAdapter.asyncStart();\n      return lastPromise.then(function () {\n        return fn.apply(app, [app].concat(args));\n      }).finally(_emberTestingTestAdapter.asyncEnd);\n    };\n  }\n});\nenifed('ember-testing/ext/rsvp', ['exports', 'ember-runtime', 'ember-metal', 'ember-testing/test/adapter'], function (exports, _emberRuntime, _emberMetal, _emberTestingTestAdapter) {\n  'use strict';\n\n  _emberRuntime.RSVP.configure('async', function (callback, promise) {\n    // if schedule will cause autorun, we need to inform adapter\n    if (_emberMetal.isTesting() && !_emberMetal.run.backburner.currentInstance) {\n      _emberTestingTestAdapter.asyncStart();\n      _emberMetal.run.backburner.schedule('actions', function () {\n        _emberTestingTestAdapter.asyncEnd();\n        callback(promise);\n      });\n    } else {\n      _emberMetal.run.backburner.schedule('actions', function () {\n        return callback(promise);\n      });\n    }\n  });\n\n  exports.default = _emberRuntime.RSVP;\n});\nenifed('ember-testing/helpers', ['exports', 'ember-metal', 'ember-testing/test/helpers', 'ember-testing/helpers/and_then', 'ember-testing/helpers/click', 'ember-testing/helpers/current_path', 'ember-testing/helpers/current_route_name', 'ember-testing/helpers/current_url', 'ember-testing/helpers/fill_in', 'ember-testing/helpers/find', 'ember-testing/helpers/find_with_assert', 'ember-testing/helpers/key_event', 'ember-testing/helpers/pause_test', 'ember-testing/helpers/trigger_event', 'ember-testing/helpers/visit', 'ember-testing/helpers/wait'], function (exports, _emberMetal, _emberTestingTestHelpers, _emberTestingHelpersAnd_then, _emberTestingHelpersClick, _emberTestingHelpersCurrent_path, _emberTestingHelpersCurrent_route_name, _emberTestingHelpersCurrent_url, _emberTestingHelpersFill_in, _emberTestingHelpersFind, _emberTestingHelpersFind_with_assert, _emberTestingHelpersKey_event, _emberTestingHelpersPause_test, _emberTestingHelpersTrigger_event, _emberTestingHelpersVisit, _emberTestingHelpersWait) {\n  'use strict';\n\n  _emberTestingTestHelpers.registerAsyncHelper('visit', _emberTestingHelpersVisit.default);\n  _emberTestingTestHelpers.registerAsyncHelper('click', _emberTestingHelpersClick.default);\n  _emberTestingTestHelpers.registerAsyncHelper('keyEvent', _emberTestingHelpersKey_event.default);\n  _emberTestingTestHelpers.registerAsyncHelper('fillIn', _emberTestingHelpersFill_in.default);\n  _emberTestingTestHelpers.registerAsyncHelper('wait', _emberTestingHelpersWait.default);\n  _emberTestingTestHelpers.registerAsyncHelper('andThen', _emberTestingHelpersAnd_then.default);\n  _emberTestingTestHelpers.registerAsyncHelper('pauseTest', _emberTestingHelpersPause_test.pauseTest);\n  _emberTestingTestHelpers.registerAsyncHelper('triggerEvent', _emberTestingHelpersTrigger_event.default);\n\n  _emberTestingTestHelpers.registerHelper('find', _emberTestingHelpersFind.default);\n  _emberTestingTestHelpers.registerHelper('findWithAssert', _emberTestingHelpersFind_with_assert.default);\n  _emberTestingTestHelpers.registerHelper('currentRouteName', _emberTestingHelpersCurrent_route_name.default);\n  _emberTestingTestHelpers.registerHelper('currentPath', _emberTestingHelpersCurrent_path.default);\n  _emberTestingTestHelpers.registerHelper('currentURL', _emberTestingHelpersCurrent_url.default);\n\n  if (false) {\n    _emberTestingTestHelpers.registerHelper('resumeTest', _emberTestingHelpersPause_test.resumeTest);\n  }\n});\nenifed(\"ember-testing/helpers/and_then\", [\"exports\"], function (exports) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  \"use strict\";\n\n  exports.default = andThen;\n\n  function andThen(app, callback) {\n    return app.testHelpers.wait(callback(app));\n  }\n});\nenifed('ember-testing/helpers/click', ['exports', 'ember-testing/events'], function (exports, _emberTestingEvents) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = click;\n\n  /**\n    Clicks an element and triggers any actions triggered by the element's `click`\n    event.\n  \n    Example:\n  \n    ```javascript\n    click('.some-jQuery-selector').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method click\n    @param {String} selector jQuery selector for finding element on the DOM\n    @param {Object} context A DOM Element, Document, or jQuery to use as context\n    @return {RSVP.Promise}\n    @public\n  */\n\n  function click(app, selector, context) {\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var el = $el[0];\n\n    _emberTestingEvents.fireEvent(el, 'mousedown');\n\n    _emberTestingEvents.focus(el);\n\n    _emberTestingEvents.fireEvent(el, 'mouseup');\n    _emberTestingEvents.fireEvent(el, 'click');\n\n    return app.testHelpers.wait();\n  }\n});\nenifed('ember-testing/helpers/current_path', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = currentPath;\n\n  /**\n    Returns the current path.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentPath\n  @return {Object} The currently active path.\n  @since 1.5.0\n  @public\n  */\n\n  function currentPath(app) {\n    var routingService = app.__container__.lookup('service:-routing');\n    return _emberMetal.get(routingService, 'currentPath');\n  }\n});\nenifed('ember-testing/helpers/current_route_name', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = currentRouteName;\n\n  /**\n    Returns the currently active route name.\n  Example:\n  ```javascript\n  function validateRouteName() {\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n  }\n  visit('/some/path').then(validateRouteName)\n  ```\n  @method currentRouteName\n  @return {Object} The name of the currently active route.\n  @since 1.5.0\n  @public\n  */\n\n  function currentRouteName(app) {\n    var routingService = app.__container__.lookup('service:-routing');\n    return _emberMetal.get(routingService, 'currentRouteName');\n  }\n});\nenifed('ember-testing/helpers/current_url', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = currentURL;\n\n  /**\n    Returns the current URL.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentURL\n  @return {Object} The currently active URL.\n  @since 1.5.0\n  @public\n  */\n\n  function currentURL(app) {\n    var router = app.__container__.lookup('router:main');\n    return _emberMetal.get(router, 'location').getURL();\n  }\n});\nenifed('ember-testing/helpers/fill_in', ['exports', 'ember-testing/events'], function (exports, _emberTestingEvents) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = fillIn;\n\n  /**\n    Fills in an input element with some text.\n  \n    Example:\n  \n    ```javascript\n    fillIn('#email', 'you@example.com').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method fillIn\n    @param {String} selector jQuery selector finding an input element on the DOM\n    to fill text with\n    @param {String} text text to place inside the input element\n    @return {RSVP.Promise}\n    @public\n  */\n\n  function fillIn(app, selector, contextOrText, text) {\n    var $el = undefined,\n        el = undefined,\n        context = undefined;\n    if (typeof text === 'undefined') {\n      text = contextOrText;\n    } else {\n      context = contextOrText;\n    }\n    $el = app.testHelpers.findWithAssert(selector, context);\n    el = $el[0];\n    _emberTestingEvents.focus(el);\n\n    $el.eq(0).val(text);\n    _emberTestingEvents.fireEvent(el, 'input');\n    _emberTestingEvents.fireEvent(el, 'change');\n\n    return app.testHelpers.wait();\n  }\n});\nenifed('ember-testing/helpers/find', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = find;\n\n  /**\n    Finds an element in the context of the app's container element. A simple alias\n    for `app.$(selector)`.\n  \n    Example:\n  \n    ```javascript\n    var $el = find('.my-selector');\n    ```\n  \n    With the `context` param:\n  \n    ```javascript\n    var $el = find('.my-selector', '.parent-element-class');\n    ```\n  \n    @method find\n    @param {String} selector jQuery string selector for element lookup\n    @param {String} [context] (optional) jQuery selector that will limit the selector\n                              argument to find only within the context's children\n    @return {Object} jQuery object representing the results of the query\n    @public\n  */\n\n  function find(app, selector, context) {\n    var $el = undefined;\n    context = context || _emberMetal.get(app, 'rootElement');\n    $el = app.$(selector, context);\n    return $el;\n  }\n});\nenifed('ember-testing/helpers/find_with_assert', ['exports'], function (exports) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  /**\n    Like `find`, but throws an error if the element selector returns no results.\n  \n    Example:\n  \n    ```javascript\n    var $el = findWithAssert('.doesnt-exist'); // throws error\n    ```\n  \n    With the `context` param:\n  \n    ```javascript\n    var $el = findWithAssert('.selector-id', '.parent-element-class'); // assert will pass\n    ```\n  \n    @method findWithAssert\n    @param {String} selector jQuery selector string for finding an element within\n    the DOM\n    @param {String} [context] (optional) jQuery selector that will limit the\n    selector argument to find only within the context's children\n    @return {Object} jQuery object representing the results of the query\n    @throws {Error} throws error if jQuery object returned has a length of 0\n    @public\n  */\n  'use strict';\n\n  exports.default = findWithAssert;\n\n  function findWithAssert(app, selector, context) {\n    var $el = app.testHelpers.find(selector, context);\n    if ($el.length === 0) {\n      throw new Error('Element ' + selector + ' not found.');\n    }\n    return $el;\n  }\n});\nenifed('ember-testing/helpers/key_event', ['exports'], function (exports) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  /**\n    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n    Example:\n    ```javascript\n    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n     // assert something\n    });\n    ```\n    @method keyEvent\n    @param {String} selector jQuery selector for finding element on the DOM\n    @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`\n    @param {Number} keyCode the keyCode of the simulated key event\n    @return {RSVP.Promise}\n    @since 1.5.0\n    @public\n  */\n  'use strict';\n\n  exports.default = keyEvent;\n\n  function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {\n    var context = undefined,\n        type = undefined;\n\n    if (typeof keyCode === 'undefined') {\n      context = null;\n      keyCode = typeOrKeyCode;\n      type = contextOrType;\n    } else {\n      context = contextOrType;\n      type = typeOrKeyCode;\n    }\n\n    return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });\n  }\n});\nenifed('ember-testing/helpers/pause_test', ['exports', 'ember-runtime', 'ember-console', 'ember-metal'], function (exports, _emberRuntime, _emberConsole, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.resumeTest = resumeTest;\n  exports.pauseTest = pauseTest;\n\n  var resume = undefined;\n\n  /**\n   Resumes a test paused by `pauseTest`.\n  \n   @method resumeTest\n   @return {void}\n   @public\n  */\n\n  function resumeTest() {\n    _emberMetal.assert('Testing has not been paused. There is nothing to resume.', resume);\n    resume();\n    resume = undefined;\n  }\n\n  /**\n   Pauses the current test - this is useful for debugging while testing or for test-driving.\n   It allows you to inspect the state of your application at any point.\n   Example (The test will pause before clicking the button):\n  \n   ```javascript\n   visit('/')\n   return pauseTest();\n   click('.btn');\n   ```\n   @since 1.9.0\n   @method pauseTest\n   @return {Object} A promise that will never resolve\n   @public\n  */\n\n  function pauseTest() {\n    if (false) {\n      _emberConsole.default.info('Testing paused. Use `resumeTest()` to continue.');\n    }\n\n    return new _emberRuntime.RSVP.Promise(function (resolve) {\n      if (false) {\n        resume = resolve;\n      }\n    }, 'TestAdapter paused promise');\n  }\n});\nenifed('ember-testing/helpers/trigger_event', ['exports', 'ember-testing/events'], function (exports, _emberTestingEvents) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = triggerEvent;\n\n  /**\n    Triggers the given DOM event on the element identified by the provided selector.\n    Example:\n    ```javascript\n    triggerEvent('#some-elem-id', 'blur');\n    ```\n    This is actually used internally by the `keyEvent` helper like so:\n    ```javascript\n    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n    ```\n   @method triggerEvent\n   @param {String} selector jQuery selector for finding element on the DOM\n   @param {String} [context] jQuery selector that will limit the selector\n                             argument to find only within the context's children\n   @param {String} type The event type to be triggered.\n   @param {Object} [options] The options to be passed to jQuery.Event.\n   @return {RSVP.Promise}\n   @since 1.5.0\n   @public\n  */\n\n  function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions) {\n    var arity = arguments.length;\n    var context = undefined,\n        type = undefined,\n        options = undefined;\n\n    if (arity === 3) {\n      // context and options are optional, so this is\n      // app, selector, type\n      context = null;\n      type = contextOrType;\n      options = {};\n    } else if (arity === 4) {\n      // context and options are optional, so this is\n      if (typeof typeOrOptions === 'object') {\n        // either\n        // app, selector, type, options\n        context = null;\n        type = contextOrType;\n        options = typeOrOptions;\n      } else {\n        // or\n        // app, selector, context, type\n        context = contextOrType;\n        type = typeOrOptions;\n        options = {};\n      }\n    } else {\n      context = contextOrType;\n      type = typeOrOptions;\n      options = possibleOptions;\n    }\n\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var el = $el[0];\n\n    _emberTestingEvents.fireEvent(el, type, options);\n\n    return app.testHelpers.wait();\n  }\n});\nenifed('ember-testing/helpers/visit', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = visit;\n\n  /**\n    Loads a route, sets up any controllers, and renders any templates associated\n    with the route as though a real user had triggered the route change while\n    using your app.\n  \n    Example:\n  \n    ```javascript\n    visit('posts/index').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method visit\n    @param {String} url the name of the route\n    @return {RSVP.Promise}\n    @public\n  */\n\n  function visit(app, url) {\n    var router = app.__container__.lookup('router:main');\n    var shouldHandleURL = false;\n\n    app.boot().then(function () {\n      router.location.setURL(url);\n\n      if (shouldHandleURL) {\n        _emberMetal.run(app.__deprecatedInstance__, 'handleURL', url);\n      }\n    });\n\n    if (app._readinessDeferrals > 0) {\n      router['initialURL'] = url;\n      _emberMetal.run(app, 'advanceReadiness');\n      delete router['initialURL'];\n    } else {\n      shouldHandleURL = true;\n    }\n\n    return app.testHelpers.wait();\n  }\n});\nenifed('ember-testing/helpers/wait', ['exports', 'ember-testing/test/waiters', 'ember-runtime', 'ember-metal', 'ember-testing/test/pending_requests'], function (exports, _emberTestingTestWaiters, _emberRuntime, _emberMetal, _emberTestingTestPending_requests) {\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n  'use strict';\n\n  exports.default = wait;\n\n  /**\n    Causes the run loop to process any pending events. This is used to ensure that\n    any async operations from other helpers (or your assertions) have been processed.\n  \n    This is most often used as the return value for the helper functions (see 'click',\n    'fillIn','visit',etc). However, there is a method to register a test helper which\n    utilizes this method without the need to actually call `wait()` in your helpers.\n  \n    The `wait` helper is built into `registerAsyncHelper` by default. You will not need\n    to `return app.testHelpers.wait();` - the wait behavior is provided for you.\n  \n    Example:\n  \n    ```javascript\n    Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n      visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', password)\n        .click('.submit');\n    });\n  \n    @method wait\n    @param {Object} value The value to be returned.\n    @return {RSVP.Promise}\n    @public\n    @since 1.0.0\n  */\n\n  function wait(app, value) {\n    return new _emberRuntime.RSVP.Promise(function (resolve) {\n      var router = app.__container__.lookup('router:main');\n\n      // Every 10ms, poll for the async thing to have finished\n      var watcher = setInterval(function () {\n        // 1. If the router is loading, keep polling\n        var routerIsLoading = router.router && !!router.router.activeTransition;\n        if (routerIsLoading) {\n          return;\n        }\n\n        // 2. If there are pending Ajax requests, keep polling\n        if (_emberTestingTestPending_requests.pendingRequests()) {\n          return;\n        }\n\n        // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n        if (_emberMetal.run.hasScheduledTimers() || _emberMetal.run.currentRunLoop) {\n          return;\n        }\n\n        if (_emberTestingTestWaiters.checkWaiters()) {\n          return;\n        }\n\n        // Stop polling\n        clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        _emberMetal.run(null, resolve, value);\n      }, 10);\n    });\n  }\n});\nenifed('ember-testing/index', ['exports', 'ember-testing/support', 'ember-testing/ext/application', 'ember-testing/ext/rsvp', 'ember-testing/helpers', 'ember-testing/initializers', 'ember-testing/test', 'ember-testing/adapters/adapter', 'ember-testing/setup_for_testing', 'ember-testing/adapters/qunit'], function (exports, _emberTestingSupport, _emberTestingExtApplication, _emberTestingExtRsvp, _emberTestingHelpers, _emberTestingInitializers, _emberTestingTest, _emberTestingAdaptersAdapter, _emberTestingSetup_for_testing, _emberTestingAdaptersQunit) {\n  'use strict';\n\n  exports.Test = _emberTestingTest.default;\n  exports.Adapter = _emberTestingAdaptersAdapter.default;\n  exports.setupForTesting = _emberTestingSetup_for_testing.default;\n  exports.QUnitAdapter = _emberTestingAdaptersQunit.default;\n});\n// to handle various edge cases\n// setup RSVP + run loop integration\n// adds helpers to helpers object in Test\n// to setup initializer\n\n/**\n  @module ember\n  @submodule ember-testing\n*/\nenifed('ember-testing/initializers', ['exports', 'ember-runtime'], function (exports, _emberRuntime) {\n  'use strict';\n\n  var name = 'deferReadiness in `testing` mode';\n\n  _emberRuntime.onLoad('Ember.Application', function (Application) {\n    if (!Application.initializers[name]) {\n      Application.initializer({\n        name: name,\n\n        initialize: function (application) {\n          if (application.testing) {\n            application.deferReadiness();\n          }\n        }\n      });\n    }\n  });\n});\nenifed('ember-testing/setup_for_testing', ['exports', 'ember-metal', 'ember-views', 'ember-testing/test/adapter', 'ember-testing/test/pending_requests', 'ember-testing/adapters/qunit'], function (exports, _emberMetal, _emberViews, _emberTestingTestAdapter, _emberTestingTestPending_requests, _emberTestingAdaptersQunit) {\n  'use strict';\n\n  exports.default = setupForTesting;\n\n  /**\n    Sets Ember up for testing. This is useful to perform\n    basic setup steps in order to unit test.\n  \n    Use `App.setupForTesting` to perform integration tests (full\n    application testing).\n  \n    @method setupForTesting\n    @namespace Ember\n    @since 1.5.0\n    @private\n  */\n\n  function setupForTesting() {\n    _emberMetal.setTesting(true);\n\n    var adapter = _emberTestingTestAdapter.getAdapter();\n    // if adapter is not manually set default to QUnit\n    if (!adapter) {\n      _emberTestingTestAdapter.setAdapter(new _emberTestingAdaptersQunit.default());\n    }\n\n    _emberViews.jQuery(document).off('ajaxSend', _emberTestingTestPending_requests.incrementPendingRequests);\n    _emberViews.jQuery(document).off('ajaxComplete', _emberTestingTestPending_requests.decrementPendingRequests);\n\n    _emberTestingTestPending_requests.clearPendingRequests();\n\n    _emberViews.jQuery(document).on('ajaxSend', _emberTestingTestPending_requests.incrementPendingRequests);\n    _emberViews.jQuery(document).on('ajaxComplete', _emberTestingTestPending_requests.decrementPendingRequests);\n  }\n});\nenifed('ember-testing/support', ['exports', 'ember-metal', 'ember-views', 'ember-environment'], function (exports, _emberMetal, _emberViews, _emberEnvironment) {\n  'use strict';\n\n  /**\n    @module ember\n    @submodule ember-testing\n  */\n\n  var $ = _emberViews.jQuery;\n\n  /**\n    This method creates a checkbox and triggers the click event to fire the\n    passed in handler. It is used to correct for a bug in older versions\n    of jQuery (e.g 1.8.3).\n  \n    @private\n    @method testCheckboxClick\n  */\n  function testCheckboxClick(handler) {\n    var input = document.createElement('input');\n    $(input).attr('type', 'checkbox').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).appendTo('body').on('click', handler).trigger('click').remove();\n  }\n\n  if (_emberEnvironment.environment.hasDOM && typeof $ === 'function') {\n    $(function () {\n      /*\n        Determine whether a checkbox checked using jQuery's \"click\" method will have\n        the correct value for its checked property.\n         If we determine that the current jQuery version exhibits this behavior,\n        patch it to work correctly as in the commit for the actual fix:\n        https://github.com/jquery/jquery/commit/1fb2f92.\n      */\n      testCheckboxClick(function () {\n        if (!this.checked && !$.event.special.click) {\n          $.event.special.click = {\n            // For checkbox, fire native event so checked state will be right\n            trigger: function () {\n              if ($.nodeName(this, 'input') && this.type === 'checkbox' && this.click) {\n                this.click();\n                return false;\n              }\n            }\n          };\n        }\n      });\n\n      // Try again to verify that the patch took effect or blow up.\n      testCheckboxClick(function () {\n        _emberMetal.warn('clicked checkboxes should be checked! the jQuery patch didn\\'t work', this.checked, { id: 'ember-testing.test-checkbox-click' });\n      });\n    });\n  }\n});\nenifed('ember-testing/test', ['exports', 'ember-testing/test/helpers', 'ember-testing/test/on_inject_helpers', 'ember-testing/test/promise', 'ember-testing/test/waiters', 'ember-testing/test/adapter', 'ember-metal'], function (exports, _emberTestingTestHelpers, _emberTestingTestOn_inject_helpers, _emberTestingTestPromise, _emberTestingTestWaiters, _emberTestingTestAdapter, _emberMetal) {\n  /**\n    @module ember\n    @submodule ember-testing\n  */\n  'use strict';\n\n  /**\n    This is a container for an assortment of testing related functionality:\n  \n    * Choose your default test adapter (for your framework of choice).\n    * Register/Unregister additional test helpers.\n    * Setup callbacks to be fired when the test helpers are injected into\n      your application.\n  \n    @class Test\n    @namespace Ember\n    @public\n  */\n  var Test = {\n    /**\n      Hash containing all known test helpers.\n       @property _helpers\n      @private\n      @since 1.7.0\n    */\n    _helpers: _emberTestingTestHelpers.helpers,\n\n    registerHelper: _emberTestingTestHelpers.registerHelper,\n    registerAsyncHelper: _emberTestingTestHelpers.registerAsyncHelper,\n    unregisterHelper: _emberTestingTestHelpers.unregisterHelper,\n    onInjectHelpers: _emberTestingTestOn_inject_helpers.onInjectHelpers,\n    Promise: _emberTestingTestPromise.default,\n    promise: _emberTestingTestPromise.promise,\n    resolve: _emberTestingTestPromise.resolve,\n    registerWaiter: _emberTestingTestWaiters.registerWaiter,\n    unregisterWaiter: _emberTestingTestWaiters.unregisterWaiter\n  };\n\n  if (true) {\n    Test.checkWaiters = _emberTestingTestWaiters.checkWaiters;\n  }\n\n  /**\n   Used to allow ember-testing to communicate with a specific testing\n   framework.\n  \n   You can manually set it before calling `App.setupForTesting()`.\n  \n   Example:\n  \n   ```javascript\n   Ember.Test.adapter = MyCustomAdapter.create()\n   ```\n  \n   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n  \n   @public\n   @for Ember.Test\n   @property adapter\n   @type {Class} The adapter to be used.\n   @default Ember.Test.QUnitAdapter\n  */\n  Object.defineProperty(Test, 'adapter', {\n    get: _emberTestingTestAdapter.getAdapter,\n    set: _emberTestingTestAdapter.setAdapter\n  });\n\n  Object.defineProperty(Test, 'waiters', {\n    get: _emberTestingTestWaiters.generateDeprecatedWaitersArray\n  });\n\n  exports.default = Test;\n});\nenifed('ember-testing/test/adapter', ['exports', 'ember-console', 'ember-metal'], function (exports, _emberConsole, _emberMetal) {\n  'use strict';\n\n  exports.getAdapter = getAdapter;\n  exports.setAdapter = setAdapter;\n  exports.asyncStart = asyncStart;\n  exports.asyncEnd = asyncEnd;\n\n  var adapter = undefined;\n\n  function getAdapter() {\n    return adapter;\n  }\n\n  function setAdapter(value) {\n    adapter = value;\n    if (value) {\n      _emberMetal.setDispatchOverride(adapterDispatch);\n    } else {\n      _emberMetal.setDispatchOverride(null);\n    }\n  }\n\n  function asyncStart() {\n    if (adapter) {\n      adapter.asyncStart();\n    }\n  }\n\n  function asyncEnd() {\n    if (adapter) {\n      adapter.asyncEnd();\n    }\n  }\n\n  function adapterDispatch(error) {\n    adapter.exception(error);\n    _emberConsole.default.error(error.stack);\n  }\n});\nenifed('ember-testing/test/helpers', ['exports', 'ember-testing/test/promise'], function (exports, _emberTestingTestPromise) {\n  'use strict';\n\n  exports.registerHelper = registerHelper;\n  exports.registerAsyncHelper = registerAsyncHelper;\n  exports.unregisterHelper = unregisterHelper;\n  var helpers = {};\n\n  exports.helpers = helpers;\n  /**\n    `registerHelper` is used to register a test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    Ember.Test.registerHelper('boot', function(app) {\n      Ember.run(app, app.advanceReadiness);\n    });\n    ```\n  \n    This helper can later be called without arguments because it will be\n    called with `app` as the first parameter.\n  \n    ```javascript\n    App = Ember.Application.create();\n    App.injectTestHelpers();\n    boot();\n    ```\n  \n    @public\n    @for Ember.Test\n    @method registerHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @param options {Object}\n  */\n\n  function registerHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: { wait: false }\n    };\n  }\n\n  /**\n    `registerAsyncHelper` is used to register an async test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    Ember.Test.registerAsyncHelper('boot', function(app) {\n      Ember.run(app, app.advanceReadiness);\n    });\n    ```\n  \n    The advantage of an async helper is that it will not run\n    until the last async helper has completed.  All async helpers\n    after it will wait for it complete before running.\n  \n  \n    For example:\n  \n    ```javascript\n    Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {\n      click('.delete-' + postId);\n    });\n  \n    // ... in your test\n    visit('/post/2');\n    deletePost(2);\n    visit('/post/3');\n    deletePost(3);\n    ```\n  \n    @public\n    @for Ember.Test\n    @method registerAsyncHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @since 1.2.0\n  */\n\n  function registerAsyncHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: { wait: true }\n    };\n  }\n\n  /**\n    Remove a previously added helper method.\n  \n    Example:\n  \n    ```javascript\n    Ember.Test.unregisterHelper('wait');\n    ```\n  \n    @public\n    @method unregisterHelper\n    @param {String} name The helper to remove.\n  */\n\n  function unregisterHelper(name) {\n    delete helpers[name];\n    delete _emberTestingTestPromise.default.prototype[name];\n  }\n});\nenifed(\"ember-testing/test/on_inject_helpers\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.onInjectHelpers = onInjectHelpers;\n  exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;\n  var callbacks = [];\n\n  exports.callbacks = callbacks;\n  /**\n    Used to register callbacks to be fired whenever `App.injectTestHelpers`\n    is called.\n  \n    The callback will receive the current application as an argument.\n  \n    Example:\n  \n    ```javascript\n    Ember.Test.onInjectHelpers(function() {\n      Ember.$(document).ajaxSend(function() {\n        Test.pendingRequests++;\n      });\n  \n      Ember.$(document).ajaxComplete(function() {\n        Test.pendingRequests--;\n      });\n    });\n    ```\n  \n    @public\n    @for Ember.Test\n    @method onInjectHelpers\n    @param {Function} callback The function to be called.\n  */\n\n  function onInjectHelpers(callback) {\n    callbacks.push(callback);\n  }\n\n  function invokeInjectHelpersCallbacks(app) {\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](app);\n    }\n  }\n});\nenifed(\"ember-testing/test/pending_requests\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.pendingRequests = pendingRequests;\n  exports.clearPendingRequests = clearPendingRequests;\n  exports.incrementPendingRequests = incrementPendingRequests;\n  exports.decrementPendingRequests = decrementPendingRequests;\n  var requests = [];\n\n  function pendingRequests() {\n    return requests.length;\n  }\n\n  function clearPendingRequests() {\n    requests.length = 0;\n  }\n\n  function incrementPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n\n  function decrementPendingRequests(_, xhr) {\n    for (var i = 0; i < requests.length; i++) {\n      if (xhr === requests[i]) {\n        requests.splice(i, 1);\n        break;\n      }\n    }\n  }\n});\nenifed('ember-testing/test/promise', ['exports', 'ember-runtime', 'ember-testing/test/run'], function (exports, _emberRuntime, _emberTestingTestRun) {\n  'use strict';\n\n  exports.promise = promise;\n  exports.resolve = resolve;\n  exports.getLastPromise = getLastPromise;\n\n  var lastPromise = undefined;\n\n  var TestPromise = (function (_RSVP$Promise) {\n    babelHelpers.inherits(TestPromise, _RSVP$Promise);\n\n    function TestPromise() {\n      babelHelpers.classCallCheck(this, TestPromise);\n\n      _RSVP$Promise.apply(this, arguments);\n      lastPromise = this;\n    }\n\n    /**\n      This returns a thenable tailored for testing.  It catches failed\n      `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n      callback in the last chained then.\n    \n      This method should be returned by async helpers such as `wait`.\n    \n      @public\n      @for Ember.Test\n      @method promise\n      @param {Function} resolver The function used to resolve the promise.\n      @param {String} label An optional string for identifying the promise.\n    */\n\n    TestPromise.prototype.then = function then(onFulfillment) {\n      var _RSVP$Promise$prototype$then;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_RSVP$Promise$prototype$then = _RSVP$Promise.prototype.then).call.apply(_RSVP$Promise$prototype$then, [this, function (result) {\n        return isolate(onFulfillment, result);\n      }].concat(args));\n    };\n\n    return TestPromise;\n  })(_emberRuntime.RSVP.Promise);\n\n  exports.default = TestPromise;\n\n  function promise(resolver, label) {\n    var fullLabel = 'Ember.Test.promise: ' + (label || '<Unknown Promise>');\n    return new TestPromise(resolver, fullLabel);\n  }\n\n  /**\n    Replacement for `Ember.RSVP.resolve`\n    The only difference is this uses\n    an instance of `Ember.Test.Promise`\n  \n    @public\n    @for Ember.Test\n    @method resolve\n    @param {Mixed} The value to resolve\n    @since 1.2.0\n  */\n\n  function resolve(result, label) {\n    return TestPromise.resolve(result, label);\n  }\n\n  function getLastPromise() {\n    return lastPromise;\n  }\n\n  // This method isolates nested async methods\n  // so that they don't conflict with other last promises.\n  //\n  // 1. Set `Ember.Test.lastPromise` to null\n  // 2. Invoke method\n  // 3. Return the last promise created during method\n  function isolate(onFulfillment, result) {\n    // Reset lastPromise for nested helpers\n    lastPromise = null;\n\n    var value = onFulfillment(result);\n\n    var promise = lastPromise;\n    lastPromise = null;\n\n    // If the method returned a promise\n    // return that promise. If not,\n    // return the last async helper's promise\n    if (value && value instanceof TestPromise || !promise) {\n      return value;\n    } else {\n      return _emberTestingTestRun.default(function () {\n        return resolve(promise).then(function () {\n          return value;\n        });\n      });\n    }\n  }\n});\nenifed('ember-testing/test/run', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = run;\n\n  function run(fn) {\n    if (!_emberMetal.run.currentRunLoop) {\n      return _emberMetal.run(fn);\n    } else {\n      return fn();\n    }\n  }\n});\nenifed('ember-testing/test/waiters', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.registerWaiter = registerWaiter;\n  exports.unregisterWaiter = unregisterWaiter;\n  exports.checkWaiters = checkWaiters;\n  exports.generateDeprecatedWaitersArray = generateDeprecatedWaitersArray;\n\n  var contexts = [];\n  var callbacks = [];\n\n  /**\n     This allows ember-testing to play nicely with other asynchronous\n     events, such as an application that is waiting for a CSS3\n     transition or an IndexDB transaction. The waiter runs periodically\n     after each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,\n     until the returning result is truthy. After the waiters finish, the next async helper\n     is executed and the process repeats.\n  \n     For example:\n  \n     ```javascript\n     Ember.Test.registerWaiter(function() {\n       return myPendingTransactions() == 0;\n     });\n     ```\n     The `context` argument allows you to optionally specify the `this`\n     with which your callback will be invoked.\n  \n     For example:\n  \n     ```javascript\n     Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n     ```\n  \n     @public\n     @for Ember.Test\n     @method registerWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n\n  function registerWaiter(context, callback) {\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    if (indexOf(context, callback) > -1) {\n      return;\n    }\n    contexts.push(context);\n    callbacks.push(callback);\n  }\n\n  /**\n     `unregisterWaiter` is used to unregister a callback that was\n     registered with `registerWaiter`.\n  \n     @public\n     @for Ember.Test\n     @method unregisterWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n\n  function unregisterWaiter(context, callback) {\n    if (!callbacks.length) {\n      return;\n    }\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    var i = indexOf(context, callback);\n    if (i === -1) {\n      return;\n    }\n    contexts.splice(i, 1);\n    callbacks.splice(i, 1);\n  }\n\n  /**\n    Iterates through each registered test waiter, and invokes\n    its callback. If any waiter returns false, this method will return\n    true indicating that the waiters have not settled yet.\n  \n    This is generally used internally from the acceptance/integration test\n    infrastructure.\n  \n    @public\n    @for Ember.Test\n    @static\n    @method checkWaiters\n  */\n\n  function checkWaiters() {\n    if (!callbacks.length) {\n      return false;\n    }\n    for (var i = 0; i < callbacks.length; i++) {\n      var context = contexts[i];\n      var callback = callbacks[i];\n      if (!callback.call(context)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function indexOf(context, callback) {\n    for (var i = 0; i < callbacks.length; i++) {\n      if (callbacks[i] === callback && contexts[i] === context) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  function generateDeprecatedWaitersArray() {\n    _emberMetal.deprecate('Usage of `Ember.Test.waiters` is deprecated. Please refactor to `Ember.Test.checkWaiters`.', !true, { until: '2.8.0', id: 'ember-testing.test-waiters' });\n\n    var array = new Array(callbacks.length);\n    for (var i = 0; i < callbacks.length; i++) {\n      var context = contexts[i];\n      var callback = callbacks[i];\n\n      array[i] = [context, callback];\n    }\n\n    return array;\n  }\n});\nrequireModule(\"ember-testing\");\n\n}());\n","/*!\n * QUnit 2.14.0\n * https://qunitjs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-01-12\n */\n(function (global$1) {\n\t'use strict';\n\n\t// Support IE 9-10, PhantomJS: Fallback for fuzzysort.js used by ./html.js\n\t// eslint-disable-next-line no-unused-vars\n\tvar Map = typeof Map === \"function\" ? Map : function StringMap() {\n\t\tvar store = Object.create( null );\n\t\tthis.get = function( strKey ) {\n\t\t\treturn store[ strKey ];\n\t\t};\n\t\tthis.set = function( strKey, val ) {\n\t\t\tstore[ strKey ] = val;\n\t\t\treturn this;\n\t\t};\n\t\tthis.clear = function() {\n\t\t\tstore = Object.create( null );\n\t\t};\n\t};\n\n\tfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n\tvar global__default = /*#__PURE__*/_interopDefaultLegacy(global$1);\n\n\tvar window$1 = global__default['default'].window;\n\tvar self$1 = global__default['default'].self;\n\tvar console$1 = global__default['default'].console;\n\tvar setTimeout$1 = global__default['default'].setTimeout;\n\tvar clearTimeout = global__default['default'].clearTimeout;\n\tvar document = window$1 && window$1.document;\n\tvar navigator = window$1 && window$1.navigator;\n\tvar localSessionStorage = function () {\n\t  var x = \"qunit-test-string\";\n\n\t  try {\n\t    global__default['default'].sessionStorage.setItem(x, x);\n\t    global__default['default'].sessionStorage.removeItem(x);\n\t    return global__default['default'].sessionStorage;\n\t  } catch (e) {\n\t    return undefined;\n\t  }\n\t}();\n\n\tfunction _typeof(obj) {\n\t  \"@babel/helpers - typeof\";\n\n\t  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n\t    _typeof = function (obj) {\n\t      return typeof obj;\n\t    };\n\t  } else {\n\t    _typeof = function (obj) {\n\t      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t    };\n\t  }\n\n\t  return _typeof(obj);\n\t}\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t}\n\n\tfunction _defineProperties(target, props) {\n\t  for (var i = 0; i < props.length; i++) {\n\t    var descriptor = props[i];\n\t    descriptor.enumerable = descriptor.enumerable || false;\n\t    descriptor.configurable = true;\n\t    if (\"value\" in descriptor) descriptor.writable = true;\n\t    Object.defineProperty(target, descriptor.key, descriptor);\n\t  }\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t  if (staticProps) _defineProperties(Constructor, staticProps);\n\t  return Constructor;\n\t}\n\n\tfunction _toConsumableArray(arr) {\n\t  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n\t}\n\n\tfunction _arrayWithoutHoles(arr) {\n\t  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n\t}\n\n\tfunction _iterableToArray(iter) {\n\t  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t  if (!o) return;\n\t  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t  var n = Object.prototype.toString.call(o).slice(8, -1);\n\t  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t  if (len == null || len > arr.length) len = arr.length;\n\n\t  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t  return arr2;\n\t}\n\n\tfunction _nonIterableSpread() {\n\t  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t}\n\n\tfunction _createForOfIteratorHelper(o, allowArrayLike) {\n\t  var it;\n\n\t  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n\t    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n\t      if (it) o = it;\n\t      var i = 0;\n\n\t      var F = function () {};\n\n\t      return {\n\t        s: F,\n\t        n: function () {\n\t          if (i >= o.length) return {\n\t            done: true\n\t          };\n\t          return {\n\t            done: false,\n\t            value: o[i++]\n\t          };\n\t        },\n\t        e: function (e) {\n\t          throw e;\n\t        },\n\t        f: F\n\t      };\n\t    }\n\n\t    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t  }\n\n\t  var normalCompletion = true,\n\t      didErr = false,\n\t      err;\n\t  return {\n\t    s: function () {\n\t      it = o[Symbol.iterator]();\n\t    },\n\t    n: function () {\n\t      var step = it.next();\n\t      normalCompletion = step.done;\n\t      return step;\n\t    },\n\t    e: function (e) {\n\t      didErr = true;\n\t      err = e;\n\t    },\n\t    f: function () {\n\t      try {\n\t        if (!normalCompletion && it.return != null) it.return();\n\t      } finally {\n\t        if (didErr) throw err;\n\t      }\n\t    }\n\t  };\n\t}\n\n\t// Detect if the console object exists and no-op otherwise.\n\t// This allows support for IE 9, which doesn't have a console\n\t// object if the developer tools are not open.\n\t// Support: SpiderMonkey (mozjs 68+)\n\t// The console object has a log method, but no warn method.\n\n\tvar Logger = {\n\t  warn: console$1 ? (console$1.warn || console$1.log).bind(console$1) : function () {}\n\t};\n\n\tvar toString = Object.prototype.toString;\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar now = Date.now || function () {\n\t  return new Date().getTime();\n\t};\n\tvar nativePerf = getNativePerf();\n\n\tfunction getNativePerf() {\n\t  if (window$1 && typeof window$1.performance !== \"undefined\" && typeof window$1.performance.mark === \"function\" && typeof window$1.performance.measure === \"function\") {\n\t    return window$1.performance;\n\t  } else {\n\t    return undefined;\n\t  }\n\t}\n\n\tvar performance = {\n\t  now: nativePerf ? nativePerf.now.bind(nativePerf) : now,\n\t  measure: nativePerf ? function (comment, startMark, endMark) {\n\t    // `performance.measure` may fail if the mark could not be found.\n\t    // reasons a specific mark could not be found include: outside code invoking `performance.clearMarks()`\n\t    try {\n\t      nativePerf.measure(comment, startMark, endMark);\n\t    } catch (ex) {\n\t      Logger.warn(\"performance.measure could not be executed because of \", ex.message);\n\t    }\n\t  } : function () {},\n\t  mark: nativePerf ? nativePerf.mark.bind(nativePerf) : function () {}\n\t}; // Returns a new Array with the elements that are in a but not in b\n\n\tfunction diff(a, b) {\n\t  var result = a.slice();\n\n\t  for (var i = 0; i < result.length; i++) {\n\t    for (var j = 0; j < b.length; j++) {\n\t      if (result[i] === b[j]) {\n\t        result.splice(i, 1);\n\t        i--;\n\t        break;\n\t      }\n\t    }\n\t  }\n\n\t  return result;\n\t}\n\t/**\n\t * Determines whether an element exists in a given array or not.\n\t *\n\t * @method inArray\n\t * @param {Any} elem\n\t * @param {Array} array\n\t * @return {boolean}\n\t */\n\n\tfunction inArray(elem, array) {\n\t  return array.indexOf(elem) !== -1;\n\t}\n\t/**\n\t * Makes a clone of an object using only Array or Object as base,\n\t * and copies over the own enumerable properties.\n\t *\n\t * @param {Object} obj\n\t * @return {Object} New object with only the own properties (recursively).\n\t */\n\n\tfunction objectValues(obj) {\n\t  var vals = is(\"array\", obj) ? [] : {};\n\n\t  for (var key in obj) {\n\t    if (hasOwn.call(obj, key)) {\n\t      var val = obj[key];\n\t      vals[key] = val === Object(val) ? objectValues(val) : val;\n\t    }\n\t  }\n\n\t  return vals;\n\t}\n\tfunction extend(a, b, undefOnly) {\n\t  for (var prop in b) {\n\t    if (hasOwn.call(b, prop)) {\n\t      if (b[prop] === undefined) {\n\t        delete a[prop];\n\t      } else if (!(undefOnly && typeof a[prop] !== \"undefined\")) {\n\t        a[prop] = b[prop];\n\t      }\n\t    }\n\t  }\n\n\t  return a;\n\t}\n\tfunction objectType(obj) {\n\t  if (typeof obj === \"undefined\") {\n\t    return \"undefined\";\n\t  } // Consider: typeof null === object\n\n\n\t  if (obj === null) {\n\t    return \"null\";\n\t  }\n\n\t  var match = toString.call(obj).match(/^\\[object\\s(.*)\\]$/);\n\t  var type = match && match[1];\n\n\t  switch (type) {\n\t    case \"Number\":\n\t      if (isNaN(obj)) {\n\t        return \"nan\";\n\t      }\n\n\t      return \"number\";\n\n\t    case \"String\":\n\t    case \"Boolean\":\n\t    case \"Array\":\n\t    case \"Set\":\n\t    case \"Map\":\n\t    case \"Date\":\n\t    case \"RegExp\":\n\t    case \"Function\":\n\t    case \"Symbol\":\n\t      return type.toLowerCase();\n\n\t    default:\n\t      return _typeof(obj);\n\t  }\n\t} // Safe object type checking\n\n\tfunction is(type, obj) {\n\t  return objectType(obj) === type;\n\t} // Based on Java's String.hashCode, a simple but not\n\t// rigorously collision resistant hashing function\n\n\tfunction generateHash(module, testName) {\n\t  var str = module + \"\\x1C\" + testName;\n\t  var hash = 0;\n\n\t  for (var i = 0; i < str.length; i++) {\n\t    hash = (hash << 5) - hash + str.charCodeAt(i);\n\t    hash |= 0;\n\t  } // Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t  // strictly necessary but increases user understanding that the id is a SHA-like hash\n\n\n\t  var hex = (0x100000000 + hash).toString(16);\n\n\t  if (hex.length < 8) {\n\t    hex = \"0000000\" + hex;\n\t  }\n\n\t  return hex.slice(-8);\n\t}\n\n\t// Authors: Philippe Rathé <prathe@gmail.com>, David Chan <david@troi.org>\n\n\tvar equiv = (function () {\n\t  // Value pairs queued for comparison. Used for breadth-first processing order, recursion\n\t  // detection and avoiding repeated comparison (see below for details).\n\t  // Elements are { a: val, b: val }.\n\t  var pairs = [];\n\n\t  var getProto = Object.getPrototypeOf || function (obj) {\n\t    return obj.__proto__;\n\t  };\n\n\t  function useStrictEquality(a, b) {\n\t    // This only gets called if a and b are not strict equal, and is used to compare on\n\t    // the primitive values inside object wrappers. For example:\n\t    // `var i = 1;`\n\t    // `var j = new Number(1);`\n\t    // Neither a nor b can be null, as a !== b and they have the same type.\n\t    if (_typeof(a) === \"object\") {\n\t      a = a.valueOf();\n\t    }\n\n\t    if (_typeof(b) === \"object\") {\n\t      b = b.valueOf();\n\t    }\n\n\t    return a === b;\n\t  }\n\n\t  function compareConstructors(a, b) {\n\t    var protoA = getProto(a);\n\t    var protoB = getProto(b); // Comparing constructors is more strict than using `instanceof`\n\n\t    if (a.constructor === b.constructor) {\n\t      return true;\n\t    } // Ref #851\n\t    // If the obj prototype descends from a null constructor, treat it\n\t    // as a null prototype.\n\n\n\t    if (protoA && protoA.constructor === null) {\n\t      protoA = null;\n\t    }\n\n\t    if (protoB && protoB.constructor === null) {\n\t      protoB = null;\n\t    } // Allow objects with no prototype to be equivalent to\n\t    // objects with Object as their constructor.\n\n\n\t    if (protoA === null && protoB === Object.prototype || protoB === null && protoA === Object.prototype) {\n\t      return true;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  function getRegExpFlags(regexp) {\n\t    return \"flags\" in regexp ? regexp.flags : regexp.toString().match(/[gimuy]*$/)[0];\n\t  }\n\n\t  function isContainer(val) {\n\t    return [\"object\", \"array\", \"map\", \"set\"].indexOf(objectType(val)) !== -1;\n\t  }\n\n\t  function breadthFirstCompareChild(a, b) {\n\t    // If a is a container not reference-equal to b, postpone the comparison to the\n\t    // end of the pairs queue -- unless (a, b) has been seen before, in which case skip\n\t    // over the pair.\n\t    if (a === b) {\n\t      return true;\n\t    }\n\n\t    if (!isContainer(a)) {\n\t      return typeEquiv(a, b);\n\t    }\n\n\t    if (pairs.every(function (pair) {\n\t      return pair.a !== a || pair.b !== b;\n\t    })) {\n\t      // Not yet started comparing this pair\n\t      pairs.push({\n\t        a: a,\n\t        b: b\n\t      });\n\t    }\n\n\t    return true;\n\t  }\n\n\t  var callbacks = {\n\t    \"string\": useStrictEquality,\n\t    \"boolean\": useStrictEquality,\n\t    \"number\": useStrictEquality,\n\t    \"null\": useStrictEquality,\n\t    \"undefined\": useStrictEquality,\n\t    \"symbol\": useStrictEquality,\n\t    \"date\": useStrictEquality,\n\t    \"nan\": function nan() {\n\t      return true;\n\t    },\n\t    \"regexp\": function regexp(a, b) {\n\t      return a.source === b.source && // Include flags in the comparison\n\t      getRegExpFlags(a) === getRegExpFlags(b);\n\t    },\n\t    // abort (identical references / instance methods were skipped earlier)\n\t    \"function\": function _function() {\n\t      return false;\n\t    },\n\t    \"array\": function array(a, b) {\n\t      var len = a.length;\n\n\t      if (len !== b.length) {\n\t        // Safe and faster\n\t        return false;\n\t      }\n\n\t      for (var i = 0; i < len; i++) {\n\t        // Compare non-containers; queue non-reference-equal containers\n\t        if (!breadthFirstCompareChild(a[i], b[i])) {\n\t          return false;\n\t        }\n\t      }\n\n\t      return true;\n\t    },\n\t    // Define sets a and b to be equivalent if for each element aVal in a, there\n\t    // is some element bVal in b such that aVal and bVal are equivalent. Element\n\t    // repetitions are not counted, so these are equivalent:\n\t    // a = new Set( [ {}, [], [] ] );\n\t    // b = new Set( [ {}, {}, [] ] );\n\t    \"set\": function set(a, b) {\n\t      if (a.size !== b.size) {\n\t        // This optimization has certain quirks because of the lack of\n\t        // repetition counting. For instance, adding the same\n\t        // (reference-identical) element to two equivalent sets can\n\t        // make them non-equivalent.\n\t        return false;\n\t      }\n\n\t      var outerEq = true;\n\t      a.forEach(function (aVal) {\n\t        // Short-circuit if the result is already known. (Using for...of\n\t        // with a break clause would be cleaner here, but it would cause\n\t        // a syntax error on older Javascript implementations even if\n\t        // Set is unused)\n\t        if (!outerEq) {\n\t          return;\n\t        }\n\n\t        var innerEq = false;\n\t        b.forEach(function (bVal) {\n\t          // Likewise, short-circuit if the result is already known\n\t          if (innerEq) {\n\t            return;\n\t          } // Swap out the global pairs list, as the nested call to\n\t          // innerEquiv will clobber its contents\n\n\n\t          var parentPairs = pairs;\n\n\t          if (innerEquiv(bVal, aVal)) {\n\t            innerEq = true;\n\t          } // Replace the global pairs list\n\n\n\t          pairs = parentPairs;\n\t        });\n\n\t        if (!innerEq) {\n\t          outerEq = false;\n\t        }\n\t      });\n\t      return outerEq;\n\t    },\n\t    // Define maps a and b to be equivalent if for each key-value pair (aKey, aVal)\n\t    // in a, there is some key-value pair (bKey, bVal) in b such that\n\t    // [ aKey, aVal ] and [ bKey, bVal ] are equivalent. Key repetitions are not\n\t    // counted, so these are equivalent:\n\t    // a = new Map( [ [ {}, 1 ], [ {}, 1 ], [ [], 1 ] ] );\n\t    // b = new Map( [ [ {}, 1 ], [ [], 1 ], [ [], 1 ] ] );\n\t    \"map\": function map(a, b) {\n\t      if (a.size !== b.size) {\n\t        // This optimization has certain quirks because of the lack of\n\t        // repetition counting. For instance, adding the same\n\t        // (reference-identical) key-value pair to two equivalent maps\n\t        // can make them non-equivalent.\n\t        return false;\n\t      }\n\n\t      var outerEq = true;\n\t      a.forEach(function (aVal, aKey) {\n\t        // Short-circuit if the result is already known. (Using for...of\n\t        // with a break clause would be cleaner here, but it would cause\n\t        // a syntax error on older Javascript implementations even if\n\t        // Map is unused)\n\t        if (!outerEq) {\n\t          return;\n\t        }\n\n\t        var innerEq = false;\n\t        b.forEach(function (bVal, bKey) {\n\t          // Likewise, short-circuit if the result is already known\n\t          if (innerEq) {\n\t            return;\n\t          } // Swap out the global pairs list, as the nested call to\n\t          // innerEquiv will clobber its contents\n\n\n\t          var parentPairs = pairs;\n\n\t          if (innerEquiv([bVal, bKey], [aVal, aKey])) {\n\t            innerEq = true;\n\t          } // Replace the global pairs list\n\n\n\t          pairs = parentPairs;\n\t        });\n\n\t        if (!innerEq) {\n\t          outerEq = false;\n\t        }\n\t      });\n\t      return outerEq;\n\t    },\n\t    \"object\": function object(a, b) {\n\t      if (compareConstructors(a, b) === false) {\n\t        return false;\n\t      }\n\n\t      var aProperties = [];\n\t      var bProperties = []; // Be strict: don't ensure hasOwnProperty and go deep\n\n\t      for (var i in a) {\n\t        // Collect a's properties\n\t        aProperties.push(i); // Skip OOP methods that look the same\n\n\t        if (a.constructor !== Object && typeof a.constructor !== \"undefined\" && typeof a[i] === \"function\" && typeof b[i] === \"function\" && a[i].toString() === b[i].toString()) {\n\t          continue;\n\t        } // Compare non-containers; queue non-reference-equal containers\n\n\n\t        if (!breadthFirstCompareChild(a[i], b[i])) {\n\t          return false;\n\t        }\n\t      }\n\n\t      for (var _i in b) {\n\t        // Collect b's properties\n\t        bProperties.push(_i);\n\t      } // Ensures identical properties name\n\n\n\t      return typeEquiv(aProperties.sort(), bProperties.sort());\n\t    }\n\t  };\n\n\t  function typeEquiv(a, b) {\n\t    var type = objectType(a); // Callbacks for containers will append to the pairs queue to achieve breadth-first\n\t    // search order. The pairs queue is also used to avoid reprocessing any pair of\n\t    // containers that are reference-equal to a previously visited pair (a special case\n\t    // this being recursion detection).\n\t    //\n\t    // Because of this approach, once typeEquiv returns a false value, it should not be\n\t    // called again without clearing the pair queue else it may wrongly report a visited\n\t    // pair as being equivalent.\n\n\t    return objectType(b) === type && callbacks[type](a, b);\n\t  }\n\n\t  function innerEquiv(a, b) {\n\t    // We're done when there's nothing more to compare\n\t    if (arguments.length < 2) {\n\t      return true;\n\t    } // Clear the global pair queue and add the top-level values being compared\n\n\n\t    pairs = [{\n\t      a: a,\n\t      b: b\n\t    }];\n\n\t    for (var i = 0; i < pairs.length; i++) {\n\t      var pair = pairs[i]; // Perform type-specific comparison on any pairs that are not strictly\n\t      // equal. For container types, that comparison will postpone comparison\n\t      // of any sub-container pair to the end of the pair queue. This gives\n\t      // breadth-first search order. It also avoids the reprocessing of\n\t      // reference-equal siblings, cousins etc, which can have a significant speed\n\t      // impact when comparing a container of small objects each of which has a\n\t      // reference to the same (singleton) large object.\n\n\t      if (pair.a !== pair.b && !typeEquiv(pair.a, pair.b)) {\n\t        return false;\n\t      }\n\t    } // ...across all consecutive argument pairs\n\n\n\t    return arguments.length === 2 || innerEquiv.apply(this, [].slice.call(arguments, 1));\n\t  }\n\n\t  return function () {\n\t    var result = innerEquiv.apply(void 0, arguments); // Release any retained objects\n\n\t    pairs.length = 0;\n\t    return result;\n\t  };\n\t})();\n\n\t/**\n\t * Config object: Maintain internal state\n\t * Later exposed as QUnit.config\n\t * `config` initialized at top of scope\n\t */\n\n\tvar config = {\n\t  // The queue of tests to run\n\t  queue: [],\n\t  // Block until document ready\n\t  blocking: true,\n\t  // By default, run previously failed tests first\n\t  // very useful in combination with \"Hide passed tests\" checked\n\t  reorder: true,\n\t  // By default, modify document.title when suite is done\n\t  altertitle: true,\n\t  // HTML Reporter: collapse every test except the first failing test\n\t  // If false, all failing tests will be expanded\n\t  collapse: true,\n\t  // By default, scroll to top of the page when suite is done\n\t  scrolltop: true,\n\t  // Depth up-to which object will be dumped\n\t  maxDepth: 5,\n\t  // When enabled, all tests must call expect()\n\t  requireExpects: false,\n\t  // Placeholder for user-configurable form-exposed URL parameters\n\t  urlConfig: [],\n\t  // Set of all modules.\n\t  modules: [],\n\t  // The first unnamed module\n\t  currentModule: {\n\t    name: \"\",\n\t    tests: [],\n\t    childModules: [],\n\t    testsRun: 0,\n\t    testsIgnored: 0,\n\t    hooks: {\n\t      before: [],\n\t      beforeEach: [],\n\t      afterEach: [],\n\t      after: []\n\t    }\n\t  },\n\t  callbacks: {},\n\t  // The storage module to use for reordering tests\n\t  storage: localSessionStorage\n\t}; // take a predefined QUnit.config and extend the defaults\n\n\tvar globalConfig = window$1 && window$1.QUnit && window$1.QUnit.config; // only extend the global config if there is no QUnit overload\n\n\tif (window$1 && window$1.QUnit && !window$1.QUnit.version) {\n\t  extend(config, globalConfig);\n\t} // Push a loose unnamed module to the modules collection\n\n\n\tconfig.modules.push(config.currentModule);\n\n\tvar dump = (function () {\n\t  function quote(str) {\n\t    return \"\\\"\" + str.toString().replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\";\n\t  }\n\n\t  function literal(o) {\n\t    return o + \"\";\n\t  }\n\n\t  function join(pre, arr, post) {\n\t    var s = dump.separator();\n\t    var inner = dump.indent(1);\n\n\t    if (arr.join) {\n\t      arr = arr.join(\",\" + s + inner);\n\t    }\n\n\t    if (!arr) {\n\t      return pre + post;\n\t    }\n\n\t    var base = dump.indent();\n\t    return [pre, inner + arr, base + post].join(s);\n\t  }\n\n\t  function array(arr, stack) {\n\t    if (dump.maxDepth && dump.depth > dump.maxDepth) {\n\t      return \"[object Array]\";\n\t    }\n\n\t    this.up();\n\t    var i = arr.length;\n\t    var ret = new Array(i);\n\n\t    while (i--) {\n\t      ret[i] = this.parse(arr[i], undefined, stack);\n\t    }\n\n\t    this.down();\n\t    return join(\"[\", ret, \"]\");\n\t  }\n\n\t  function isArray(obj) {\n\t    return (//Native Arrays\n\t      toString.call(obj) === \"[object Array]\" || // NodeList objects\n\t      typeof obj.length === \"number\" && obj.item !== undefined && (obj.length ? obj.item(0) === obj[0] : obj.item(0) === null && obj[0] === undefined)\n\t    );\n\t  }\n\n\t  var reName = /^function (\\w+)/;\n\t  var dump = {\n\t    // The objType is used mostly internally, you can fix a (custom) type in advance\n\t    parse: function parse(obj, objType, stack) {\n\t      stack = stack || [];\n\t      var objIndex = stack.indexOf(obj);\n\n\t      if (objIndex !== -1) {\n\t        return \"recursion(\".concat(objIndex - stack.length, \")\");\n\t      }\n\n\t      objType = objType || this.typeOf(obj);\n\t      var parser = this.parsers[objType];\n\n\t      var parserType = _typeof(parser);\n\n\t      if (parserType === \"function\") {\n\t        stack.push(obj);\n\t        var res = parser.call(this, obj, stack);\n\t        stack.pop();\n\t        return res;\n\t      }\n\n\t      return parserType === \"string\" ? parser : this.parsers.error;\n\t    },\n\t    typeOf: function typeOf(obj) {\n\t      var type;\n\n\t      if (obj === null) {\n\t        type = \"null\";\n\t      } else if (typeof obj === \"undefined\") {\n\t        type = \"undefined\";\n\t      } else if (is(\"regexp\", obj)) {\n\t        type = \"regexp\";\n\t      } else if (is(\"date\", obj)) {\n\t        type = \"date\";\n\t      } else if (is(\"function\", obj)) {\n\t        type = \"function\";\n\t      } else if (obj.setInterval !== undefined && obj.document !== undefined && obj.nodeType === undefined) {\n\t        type = \"window\";\n\t      } else if (obj.nodeType === 9) {\n\t        type = \"document\";\n\t      } else if (obj.nodeType) {\n\t        type = \"node\";\n\t      } else if (isArray(obj)) {\n\t        type = \"array\";\n\t      } else if (obj.constructor === Error.prototype.constructor) {\n\t        type = \"error\";\n\t      } else {\n\t        type = _typeof(obj);\n\t      }\n\n\t      return type;\n\t    },\n\t    separator: function separator() {\n\t      if (this.multiline) {\n\t        return this.HTML ? \"<br />\" : \"\\n\";\n\t      } else {\n\t        return this.HTML ? \"&#160;\" : \" \";\n\t      }\n\t    },\n\t    // Extra can be a number, shortcut for increasing-calling-decreasing\n\t    indent: function indent(extra) {\n\t      if (!this.multiline) {\n\t        return \"\";\n\t      }\n\n\t      var chr = this.indentChar;\n\n\t      if (this.HTML) {\n\t        chr = chr.replace(/\\t/g, \"   \").replace(/ /g, \"&#160;\");\n\t      }\n\n\t      return new Array(this.depth + (extra || 0)).join(chr);\n\t    },\n\t    up: function up(a) {\n\t      this.depth += a || 1;\n\t    },\n\t    down: function down(a) {\n\t      this.depth -= a || 1;\n\t    },\n\t    setParser: function setParser(name, parser) {\n\t      this.parsers[name] = parser;\n\t    },\n\t    // The next 3 are exposed so you can use them\n\t    quote: quote,\n\t    literal: literal,\n\t    join: join,\n\t    depth: 1,\n\t    maxDepth: config.maxDepth,\n\t    // This is the list of parsers, to modify them, use dump.setParser\n\t    parsers: {\n\t      window: \"[Window]\",\n\t      document: \"[Document]\",\n\t      error: function error(_error) {\n\t        return \"Error(\\\"\" + _error.message + \"\\\")\";\n\t      },\n\t      unknown: \"[Unknown]\",\n\t      \"null\": \"null\",\n\t      \"undefined\": \"undefined\",\n\t      \"function\": function _function(fn) {\n\t        var ret = \"function\"; // Functions never have name in IE\n\n\t        var name = \"name\" in fn ? fn.name : (reName.exec(fn) || [])[1];\n\n\t        if (name) {\n\t          ret += \" \" + name;\n\t        }\n\n\t        ret += \"(\";\n\t        ret = [ret, dump.parse(fn, \"functionArgs\"), \"){\"].join(\"\");\n\t        return join(ret, dump.parse(fn, \"functionCode\"), \"}\");\n\t      },\n\t      array: array,\n\t      nodelist: array,\n\t      \"arguments\": array,\n\t      object: function object(map, stack) {\n\t        var ret = [];\n\n\t        if (dump.maxDepth && dump.depth > dump.maxDepth) {\n\t          return \"[object Object]\";\n\t        }\n\n\t        dump.up();\n\t        var keys = [];\n\n\t        for (var key in map) {\n\t          keys.push(key);\n\t        } // Some properties are not always enumerable on Error objects.\n\n\n\t        var nonEnumerableProperties = [\"message\", \"name\"];\n\n\t        for (var i in nonEnumerableProperties) {\n\t          var _key = nonEnumerableProperties[i];\n\n\t          if (_key in map && !inArray(_key, keys)) {\n\t            keys.push(_key);\n\t          }\n\t        }\n\n\t        keys.sort();\n\n\t        for (var _i = 0; _i < keys.length; _i++) {\n\t          var _key2 = keys[_i];\n\t          var val = map[_key2];\n\t          ret.push(dump.parse(_key2, \"key\") + \": \" + dump.parse(val, undefined, stack));\n\t        }\n\n\t        dump.down();\n\t        return join(\"{\", ret, \"}\");\n\t      },\n\t      node: function node(_node) {\n\t        var open = dump.HTML ? \"&lt;\" : \"<\";\n\t        var close = dump.HTML ? \"&gt;\" : \">\";\n\n\t        var tag = _node.nodeName.toLowerCase();\n\n\t        var ret = open + tag;\n\t        var attrs = _node.attributes;\n\n\t        if (attrs) {\n\t          for (var i = 0, len = attrs.length; i < len; i++) {\n\t            var val = attrs[i].nodeValue; // IE6 includes all attributes in .attributes, even ones not explicitly\n\t            // set. Those have values like undefined, null, 0, false, \"\" or\n\t            // \"inherit\".\n\n\t            if (val && val !== \"inherit\") {\n\t              ret += \" \" + attrs[i].nodeName + \"=\" + dump.parse(val, \"attribute\");\n\t            }\n\t          }\n\t        }\n\n\t        ret += close; // Show content of TextNode or CDATASection\n\n\t        if (_node.nodeType === 3 || _node.nodeType === 4) {\n\t          ret += _node.nodeValue;\n\t        }\n\n\t        return ret + open + \"/\" + tag + close;\n\t      },\n\t      // Function calls it internally, it's the arguments part of the function\n\t      functionArgs: function functionArgs(fn) {\n\t        var l = fn.length;\n\n\t        if (!l) {\n\t          return \"\";\n\t        }\n\n\t        var args = new Array(l);\n\n\t        while (l--) {\n\t          // 97 is 'a'\n\t          args[l] = String.fromCharCode(97 + l);\n\t        }\n\n\t        return \" \" + args.join(\", \") + \" \";\n\t      },\n\t      // Object calls it internally, the key part of an item in a map\n\t      key: quote,\n\t      // Function calls it internally, it's the content of the function\n\t      functionCode: \"[code]\",\n\t      // Node calls it internally, it's a html attribute value\n\t      attribute: quote,\n\t      string: quote,\n\t      date: quote,\n\t      regexp: literal,\n\t      number: literal,\n\t      \"boolean\": literal,\n\t      symbol: function symbol(sym) {\n\t        return sym.toString();\n\t      }\n\t    },\n\t    // If true, entities are escaped ( <, >, \\t, space and \\n )\n\t    HTML: false,\n\t    // Indentation unit\n\t    indentChar: \"  \",\n\t    // If true, items in a collection, are separated by a \\n, else just a space.\n\t    multiline: true\n\t  };\n\t  return dump;\n\t})();\n\n\tvar SuiteReport = /*#__PURE__*/function () {\n\t  function SuiteReport(name, parentSuite) {\n\t    _classCallCheck(this, SuiteReport);\n\n\t    this.name = name;\n\t    this.fullName = parentSuite ? parentSuite.fullName.concat(name) : [];\n\t    this.tests = [];\n\t    this.childSuites = [];\n\n\t    if (parentSuite) {\n\t      parentSuite.pushChildSuite(this);\n\t    }\n\t  }\n\n\t  _createClass(SuiteReport, [{\n\t    key: \"start\",\n\t    value: function start(recordTime) {\n\t      if (recordTime) {\n\t        this._startTime = performance.now();\n\t        var suiteLevel = this.fullName.length;\n\t        performance.mark(\"qunit_suite_\".concat(suiteLevel, \"_start\"));\n\t      }\n\n\t      return {\n\t        name: this.name,\n\t        fullName: this.fullName.slice(),\n\t        tests: this.tests.map(function (test) {\n\t          return test.start();\n\t        }),\n\t        childSuites: this.childSuites.map(function (suite) {\n\t          return suite.start();\n\t        }),\n\t        testCounts: {\n\t          total: this.getTestCounts().total\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: \"end\",\n\t    value: function end(recordTime) {\n\t      if (recordTime) {\n\t        this._endTime = performance.now();\n\t        var suiteLevel = this.fullName.length;\n\t        var suiteName = this.fullName.join(\" – \");\n\t        performance.mark(\"qunit_suite_\".concat(suiteLevel, \"_end\"));\n\t        performance.measure(suiteLevel === 0 ? \"QUnit Test Run\" : \"QUnit Test Suite: \".concat(suiteName), \"qunit_suite_\".concat(suiteLevel, \"_start\"), \"qunit_suite_\".concat(suiteLevel, \"_end\"));\n\t      }\n\n\t      return {\n\t        name: this.name,\n\t        fullName: this.fullName.slice(),\n\t        tests: this.tests.map(function (test) {\n\t          return test.end();\n\t        }),\n\t        childSuites: this.childSuites.map(function (suite) {\n\t          return suite.end();\n\t        }),\n\t        testCounts: this.getTestCounts(),\n\t        runtime: this.getRuntime(),\n\t        status: this.getStatus()\n\t      };\n\t    }\n\t  }, {\n\t    key: \"pushChildSuite\",\n\t    value: function pushChildSuite(suite) {\n\t      this.childSuites.push(suite);\n\t    }\n\t  }, {\n\t    key: \"pushTest\",\n\t    value: function pushTest(test) {\n\t      this.tests.push(test);\n\t    }\n\t  }, {\n\t    key: \"getRuntime\",\n\t    value: function getRuntime() {\n\t      return this._endTime - this._startTime;\n\t    }\n\t  }, {\n\t    key: \"getTestCounts\",\n\t    value: function getTestCounts() {\n\t      var counts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n\t        passed: 0,\n\t        failed: 0,\n\t        skipped: 0,\n\t        todo: 0,\n\t        total: 0\n\t      };\n\t      counts = this.tests.reduce(function (counts, test) {\n\t        if (test.valid) {\n\t          counts[test.getStatus()]++;\n\t          counts.total++;\n\t        }\n\n\t        return counts;\n\t      }, counts);\n\t      return this.childSuites.reduce(function (counts, suite) {\n\t        return suite.getTestCounts(counts);\n\t      }, counts);\n\t    }\n\t  }, {\n\t    key: \"getStatus\",\n\t    value: function getStatus() {\n\t      var _this$getTestCounts = this.getTestCounts(),\n\t          total = _this$getTestCounts.total,\n\t          failed = _this$getTestCounts.failed,\n\t          skipped = _this$getTestCounts.skipped,\n\t          todo = _this$getTestCounts.todo;\n\n\t      if (failed) {\n\t        return \"failed\";\n\t      } else {\n\t        if (skipped === total) {\n\t          return \"skipped\";\n\t        } else if (todo === total) {\n\t          return \"todo\";\n\t        } else {\n\t          return \"passed\";\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  return SuiteReport;\n\t}();\n\n\tvar moduleStack = [];\n\n\tfunction isParentModuleInQueue() {\n\t  var modulesInQueue = config.modules.map(function (module) {\n\t    return module.moduleId;\n\t  });\n\t  return moduleStack.some(function (module) {\n\t    return modulesInQueue.includes(module.moduleId);\n\t  });\n\t}\n\n\tfunction createModule(name, testEnvironment, modifiers) {\n\t  var parentModule = moduleStack.length ? moduleStack.slice(-1)[0] : null;\n\t  var moduleName = parentModule !== null ? [parentModule.name, name].join(\" > \") : name;\n\t  var parentSuite = parentModule ? parentModule.suiteReport : globalSuite;\n\t  var skip = parentModule !== null && parentModule.skip || modifiers.skip;\n\t  var todo = parentModule !== null && parentModule.todo || modifiers.todo;\n\t  var module = {\n\t    name: moduleName,\n\t    parentModule: parentModule,\n\t    tests: [],\n\t    moduleId: generateHash(moduleName),\n\t    testsRun: 0,\n\t    testsIgnored: 0,\n\t    childModules: [],\n\t    suiteReport: new SuiteReport(name, parentSuite),\n\t    // Pass along `skip` and `todo` properties from parent module, in case\n\t    // there is one, to childs. And use own otherwise.\n\t    // This property will be used to mark own tests and tests of child suites\n\t    // as either `skipped` or `todo`.\n\t    skip: skip,\n\t    todo: skip ? false : todo,\n\t    ignored: modifiers.ignored || false\n\t  };\n\t  var env = {};\n\n\t  if (parentModule) {\n\t    parentModule.childModules.push(module);\n\t    extend(env, parentModule.testEnvironment);\n\t  }\n\n\t  extend(env, testEnvironment);\n\t  module.testEnvironment = env;\n\t  config.modules.push(module);\n\t  return module;\n\t}\n\n\tfunction processModule(name, options, executeNow) {\n\t  var modifiers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n\t  if (objectType(options) === \"function\") {\n\t    executeNow = options;\n\t    options = undefined;\n\t  }\n\n\t  var module = createModule(name, options, modifiers); // Move any hooks to a 'hooks' object\n\n\t  var testEnvironment = module.testEnvironment;\n\t  var hooks = module.hooks = {};\n\t  setHookFromEnvironment(hooks, testEnvironment, \"before\");\n\t  setHookFromEnvironment(hooks, testEnvironment, \"beforeEach\");\n\t  setHookFromEnvironment(hooks, testEnvironment, \"afterEach\");\n\t  setHookFromEnvironment(hooks, testEnvironment, \"after\");\n\t  var moduleFns = {\n\t    before: setHookFunction(module, \"before\"),\n\t    beforeEach: setHookFunction(module, \"beforeEach\"),\n\t    afterEach: setHookFunction(module, \"afterEach\"),\n\t    after: setHookFunction(module, \"after\")\n\t  };\n\t  var currentModule = config.currentModule;\n\n\t  if (objectType(executeNow) === \"function\") {\n\t    moduleStack.push(module);\n\t    config.currentModule = module;\n\t    executeNow.call(module.testEnvironment, moduleFns);\n\t    moduleStack.pop();\n\t    module = module.parentModule || currentModule;\n\t  }\n\n\t  config.currentModule = module;\n\n\t  function setHookFromEnvironment(hooks, environment, name) {\n\t    var potentialHook = environment[name];\n\t    hooks[name] = typeof potentialHook === \"function\" ? [potentialHook] : [];\n\t    delete environment[name];\n\t  }\n\n\t  function setHookFunction(module, hookName) {\n\t    return function setHook(callback) {\n\t      module.hooks[hookName].push(callback);\n\t    };\n\t  }\n\t}\n\n\tvar focused = false; // indicates that the \"only\" filter was used\n\n\tfunction module$1(name, options, executeNow) {\n\t  var ignored = focused && !isParentModuleInQueue();\n\t  processModule(name, options, executeNow, {\n\t    ignored: ignored\n\t  });\n\t}\n\n\tmodule$1.only = function () {\n\t  if (!focused) {\n\t    config.modules.length = 0;\n\t    config.queue.length = 0;\n\t  }\n\n\t  processModule.apply(void 0, arguments);\n\t  focused = true;\n\t};\n\n\tmodule$1.skip = function (name, options, executeNow) {\n\t  if (focused) {\n\t    return;\n\t  }\n\n\t  processModule(name, options, executeNow, {\n\t    skip: true\n\t  });\n\t};\n\n\tmodule$1.todo = function (name, options, executeNow) {\n\t  if (focused) {\n\t    return;\n\t  }\n\n\t  processModule(name, options, executeNow, {\n\t    todo: true\n\t  });\n\t};\n\n\tvar LISTENERS = Object.create(null);\n\tvar SUPPORTED_EVENTS = [\"runStart\", \"suiteStart\", \"testStart\", \"assertion\", \"testEnd\", \"suiteEnd\", \"runEnd\"];\n\t/**\n\t * Emits an event with the specified data to all currently registered listeners.\n\t * Callbacks will fire in the order in which they are registered (FIFO). This\n\t * function is not exposed publicly; it is used by QUnit internals to emit\n\t * logging events.\n\t *\n\t * @private\n\t * @method emit\n\t * @param {string} eventName\n\t * @param {Object} data\n\t * @return {void}\n\t */\n\n\tfunction emit(eventName, data) {\n\t  if (objectType(eventName) !== \"string\") {\n\t    throw new TypeError(\"eventName must be a string when emitting an event\");\n\t  } // Clone the callbacks in case one of them registers a new callback\n\n\n\t  var originalCallbacks = LISTENERS[eventName];\n\t  var callbacks = originalCallbacks ? _toConsumableArray(originalCallbacks) : [];\n\n\t  for (var i = 0; i < callbacks.length; i++) {\n\t    callbacks[i](data);\n\t  }\n\t}\n\t/**\n\t * Registers a callback as a listener to the specified event.\n\t *\n\t * @public\n\t * @method on\n\t * @param {string} eventName\n\t * @param {Function} callback\n\t * @return {void}\n\t */\n\n\tfunction on(eventName, callback) {\n\t  if (objectType(eventName) !== \"string\") {\n\t    throw new TypeError(\"eventName must be a string when registering a listener\");\n\t  } else if (!inArray(eventName, SUPPORTED_EVENTS)) {\n\t    var events = SUPPORTED_EVENTS.join(\", \");\n\t    throw new Error(\"\\\"\".concat(eventName, \"\\\" is not a valid event; must be one of: \").concat(events, \".\"));\n\t  } else if (objectType(callback) !== \"function\") {\n\t    throw new TypeError(\"callback must be a function when registering a listener\");\n\t  }\n\n\t  if (!LISTENERS[eventName]) {\n\t    LISTENERS[eventName] = [];\n\t  } // Don't register the same callback more than once\n\n\n\t  if (!inArray(callback, LISTENERS[eventName])) {\n\t    LISTENERS[eventName].push(callback);\n\t  }\n\t}\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction createCommonjsModule(fn, basedir, module) {\n\t\treturn module = {\n\t\t\tpath: basedir,\n\t\t\texports: {},\n\t\t\trequire: function (path, base) {\n\t\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t\t}\n\t\t}, fn(module, module.exports), module.exports;\n\t}\n\n\tfunction commonjsRequire () {\n\t\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n\t}\n\n\tvar promisePolyfill = createCommonjsModule(function (module) {\n\t  /*\n\t  https://github.com/taylorhakes/promise-polyfill/tree/8.2.0\n\t  \n\t  Copyright 2014 Taylor Hakes\n\t  Copyright 2014 Forbes Lindesay\n\t  \n\t  Permission is hereby granted, free of charge, to any person obtaining a copy\n\t  of this software and associated documentation files (the \"Software\"), to deal\n\t  in the Software without restriction, including without limitation the rights\n\t  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t  copies of the Software, and to permit persons to whom the Software is\n\t  furnished to do so, subject to the following conditions:\n\t  \n\t  The above copyright notice and this permission notice shall be included in\n\t  all copies or substantial portions of the Software.\n\t  \n\t  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t  THE SOFTWARE.\n\t  \n\t  -------\n\t  \n\t  Patches for use in QUnit:\n\t  \n\t  - 2021-01-09: Export as module only, don't change global scope as QUnit must not\n\t    affect the host context (e.g. people may test their application intentionally\n\t    with different or no polyfills and we must not affect that).\n\t  \n\t  - 2021-01-10: Avoid unconditional reference to setTimeout, which isn't supported\n\t    on SpiderMonkey (mozjs 68). Done by re-arranging the code so that we return early\n\t    (it has native support for Promise), instead of building an unused polyfill.\n\t  \n\t  - 2021-01-10: Add 'globalThis' to globalNS implementation to support SpiderMonkey.\n\t  \n\t  */\n\t  (function () {\n\t    /** @suppress {undefinedVars} */\n\n\t    var globalNS = function () {\n\t      // the only reliable means to get the global object is\n\t      // `Function('return this')()`\n\t      // However, this causes CSP violations in Chrome apps.\n\t      if (typeof globalThis !== 'undefined') {\n\t        return globalThis;\n\t      }\n\n\t      if (typeof self !== 'undefined') {\n\t        return self;\n\t      }\n\n\t      if (typeof window !== 'undefined') {\n\t        return window;\n\t      }\n\n\t      if (typeof commonjsGlobal !== 'undefined') {\n\t        return commonjsGlobal;\n\t      }\n\n\t      throw new Error('unable to locate global object');\n\t    }(); // Expose the polyfill if Promise is undefined or set to a\n\t    // non-function value. The latter can be due to a named HTMLElement\n\t    // being exposed by browsers for legacy reasons.\n\t    // https://github.com/taylorhakes/promise-polyfill/issues/114\n\n\n\t    if (typeof globalNS['Promise'] === 'function') {\n\t      module.exports = globalNS['Promise'];\n\t      return;\n\t    }\n\t    /**\n\t     * @this {Promise}\n\t     */\n\n\n\t    function finallyConstructor(callback) {\n\t      var constructor = this.constructor;\n\t      return this.then(function (value) {\n\t        // @ts-ignore\n\t        return constructor.resolve(callback()).then(function () {\n\t          return value;\n\t        });\n\t      }, function (reason) {\n\t        // @ts-ignore\n\t        return constructor.resolve(callback()).then(function () {\n\t          // @ts-ignore\n\t          return constructor.reject(reason);\n\t        });\n\t      });\n\t    }\n\n\t    function allSettled(arr) {\n\t      var P = this;\n\t      return new P(function (resolve, reject) {\n\t        if (!(arr && typeof arr.length !== 'undefined')) {\n\t          return reject(new TypeError(_typeof(arr) + ' ' + arr + ' is not iterable(cannot read property Symbol(Symbol.iterator))'));\n\t        }\n\n\t        var args = Array.prototype.slice.call(arr);\n\t        if (args.length === 0) return resolve([]);\n\t        var remaining = args.length;\n\n\t        function res(i, val) {\n\t          if (val && (_typeof(val) === 'object' || typeof val === 'function')) {\n\t            var then = val.then;\n\n\t            if (typeof then === 'function') {\n\t              then.call(val, function (val) {\n\t                res(i, val);\n\t              }, function (e) {\n\t                args[i] = {\n\t                  status: 'rejected',\n\t                  reason: e\n\t                };\n\n\t                if (--remaining === 0) {\n\t                  resolve(args);\n\t                }\n\t              });\n\t              return;\n\t            }\n\t          }\n\n\t          args[i] = {\n\t            status: 'fulfilled',\n\t            value: val\n\t          };\n\n\t          if (--remaining === 0) {\n\t            resolve(args);\n\t          }\n\t        }\n\n\t        for (var i = 0; i < args.length; i++) {\n\t          res(i, args[i]);\n\t        }\n\t      });\n\t    } // Store setTimeout reference so promise-polyfill will be unaffected by\n\t    // other code modifying setTimeout (like sinon.useFakeTimers())\n\n\n\t    var setTimeoutFunc = setTimeout;\n\n\t    function isArray(x) {\n\t      return Boolean(x && typeof x.length !== 'undefined');\n\t    }\n\n\t    function noop() {} // Polyfill for Function.prototype.bind\n\n\n\t    function bind(fn, thisArg) {\n\t      return function () {\n\t        fn.apply(thisArg, arguments);\n\t      };\n\t    }\n\t    /**\n\t     * @constructor\n\t     * @param {Function} fn\n\t     */\n\n\n\t    function Promise(fn) {\n\t      if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');\n\t      if (typeof fn !== 'function') throw new TypeError('not a function');\n\t      /** @type {!number} */\n\n\t      this._state = 0;\n\t      /** @type {!boolean} */\n\n\t      this._handled = false;\n\t      /** @type {Promise|undefined} */\n\n\t      this._value = undefined;\n\t      /** @type {!Array<!Function>} */\n\n\t      this._deferreds = [];\n\t      doResolve(fn, this);\n\t    }\n\n\t    function handle(self, deferred) {\n\t      while (self._state === 3) {\n\t        self = self._value;\n\t      }\n\n\t      if (self._state === 0) {\n\t        self._deferreds.push(deferred);\n\n\t        return;\n\t      }\n\n\t      self._handled = true;\n\n\t      Promise._immediateFn(function () {\n\t        var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n\n\t        if (cb === null) {\n\t          (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n\t          return;\n\t        }\n\n\t        var ret;\n\n\t        try {\n\t          ret = cb(self._value);\n\t        } catch (e) {\n\t          reject(deferred.promise, e);\n\t          return;\n\t        }\n\n\t        resolve(deferred.promise, ret);\n\t      });\n\t    }\n\n\t    function resolve(self, newValue) {\n\t      try {\n\t        // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n\t        if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n\n\t        if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {\n\t          var then = newValue.then;\n\n\t          if (newValue instanceof Promise) {\n\t            self._state = 3;\n\t            self._value = newValue;\n\t            finale(self);\n\t            return;\n\t          } else if (typeof then === 'function') {\n\t            doResolve(bind(then, newValue), self);\n\t            return;\n\t          }\n\t        }\n\n\t        self._state = 1;\n\t        self._value = newValue;\n\t        finale(self);\n\t      } catch (e) {\n\t        reject(self, e);\n\t      }\n\t    }\n\n\t    function reject(self, newValue) {\n\t      self._state = 2;\n\t      self._value = newValue;\n\t      finale(self);\n\t    }\n\n\t    function finale(self) {\n\t      if (self._state === 2 && self._deferreds.length === 0) {\n\t        Promise._immediateFn(function () {\n\t          if (!self._handled) {\n\t            Promise._unhandledRejectionFn(self._value);\n\t          }\n\t        });\n\t      }\n\n\t      for (var i = 0, len = self._deferreds.length; i < len; i++) {\n\t        handle(self, self._deferreds[i]);\n\t      }\n\n\t      self._deferreds = null;\n\t    }\n\t    /**\n\t     * @constructor\n\t     */\n\n\n\t    function Handler(onFulfilled, onRejected, promise) {\n\t      this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n\t      this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n\t      this.promise = promise;\n\t    }\n\t    /**\n\t     * Take a potentially misbehaving resolver function and make sure\n\t     * onFulfilled and onRejected are only called once.\n\t     *\n\t     * Makes no guarantees about asynchrony.\n\t     */\n\n\n\t    function doResolve(fn, self) {\n\t      var done = false;\n\n\t      try {\n\t        fn(function (value) {\n\t          if (done) return;\n\t          done = true;\n\t          resolve(self, value);\n\t        }, function (reason) {\n\t          if (done) return;\n\t          done = true;\n\t          reject(self, reason);\n\t        });\n\t      } catch (ex) {\n\t        if (done) return;\n\t        done = true;\n\t        reject(self, ex);\n\t      }\n\t    }\n\n\t    Promise.prototype['catch'] = function (onRejected) {\n\t      return this.then(null, onRejected);\n\t    };\n\n\t    Promise.prototype.then = function (onFulfilled, onRejected) {\n\t      // @ts-ignore\n\t      var prom = new this.constructor(noop);\n\t      handle(this, new Handler(onFulfilled, onRejected, prom));\n\t      return prom;\n\t    };\n\n\t    Promise.prototype['finally'] = finallyConstructor;\n\n\t    Promise.all = function (arr) {\n\t      return new Promise(function (resolve, reject) {\n\t        if (!isArray(arr)) {\n\t          return reject(new TypeError('Promise.all accepts an array'));\n\t        }\n\n\t        var args = Array.prototype.slice.call(arr);\n\t        if (args.length === 0) return resolve([]);\n\t        var remaining = args.length;\n\n\t        function res(i, val) {\n\t          try {\n\t            if (val && (_typeof(val) === 'object' || typeof val === 'function')) {\n\t              var then = val.then;\n\n\t              if (typeof then === 'function') {\n\t                then.call(val, function (val) {\n\t                  res(i, val);\n\t                }, reject);\n\t                return;\n\t              }\n\t            }\n\n\t            args[i] = val;\n\n\t            if (--remaining === 0) {\n\t              resolve(args);\n\t            }\n\t          } catch (ex) {\n\t            reject(ex);\n\t          }\n\t        }\n\n\t        for (var i = 0; i < args.length; i++) {\n\t          res(i, args[i]);\n\t        }\n\t      });\n\t    };\n\n\t    Promise.allSettled = allSettled;\n\n\t    Promise.resolve = function (value) {\n\t      if (value && _typeof(value) === 'object' && value.constructor === Promise) {\n\t        return value;\n\t      }\n\n\t      return new Promise(function (resolve) {\n\t        resolve(value);\n\t      });\n\t    };\n\n\t    Promise.reject = function (value) {\n\t      return new Promise(function (resolve, reject) {\n\t        reject(value);\n\t      });\n\t    };\n\n\t    Promise.race = function (arr) {\n\t      return new Promise(function (resolve, reject) {\n\t        if (!isArray(arr)) {\n\t          return reject(new TypeError('Promise.race accepts an array'));\n\t        }\n\n\t        for (var i = 0, len = arr.length; i < len; i++) {\n\t          Promise.resolve(arr[i]).then(resolve, reject);\n\t        }\n\t      });\n\t    }; // Use polyfill for setImmediate for performance gains\n\n\n\t    Promise._immediateFn = // @ts-ignore\n\t    typeof setImmediate === 'function' && function (fn) {\n\t      // @ts-ignore\n\t      setImmediate(fn);\n\t    } || function (fn) {\n\t      setTimeoutFunc(fn, 0);\n\t    };\n\n\t    Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n\t      if (typeof console !== 'undefined' && console) {\n\t        console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n\t      }\n\t    };\n\n\t    module.exports = Promise;\n\t  })();\n\t});\n\n\tfunction registerLoggingCallbacks(obj) {\n\t  var callbackNames = [\"begin\", \"done\", \"log\", \"testStart\", \"testDone\", \"moduleStart\", \"moduleDone\"];\n\n\t  function registerLoggingCallback(key) {\n\t    var loggingCallback = function loggingCallback(callback) {\n\t      if (objectType(callback) !== \"function\") {\n\t        throw new Error(\"QUnit logging methods require a callback function as their first parameters.\");\n\t      }\n\n\t      config.callbacks[key].push(callback);\n\t    };\n\n\t    return loggingCallback;\n\t  }\n\n\t  for (var i = 0, l = callbackNames.length; i < l; i++) {\n\t    var key = callbackNames[i]; // Initialize key collection of logging callback\n\n\t    if (objectType(config.callbacks[key]) === \"undefined\") {\n\t      config.callbacks[key] = [];\n\t    }\n\n\t    obj[key] = registerLoggingCallback(key);\n\t  }\n\t}\n\tfunction runLoggingCallbacks(key, args) {\n\t  var callbacks = config.callbacks[key]; // Handling 'log' callbacks separately. Unlike the other callbacks,\n\t  // the log callback is not controlled by the processing queue,\n\t  // but rather used by asserts. Hence to promisfy the 'log' callback\n\t  // would mean promisfying each step of a test\n\n\t  if (key === \"log\") {\n\t    callbacks.map(function (callback) {\n\t      return callback(args);\n\t    });\n\t    return;\n\t  } // ensure that each callback is executed serially\n\n\n\t  return callbacks.reduce(function (promiseChain, callback) {\n\t    return promiseChain.then(function () {\n\t      return promisePolyfill.resolve(callback(args));\n\t    });\n\t  }, promisePolyfill.resolve([]));\n\t}\n\n\t// Doesn't support IE9, it will return undefined on these browsers\n\t// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\n\tvar fileName = (sourceFromStacktrace(0) || \"\").replace(/(:\\d+)+\\)?/, \"\").replace(/.+\\//, \"\");\n\tfunction extractStacktrace(e, offset) {\n\t  offset = offset === undefined ? 4 : offset;\n\n\t  if (e && e.stack) {\n\t    var stack = e.stack.split(\"\\n\");\n\n\t    if (/^error$/i.test(stack[0])) {\n\t      stack.shift();\n\t    }\n\n\t    if (fileName) {\n\t      var include = [];\n\n\t      for (var i = offset; i < stack.length; i++) {\n\t        if (stack[i].indexOf(fileName) !== -1) {\n\t          break;\n\t        }\n\n\t        include.push(stack[i]);\n\t      }\n\n\t      if (include.length) {\n\t        return include.join(\"\\n\");\n\t      }\n\t    }\n\n\t    return stack[offset];\n\t  }\n\t}\n\tfunction sourceFromStacktrace(offset) {\n\t  var error = new Error(); // Support: Safari <=7 only, IE <=10 - 11 only\n\t  // Not all browsers generate the `stack` property for `new Error()`, see also #636\n\n\t  if (!error.stack) {\n\t    try {\n\t      throw error;\n\t    } catch (err) {\n\t      error = err;\n\t    }\n\t  }\n\n\t  return extractStacktrace(error, offset);\n\t}\n\n\tvar priorityCount = 0;\n\tvar unitSampler; // This is a queue of functions that are tasks within a single test.\n\t// After tests are dequeued from config.queue they are expanded into\n\t// a set of tasks in this queue.\n\n\tvar taskQueue = [];\n\t/**\n\t * Advances the taskQueue to the next task. If the taskQueue is empty,\n\t * process the testQueue\n\t */\n\n\tfunction advance() {\n\t  advanceTaskQueue();\n\n\t  if (!taskQueue.length && !config.blocking && !config.current) {\n\t    advanceTestQueue();\n\t  }\n\t}\n\t/**\n\t * Advances the taskQueue with an increased depth\n\t */\n\n\n\tfunction advanceTaskQueue() {\n\t  var start = now();\n\t  config.depth = (config.depth || 0) + 1;\n\t  processTaskQueue(start);\n\t  config.depth--;\n\t}\n\t/**\n\t * Process the first task on the taskQueue as a promise.\n\t * Each task is a function returned by https://github.com/qunitjs/qunit/blob/master/src/test.js#L381\n\t */\n\n\n\tfunction processTaskQueue(start) {\n\t  if (taskQueue.length && !config.blocking) {\n\t    var elapsedTime = now() - start;\n\n\t    if (!setTimeout$1 || config.updateRate <= 0 || elapsedTime < config.updateRate) {\n\t      var task = taskQueue.shift();\n\t      promisePolyfill.resolve(task()).then(function () {\n\t        if (!taskQueue.length) {\n\t          advance();\n\t        } else {\n\t          processTaskQueue(start);\n\t        }\n\t      });\n\t    } else {\n\t      setTimeout$1(advance);\n\t    }\n\t  }\n\t}\n\t/**\n\t * Advance the testQueue to the next test to process. Call done() if testQueue completes.\n\t */\n\n\n\tfunction advanceTestQueue() {\n\t  if (!config.blocking && !config.queue.length && config.depth === 0) {\n\t    done();\n\t    return;\n\t  }\n\n\t  var testTasks = config.queue.shift();\n\t  addToTaskQueue(testTasks());\n\n\t  if (priorityCount > 0) {\n\t    priorityCount--;\n\t  }\n\n\t  advance();\n\t}\n\t/**\n\t * Enqueue the tasks for a test into the task queue.\n\t * @param {Array} tasksArray\n\t */\n\n\n\tfunction addToTaskQueue(tasksArray) {\n\t  taskQueue.push.apply(taskQueue, _toConsumableArray(tasksArray));\n\t}\n\t/**\n\t * Return the number of tasks remaining in the task queue to be processed.\n\t * @return {number}\n\t */\n\n\n\tfunction taskQueueLength() {\n\t  return taskQueue.length;\n\t}\n\t/**\n\t * Adds a test to the TestQueue for execution.\n\t * @param {Function} testTasksFunc\n\t * @param {boolean} prioritize\n\t * @param {string} seed\n\t */\n\n\n\tfunction addToTestQueue(testTasksFunc, prioritize, seed) {\n\t  if (prioritize) {\n\t    config.queue.splice(priorityCount++, 0, testTasksFunc);\n\t  } else if (seed) {\n\t    if (!unitSampler) {\n\t      unitSampler = unitSamplerGenerator(seed);\n\t    } // Insert into a random position after all prioritized items\n\n\n\t    var index = Math.floor(unitSampler() * (config.queue.length - priorityCount + 1));\n\t    config.queue.splice(priorityCount + index, 0, testTasksFunc);\n\t  } else {\n\t    config.queue.push(testTasksFunc);\n\t  }\n\t}\n\t/**\n\t * Creates a seeded \"sample\" generator which is used for randomizing tests.\n\t */\n\n\n\tfunction unitSamplerGenerator(seed) {\n\t  // 32-bit xorshift, requires only a nonzero seed\n\t  // https://excamera.com/sphinx/article-xorshift.html\n\t  var sample = parseInt(generateHash(seed), 16) || -1;\n\t  return function () {\n\t    sample ^= sample << 13;\n\t    sample ^= sample >>> 17;\n\t    sample ^= sample << 5; // ECMAScript has no unsigned number type\n\n\t    if (sample < 0) {\n\t      sample += 0x100000000;\n\t    }\n\n\t    return sample / 0x100000000;\n\t  };\n\t}\n\t/**\n\t * This function is called when the ProcessingQueue is done processing all\n\t * items. It handles emitting the final run events.\n\t */\n\n\n\tfunction done() {\n\t  var storage = config.storage;\n\t  ProcessingQueue.finished = true;\n\t  var runtime = now() - config.started;\n\t  var passed = config.stats.all - config.stats.bad;\n\n\t  if (config.stats.testCount === 0) {\n\t    if (config.filter && config.filter.length) {\n\t      throw new Error(\"No tests matched the filter \\\"\".concat(config.filter, \"\\\".\"));\n\t    }\n\n\t    if (config.module && config.module.length) {\n\t      throw new Error(\"No tests matched the module \\\"\".concat(config.module, \"\\\".\"));\n\t    }\n\n\t    if (config.moduleId && config.moduleId.length) {\n\t      throw new Error(\"No tests matched the moduleId \\\"\".concat(config.moduleId, \"\\\".\"));\n\t    }\n\n\t    if (config.testId && config.testId.length) {\n\t      throw new Error(\"No tests matched the testId \\\"\".concat(config.testId, \"\\\".\"));\n\t    }\n\n\t    throw new Error(\"No tests were run.\");\n\t  }\n\n\t  emit(\"runEnd\", globalSuite.end(true));\n\t  runLoggingCallbacks(\"done\", {\n\t    passed: passed,\n\t    failed: config.stats.bad,\n\t    total: config.stats.all,\n\t    runtime: runtime\n\t  }).then(function () {\n\t    // Clear own storage items if all tests passed\n\t    if (storage && config.stats.bad === 0) {\n\t      for (var i = storage.length - 1; i >= 0; i--) {\n\t        var key = storage.key(i);\n\n\t        if (key.indexOf(\"qunit-test-\") === 0) {\n\t          storage.removeItem(key);\n\t        }\n\t      }\n\t    }\n\t  });\n\t}\n\n\tvar ProcessingQueue = {\n\t  finished: false,\n\t  add: addToTestQueue,\n\t  advance: advance,\n\t  taskCount: taskQueueLength\n\t};\n\n\tvar TestReport = /*#__PURE__*/function () {\n\t  function TestReport(name, suite, options) {\n\t    _classCallCheck(this, TestReport);\n\n\t    this.name = name;\n\t    this.suiteName = suite.name;\n\t    this.fullName = suite.fullName.concat(name);\n\t    this.runtime = 0;\n\t    this.assertions = [];\n\t    this.skipped = !!options.skip;\n\t    this.todo = !!options.todo;\n\t    this.valid = options.valid;\n\t    this._startTime = 0;\n\t    this._endTime = 0;\n\t    suite.pushTest(this);\n\t  }\n\n\t  _createClass(TestReport, [{\n\t    key: \"start\",\n\t    value: function start(recordTime) {\n\t      if (recordTime) {\n\t        this._startTime = performance.now();\n\t        performance.mark(\"qunit_test_start\");\n\t      }\n\n\t      return {\n\t        name: this.name,\n\t        suiteName: this.suiteName,\n\t        fullName: this.fullName.slice()\n\t      };\n\t    }\n\t  }, {\n\t    key: \"end\",\n\t    value: function end(recordTime) {\n\t      if (recordTime) {\n\t        this._endTime = performance.now();\n\n\t        if (performance) {\n\t          performance.mark(\"qunit_test_end\");\n\t          var testName = this.fullName.join(\" – \");\n\t          performance.measure(\"QUnit Test: \".concat(testName), \"qunit_test_start\", \"qunit_test_end\");\n\t        }\n\t      }\n\n\t      return extend(this.start(), {\n\t        runtime: this.getRuntime(),\n\t        status: this.getStatus(),\n\t        errors: this.getFailedAssertions(),\n\t        assertions: this.getAssertions()\n\t      });\n\t    }\n\t  }, {\n\t    key: \"pushAssertion\",\n\t    value: function pushAssertion(assertion) {\n\t      this.assertions.push(assertion);\n\t    }\n\t  }, {\n\t    key: \"getRuntime\",\n\t    value: function getRuntime() {\n\t      return this._endTime - this._startTime;\n\t    }\n\t  }, {\n\t    key: \"getStatus\",\n\t    value: function getStatus() {\n\t      if (this.skipped) {\n\t        return \"skipped\";\n\t      }\n\n\t      var testPassed = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;\n\n\t      if (!testPassed) {\n\t        return \"failed\";\n\t      } else if (this.todo) {\n\t        return \"todo\";\n\t      } else {\n\t        return \"passed\";\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getFailedAssertions\",\n\t    value: function getFailedAssertions() {\n\t      return this.assertions.filter(function (assertion) {\n\t        return !assertion.passed;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"getAssertions\",\n\t    value: function getAssertions() {\n\t      return this.assertions.slice();\n\t    } // Remove actual and expected values from assertions. This is to prevent\n\t    // leaking memory throughout a test suite.\n\n\t  }, {\n\t    key: \"slimAssertions\",\n\t    value: function slimAssertions() {\n\t      this.assertions = this.assertions.map(function (assertion) {\n\t        delete assertion.actual;\n\t        delete assertion.expected;\n\t        return assertion;\n\t      });\n\t    }\n\t  }]);\n\n\t  return TestReport;\n\t}();\n\n\tfunction Test(settings) {\n\t  this.expected = null;\n\t  this.assertions = [];\n\t  this.semaphore = 0;\n\t  this.module = config.currentModule;\n\t  this.steps = [];\n\t  this.timeout = undefined;\n\t  extend(this, settings); // If a module is skipped, all its tests and the tests of the child suites\n\t  // should be treated as skipped even if they are defined as `only` or `todo`.\n\t  // As for `todo` module, all its tests will be treated as `todo` except for\n\t  // tests defined as `skip` which will be left intact.\n\t  //\n\t  // So, if a test is defined as `todo` and is inside a skipped module, we should\n\t  // then treat that test as if was defined as `skip`.\n\n\t  if (this.module.skip) {\n\t    this.skip = true;\n\t    this.todo = false; // Skipped tests should be left intact\n\t  } else if (this.module.todo && !this.skip) {\n\t    this.todo = true;\n\t  }\n\n\t  if (!this.skip && typeof this.callback !== \"function\") {\n\t    var method = this.todo ? \"QUnit.todo\" : \"QUnit.test\";\n\t    throw new TypeError(\"You must provide a callback to \".concat(method, \"(\\\"\").concat(this.testName, \"\\\")\"));\n\t  } // No validation after this. Beyond this point, failures must be recorded as\n\t  // a completed test with errors, instead of early bail out.\n\t  // Otherwise, internals may be left in an inconsistent state.\n\t  // Ref https://github.com/qunitjs/qunit/issues/1514\n\n\n\t  ++Test.count;\n\t  this.errorForStack = new Error();\n\t  this.testReport = new TestReport(this.testName, this.module.suiteReport, {\n\t    todo: this.todo,\n\t    skip: this.skip,\n\t    valid: this.valid()\n\t  }); // Register unique strings\n\n\t  for (var i = 0, l = this.module.tests; i < l.length; i++) {\n\t    if (this.module.tests[i].name === this.testName) {\n\t      this.testName += \" \";\n\t    }\n\t  }\n\n\t  this.testId = generateHash(this.module.name, this.testName);\n\t  this.module.tests.push({\n\t    name: this.testName,\n\t    testId: this.testId,\n\t    skip: !!this.skip\n\t  });\n\n\t  if (this.skip) {\n\t    // Skipped tests will fully ignore any sent callback\n\t    this.callback = function () {};\n\n\t    this.async = false;\n\t    this.expected = 0;\n\t  } else {\n\t    this.assert = new Assert(this);\n\t  }\n\t}\n\tTest.count = 0;\n\n\tfunction getNotStartedModules(startModule) {\n\t  var module = startModule;\n\t  var modules = [];\n\n\t  while (module && module.testsRun === 0) {\n\t    modules.push(module);\n\t    module = module.parentModule;\n\t  } // The above push modules from the child to the parent\n\t  // return a reversed order with the top being the top most parent module\n\n\n\t  return modules.reverse();\n\t}\n\n\tTest.prototype = {\n\t  // generating a stack trace can be expensive, so using a getter defers this until we need it\n\t  get stack() {\n\t    return extractStacktrace(this.errorForStack, 2);\n\t  },\n\n\t  before: function before() {\n\t    var _this = this;\n\n\t    var module = this.module;\n\t    var notStartedModules = getNotStartedModules(module); // ensure the callbacks are executed serially for each module\n\n\t    var callbackPromises = notStartedModules.reduce(function (promiseChain, startModule) {\n\t      return promiseChain.then(function () {\n\t        startModule.stats = {\n\t          all: 0,\n\t          bad: 0,\n\t          started: now()\n\t        };\n\t        emit(\"suiteStart\", startModule.suiteReport.start(true));\n\t        return runLoggingCallbacks(\"moduleStart\", {\n\t          name: startModule.name,\n\t          tests: startModule.tests\n\t        });\n\t      });\n\t    }, promisePolyfill.resolve([]));\n\t    return callbackPromises.then(function () {\n\t      config.current = _this;\n\t      _this.testEnvironment = extend({}, module.testEnvironment);\n\t      _this.started = now();\n\t      emit(\"testStart\", _this.testReport.start(true));\n\t      return runLoggingCallbacks(\"testStart\", {\n\t        name: _this.testName,\n\t        module: module.name,\n\t        testId: _this.testId,\n\t        previousFailure: _this.previousFailure\n\t      }).then(function () {\n\t        if (!config.pollution) {\n\t          saveGlobal();\n\t        }\n\t      });\n\t    });\n\t  },\n\t  run: function run() {\n\t    config.current = this;\n\t    this.callbackStarted = now();\n\n\t    if (config.notrycatch) {\n\t      runTest(this);\n\t      return;\n\t    }\n\n\t    try {\n\t      runTest(this);\n\t    } catch (e) {\n\t      this.pushFailure(\"Died on test #\" + (this.assertions.length + 1) + \" \" + this.stack + \": \" + (e.message || e), extractStacktrace(e, 0)); // Else next test will carry the responsibility\n\n\t      saveGlobal(); // Restart the tests if they're blocking\n\n\t      if (config.blocking) {\n\t        internalRecover(this);\n\t      }\n\t    }\n\n\t    function runTest(test) {\n\t      var promise = test.callback.call(test.testEnvironment, test.assert);\n\t      test.resolvePromise(promise); // If the test has a \"lock\" on it, but the timeout is 0, then we push a\n\t      // failure as the test should be synchronous.\n\n\t      if (test.timeout === 0 && test.semaphore !== 0) {\n\t        pushFailure(\"Test did not finish synchronously even though assert.timeout( 0 ) was used.\", sourceFromStacktrace(2));\n\t      }\n\t    }\n\t  },\n\t  after: function after() {\n\t    checkPollution();\n\t  },\n\t  queueHook: function queueHook(hook, hookName, hookOwner) {\n\t    var _this2 = this;\n\n\t    var callHook = function callHook() {\n\t      var promise = hook.call(_this2.testEnvironment, _this2.assert);\n\n\t      _this2.resolvePromise(promise, hookName);\n\t    };\n\n\t    var runHook = function runHook() {\n\t      if (hookName === \"before\") {\n\t        if (hookOwner.testsRun !== 0) {\n\t          return;\n\t        }\n\n\t        _this2.preserveEnvironment = true;\n\t      } // The 'after' hook should only execute when there are not tests left and\n\t      // when the 'after' and 'finish' tasks are the only tasks left to process\n\n\n\t      if (hookName === \"after\" && !lastTestWithinModuleExecuted(hookOwner) && (config.queue.length > 0 || ProcessingQueue.taskCount() > 2)) {\n\t        return;\n\t      }\n\n\t      config.current = _this2;\n\n\t      if (config.notrycatch) {\n\t        callHook();\n\t        return;\n\t      }\n\n\t      try {\n\t        callHook();\n\t      } catch (error) {\n\t        _this2.pushFailure(hookName + \" failed on \" + _this2.testName + \": \" + (error.message || error), extractStacktrace(error, 0));\n\t      }\n\t    };\n\n\t    return runHook;\n\t  },\n\t  // Currently only used for module level hooks, can be used to add global level ones\n\t  hooks: function hooks(handler) {\n\t    var hooks = [];\n\n\t    function processHooks(test, module) {\n\t      if (module.parentModule) {\n\t        processHooks(test, module.parentModule);\n\t      }\n\n\t      if (module.hooks[handler].length) {\n\t        for (var i = 0; i < module.hooks[handler].length; i++) {\n\t          hooks.push(test.queueHook(module.hooks[handler][i], handler, module));\n\t        }\n\t      }\n\t    } // Hooks are ignored on skipped tests\n\n\n\t    if (!this.skip) {\n\t      processHooks(this, this.module);\n\t    }\n\n\t    return hooks;\n\t  },\n\t  finish: function finish() {\n\t    config.current = this; // Release the test callback to ensure that anything referenced has been\n\t    // released to be garbage collected.\n\n\t    this.callback = undefined;\n\n\t    if (this.steps.length) {\n\t      var stepsList = this.steps.join(\", \");\n\t      this.pushFailure(\"Expected assert.verifySteps() to be called before end of test \" + \"after using assert.step(). Unverified steps: \".concat(stepsList), this.stack);\n\t    }\n\n\t    if (config.requireExpects && this.expected === null) {\n\t      this.pushFailure(\"Expected number of assertions to be defined, but expect() was \" + \"not called.\", this.stack);\n\t    } else if (this.expected !== null && this.expected !== this.assertions.length) {\n\t      this.pushFailure(\"Expected \" + this.expected + \" assertions, but \" + this.assertions.length + \" were run\", this.stack);\n\t    } else if (this.expected === null && !this.assertions.length) {\n\t      this.pushFailure(\"Expected at least one assertion, but none were run - call \" + \"expect(0) to accept zero assertions.\", this.stack);\n\t    }\n\n\t    var module = this.module;\n\t    var moduleName = module.name;\n\t    var testName = this.testName;\n\t    var skipped = !!this.skip;\n\t    var todo = !!this.todo;\n\t    var bad = 0;\n\t    var storage = config.storage;\n\t    this.runtime = now() - this.started;\n\t    config.stats.all += this.assertions.length;\n\t    config.stats.testCount += 1;\n\t    module.stats.all += this.assertions.length;\n\n\t    for (var i = 0; i < this.assertions.length; i++) {\n\t      if (!this.assertions[i].result) {\n\t        bad++;\n\t        config.stats.bad++;\n\t        module.stats.bad++;\n\t      }\n\t    }\n\n\t    if (skipped) {\n\t      incrementTestsIgnored(module);\n\t    } else {\n\t      incrementTestsRun(module);\n\t    } // Store result when possible\n\n\n\t    if (storage) {\n\t      if (bad) {\n\t        storage.setItem(\"qunit-test-\" + moduleName + \"-\" + testName, bad);\n\t      } else {\n\t        storage.removeItem(\"qunit-test-\" + moduleName + \"-\" + testName);\n\t      }\n\t    } // After emitting the js-reporters event we cleanup the assertion data to\n\t    // avoid leaking it. It is not used by the legacy testDone callbacks.\n\n\n\t    emit(\"testEnd\", this.testReport.end(true));\n\t    this.testReport.slimAssertions();\n\t    var test = this;\n\t    return runLoggingCallbacks(\"testDone\", {\n\t      name: testName,\n\t      module: moduleName,\n\t      skipped: skipped,\n\t      todo: todo,\n\t      failed: bad,\n\t      passed: this.assertions.length - bad,\n\t      total: this.assertions.length,\n\t      runtime: skipped ? 0 : this.runtime,\n\t      // HTML Reporter use\n\t      assertions: this.assertions,\n\t      testId: this.testId,\n\n\t      // Source of Test\n\t      // generating stack trace is expensive, so using a getter will help defer this until we need it\n\t      get source() {\n\t        return test.stack;\n\t      }\n\n\t    }).then(function () {\n\t      if (allTestsExecuted(module)) {\n\t        var completedModules = [module]; // Check if the parent modules, iteratively, are done. If that the case,\n\t        // we emit the `suiteEnd` event and trigger `moduleDone` callback.\n\n\t        var parent = module.parentModule;\n\n\t        while (parent && allTestsExecuted(parent)) {\n\t          completedModules.push(parent);\n\t          parent = parent.parentModule;\n\t        }\n\n\t        return completedModules.reduce(function (promiseChain, completedModule) {\n\t          return promiseChain.then(function () {\n\t            return logSuiteEnd(completedModule);\n\t          });\n\t        }, promisePolyfill.resolve([]));\n\t      }\n\t    }).then(function () {\n\t      config.current = undefined;\n\t    });\n\n\t    function logSuiteEnd(module) {\n\t      // Reset `module.hooks` to ensure that anything referenced in these hooks\n\t      // has been released to be garbage collected.\n\t      module.hooks = {};\n\t      emit(\"suiteEnd\", module.suiteReport.end(true));\n\t      return runLoggingCallbacks(\"moduleDone\", {\n\t        name: module.name,\n\t        tests: module.tests,\n\t        failed: module.stats.bad,\n\t        passed: module.stats.all - module.stats.bad,\n\t        total: module.stats.all,\n\t        runtime: now() - module.stats.started\n\t      });\n\t    }\n\t  },\n\t  preserveTestEnvironment: function preserveTestEnvironment() {\n\t    if (this.preserveEnvironment) {\n\t      this.module.testEnvironment = this.testEnvironment;\n\t      this.testEnvironment = extend({}, this.module.testEnvironment);\n\t    }\n\t  },\n\t  queue: function queue() {\n\t    var test = this;\n\n\t    if (!this.valid()) {\n\t      incrementTestsIgnored(this.module);\n\t      return;\n\t    }\n\n\t    function runTest() {\n\t      return [function () {\n\t        return test.before();\n\t      }].concat(_toConsumableArray(test.hooks(\"before\")), [function () {\n\t        test.preserveTestEnvironment();\n\t      }], _toConsumableArray(test.hooks(\"beforeEach\")), [function () {\n\t        test.run();\n\t      }], _toConsumableArray(test.hooks(\"afterEach\").reverse()), _toConsumableArray(test.hooks(\"after\").reverse()), [function () {\n\t        test.after();\n\t      }, function () {\n\t        return test.finish();\n\t      }]);\n\t    }\n\n\t    var previousFailCount = config.storage && +config.storage.getItem(\"qunit-test-\" + this.module.name + \"-\" + this.testName); // Prioritize previously failed tests, detected from storage\n\n\t    var prioritize = config.reorder && !!previousFailCount;\n\t    this.previousFailure = !!previousFailCount;\n\t    ProcessingQueue.add(runTest, prioritize, config.seed); // If the queue has already finished, we manually process the new test\n\n\t    if (ProcessingQueue.finished) {\n\t      ProcessingQueue.advance();\n\t    }\n\t  },\n\t  pushResult: function pushResult(resultInfo) {\n\t    if (this !== config.current) {\n\t      var message = resultInfo && resultInfo.message || \"\";\n\t      var testName = this && this.testName || \"\";\n\t      var error = \"Assertion occurred after test finished.\\n\" + \"> Test: \" + testName + \"\\n\" + \"> Message: \" + message + \"\\n\";\n\t      throw new Error(error);\n\t    } // Destructure of resultInfo = { result, actual, expected, message, negative }\n\n\n\t    var details = {\n\t      module: this.module.name,\n\t      name: this.testName,\n\t      result: resultInfo.result,\n\t      message: resultInfo.message,\n\t      actual: resultInfo.actual,\n\t      testId: this.testId,\n\t      negative: resultInfo.negative || false,\n\t      runtime: now() - this.started,\n\t      todo: !!this.todo\n\t    };\n\n\t    if (hasOwn.call(resultInfo, \"expected\")) {\n\t      details.expected = resultInfo.expected;\n\t    }\n\n\t    if (!resultInfo.result) {\n\t      var source = resultInfo.source || sourceFromStacktrace();\n\n\t      if (source) {\n\t        details.source = source;\n\t      }\n\t    }\n\n\t    this.logAssertion(details);\n\t    this.assertions.push({\n\t      result: !!resultInfo.result,\n\t      message: resultInfo.message\n\t    });\n\t  },\n\t  pushFailure: function pushFailure(message, source, actual) {\n\t    if (!(this instanceof Test)) {\n\t      throw new Error(\"pushFailure() assertion outside test context, was \" + sourceFromStacktrace(2));\n\t    }\n\n\t    this.pushResult({\n\t      result: false,\n\t      message: message || \"error\",\n\t      actual: actual || null,\n\t      source: source\n\t    });\n\t  },\n\n\t  /**\n\t   * Log assertion details using both the old QUnit.log interface and\n\t   * QUnit.on( \"assertion\" ) interface.\n\t   *\n\t   * @private\n\t   */\n\t  logAssertion: function logAssertion(details) {\n\t    runLoggingCallbacks(\"log\", details);\n\t    var assertion = {\n\t      passed: details.result,\n\t      actual: details.actual,\n\t      expected: details.expected,\n\t      message: details.message,\n\t      stack: details.source,\n\t      todo: details.todo\n\t    };\n\t    this.testReport.pushAssertion(assertion);\n\t    emit(\"assertion\", assertion);\n\t  },\n\t  resolvePromise: function resolvePromise(promise, phase) {\n\t    if (promise != null) {\n\t      var _test = this;\n\n\t      var then = promise.then;\n\n\t      if (objectType(then) === \"function\") {\n\t        var resume = internalStop(_test);\n\n\t        if (config.notrycatch) {\n\t          then.call(promise, function () {\n\t            resume();\n\t          });\n\t        } else {\n\t          then.call(promise, function () {\n\t            resume();\n\t          }, function (error) {\n\t            var message = \"Promise rejected \" + (!phase ? \"during\" : phase.replace(/Each$/, \"\")) + \" \\\"\" + _test.testName + \"\\\": \" + (error && error.message || error);\n\n\t            _test.pushFailure(message, extractStacktrace(error, 0)); // Else next test will carry the responsibility\n\n\n\t            saveGlobal(); // Unblock\n\n\t            internalRecover(_test);\n\t          });\n\t        }\n\t      }\n\t    }\n\t  },\n\t  valid: function valid() {\n\t    var filter = config.filter;\n\t    var regexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec(filter);\n\t    var module = config.module && config.module.toLowerCase();\n\t    var fullName = this.module.name + \": \" + this.testName;\n\n\t    function moduleChainNameMatch(testModule) {\n\t      var testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\n\t      if (testModuleName === module) {\n\t        return true;\n\t      } else if (testModule.parentModule) {\n\t        return moduleChainNameMatch(testModule.parentModule);\n\t      } else {\n\t        return false;\n\t      }\n\t    }\n\n\t    function moduleChainIdMatch(testModule) {\n\t      return inArray(testModule.moduleId, config.moduleId) || testModule.parentModule && moduleChainIdMatch(testModule.parentModule);\n\t    } // Internally-generated tests are always valid\n\n\n\t    if (this.callback && this.callback.validTest) {\n\t      return true;\n\t    }\n\n\t    if (config.moduleId && config.moduleId.length > 0 && !moduleChainIdMatch(this.module)) {\n\t      return false;\n\t    }\n\n\t    if (config.testId && config.testId.length > 0 && !inArray(this.testId, config.testId)) {\n\t      return false;\n\t    }\n\n\t    if (module && !moduleChainNameMatch(this.module)) {\n\t      return false;\n\t    }\n\n\t    if (!filter) {\n\t      return true;\n\t    }\n\n\t    return regexFilter ? this.regexFilter(!!regexFilter[1], regexFilter[2], regexFilter[3], fullName) : this.stringFilter(filter, fullName);\n\t  },\n\t  regexFilter: function regexFilter(exclude, pattern, flags, fullName) {\n\t    var regex = new RegExp(pattern, flags);\n\t    var match = regex.test(fullName);\n\t    return match !== exclude;\n\t  },\n\t  stringFilter: function stringFilter(filter, fullName) {\n\t    filter = filter.toLowerCase();\n\t    fullName = fullName.toLowerCase();\n\t    var include = filter.charAt(0) !== \"!\";\n\n\t    if (!include) {\n\t      filter = filter.slice(1);\n\t    } // If the filter matches, we need to honour include\n\n\n\t    if (fullName.indexOf(filter) !== -1) {\n\t      return include;\n\t    } // Otherwise, do the opposite\n\n\n\t    return !include;\n\t  }\n\t};\n\tfunction pushFailure() {\n\t  if (!config.current) {\n\t    throw new Error(\"pushFailure() assertion outside test context, in \" + sourceFromStacktrace(2));\n\t  } // Gets current test obj\n\n\n\t  var currentTest = config.current;\n\t  return currentTest.pushFailure.apply(currentTest, arguments);\n\t}\n\n\tfunction saveGlobal() {\n\t  config.pollution = [];\n\n\t  if (config.noglobals) {\n\t    for (var key in global__default['default']) {\n\t      if (hasOwn.call(global__default['default'], key)) {\n\t        // In Opera sometimes DOM element ids show up here, ignore them\n\t        if (/^qunit-test-output/.test(key)) {\n\t          continue;\n\t        }\n\n\t        config.pollution.push(key);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction checkPollution() {\n\t  var old = config.pollution;\n\t  saveGlobal();\n\t  var newGlobals = diff(config.pollution, old);\n\n\t  if (newGlobals.length > 0) {\n\t    pushFailure(\"Introduced global variable(s): \" + newGlobals.join(\", \"));\n\t  }\n\n\t  var deletedGlobals = diff(old, config.pollution);\n\n\t  if (deletedGlobals.length > 0) {\n\t    pushFailure(\"Deleted global variable(s): \" + deletedGlobals.join(\", \"));\n\t  }\n\t}\n\n\tvar focused$1 = false; // indicates that the \"only\" filter was used\n\t// Will be exposed as QUnit.test\n\n\tfunction test(testName, callback) {\n\t  if (focused$1 || config.currentModule.ignored) {\n\t    return;\n\t  }\n\n\t  var newTest = new Test({\n\t    testName: testName,\n\t    callback: callback\n\t  });\n\t  newTest.queue();\n\t}\n\textend(test, {\n\t  todo: function todo(testName, callback) {\n\t    if (focused$1 || config.currentModule.ignored) {\n\t      return;\n\t    }\n\n\t    var newTest = new Test({\n\t      testName: testName,\n\t      callback: callback,\n\t      todo: true\n\t    });\n\t    newTest.queue();\n\t  },\n\t  skip: function skip(testName) {\n\t    if (focused$1 || config.currentModule.ignored) {\n\t      return;\n\t    }\n\n\t    var test = new Test({\n\t      testName: testName,\n\t      skip: true\n\t    });\n\t    test.queue();\n\t  },\n\t  only: function only(testName, callback) {\n\t    if (config.currentModule.ignored) {\n\t      return;\n\t    }\n\n\t    if (!focused$1) {\n\t      config.queue.length = 0;\n\t      focused$1 = true;\n\t    }\n\n\t    var newTest = new Test({\n\t      testName: testName,\n\t      callback: callback\n\t    });\n\t    newTest.queue();\n\t  }\n\t}); // Resets config.timeout with a new timeout duration.\n\n\tfunction resetTestTimeout(timeoutDuration) {\n\t  clearTimeout(config.timeout);\n\t  config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);\n\t} // Put a hold on processing and return a function that will release it.\n\n\tfunction internalStop(test) {\n\t  var released = false;\n\t  test.semaphore += 1;\n\t  config.blocking = true; // Set a recovery timeout, if so configured.\n\n\t  if (setTimeout$1) {\n\t    var timeoutDuration;\n\n\t    if (typeof test.timeout === \"number\") {\n\t      timeoutDuration = test.timeout;\n\t    } else if (typeof config.testTimeout === \"number\") {\n\t      timeoutDuration = config.testTimeout;\n\t    }\n\n\t    if (typeof timeoutDuration === \"number\" && timeoutDuration > 0) {\n\t      config.timeoutHandler = function (timeout) {\n\t        return function () {\n\t          config.timeout = null;\n\t          pushFailure(\"Test took longer than \".concat(timeout, \"ms; test timed out.\"), sourceFromStacktrace(2));\n\t          released = true;\n\t          internalRecover(test);\n\t        };\n\t      };\n\n\t      clearTimeout(config.timeout);\n\t      config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);\n\t    }\n\t  }\n\n\t  return function resume() {\n\t    if (released) {\n\t      return;\n\t    }\n\n\t    released = true;\n\t    test.semaphore -= 1;\n\t    internalStart(test);\n\t  };\n\t} // Forcefully release all processing holds.\n\n\tfunction internalRecover(test) {\n\t  test.semaphore = 0;\n\t  internalStart(test);\n\t} // Release a processing hold, scheduling a resumption attempt if no holds remain.\n\n\n\tfunction internalStart(test) {\n\t  // If semaphore is non-numeric, throw error\n\t  if (isNaN(test.semaphore)) {\n\t    test.semaphore = 0;\n\t    pushFailure(\"Invalid value on test.semaphore\", sourceFromStacktrace(2));\n\t    return;\n\t  } // Don't start until equal number of stop-calls\n\n\n\t  if (test.semaphore > 0) {\n\t    return;\n\t  } // Throw an Error if start is called more often than stop\n\n\n\t  if (test.semaphore < 0) {\n\t    test.semaphore = 0;\n\t    pushFailure(\"Tried to restart test while already started (test's semaphore was 0 already)\", sourceFromStacktrace(2));\n\t    return;\n\t  } // Add a slight delay to allow more assertions etc.\n\n\n\t  if (setTimeout$1) {\n\t    clearTimeout(config.timeout);\n\t    config.timeout = setTimeout$1(function () {\n\t      if (test.semaphore > 0) {\n\t        return;\n\t      }\n\n\t      clearTimeout(config.timeout);\n\t      config.timeout = null;\n\t      begin();\n\t    });\n\t  } else {\n\t    begin();\n\t  }\n\t}\n\n\tfunction collectTests(module) {\n\t  var tests = [].concat(module.tests);\n\n\t  var modules = _toConsumableArray(module.childModules); // Do a breadth-first traversal of the child modules\n\n\n\t  while (modules.length) {\n\t    var nextModule = modules.shift();\n\t    tests.push.apply(tests, nextModule.tests);\n\t    modules.push.apply(modules, _toConsumableArray(nextModule.childModules));\n\t  }\n\n\t  return tests;\n\t} // This returns true after all executable and skippable tests\n\t// in a module have been proccessed, and informs 'suiteEnd'\n\t// and moduleDone().\n\n\n\tfunction allTestsExecuted(module) {\n\t  return module.testsRun + module.testsIgnored === collectTests(module).length;\n\t} // This returns true during the last executable non-skipped test\n\t// within a module, and informs the running of the 'after' hook\n\t// for a given module. This runs only once for a given module,\n\t// but must run during the last non-skipped test. When it runs,\n\t// there may be non-zero skipped tests left.\n\n\n\tfunction lastTestWithinModuleExecuted(module) {\n\t  return module.testsRun === collectTests(module).filter(function (test) {\n\t    return !test.skip;\n\t  }).length - 1;\n\t}\n\n\tfunction incrementTestsRun(module) {\n\t  module.testsRun++;\n\n\t  while (module = module.parentModule) {\n\t    module.testsRun++;\n\t  }\n\t}\n\n\tfunction incrementTestsIgnored(module) {\n\t  module.testsIgnored++;\n\n\t  while (module = module.parentModule) {\n\t    module.testsIgnored++;\n\t  }\n\t}\n\n\tvar Assert = /*#__PURE__*/function () {\n\t  function Assert(testContext) {\n\t    _classCallCheck(this, Assert);\n\n\t    this.test = testContext;\n\t  } // Assert helpers\n\n\n\t  _createClass(Assert, [{\n\t    key: \"timeout\",\n\t    value: function timeout(duration) {\n\t      if (typeof duration !== \"number\") {\n\t        throw new Error(\"You must pass a number as the duration to assert.timeout\");\n\t      }\n\n\t      this.test.timeout = duration; // If a timeout has been set, clear it and reset with the new duration\n\n\t      if (config.timeout) {\n\t        clearTimeout(config.timeout);\n\t        config.timeout = null;\n\n\t        if (config.timeoutHandler && this.test.timeout > 0) {\n\t          resetTestTimeout(this.test.timeout);\n\t        }\n\t      }\n\t    } // Documents a \"step\", which is a string value, in a test as a passing assertion\n\n\t  }, {\n\t    key: \"step\",\n\t    value: function step(message) {\n\t      var assertionMessage = message;\n\t      var result = !!message;\n\t      this.test.steps.push(message);\n\n\t      if (objectType(message) === \"undefined\" || message === \"\") {\n\t        assertionMessage = \"You must provide a message to assert.step\";\n\t      } else if (objectType(message) !== \"string\") {\n\t        assertionMessage = \"You must provide a string value to assert.step\";\n\t        result = false;\n\t      }\n\n\t      this.pushResult({\n\t        result: result,\n\t        message: assertionMessage\n\t      });\n\t    } // Verifies the steps in a test match a given array of string values\n\n\t  }, {\n\t    key: \"verifySteps\",\n\t    value: function verifySteps(steps, message) {\n\t      // Since the steps array is just string values, we can clone with slice\n\t      var actualStepsClone = this.test.steps.slice();\n\t      this.deepEqual(actualStepsClone, steps, message);\n\t      this.test.steps.length = 0;\n\t    } // Specify the number of expected assertions to guarantee that failed test\n\t    // (no assertions are run at all) don't slip through.\n\n\t  }, {\n\t    key: \"expect\",\n\t    value: function expect(asserts) {\n\t      if (arguments.length === 1) {\n\t        this.test.expected = asserts;\n\t      } else {\n\t        return this.test.expected;\n\t      }\n\t    } // Put a hold on processing and return a function that will release it a maximum of once.\n\n\t  }, {\n\t    key: \"async\",\n\t    value: function async(count) {\n\t      var test = this.test;\n\t      var popped = false,\n\t          acceptCallCount = count;\n\n\t      if (typeof acceptCallCount === \"undefined\") {\n\t        acceptCallCount = 1;\n\t      }\n\n\t      var resume = internalStop(test);\n\t      return function done() {\n\t        if (config.current !== test) {\n\t          throw Error(\"assert.async callback called after test finished.\");\n\t        }\n\n\t        if (popped) {\n\t          test.pushFailure(\"Too many calls to the `assert.async` callback\", sourceFromStacktrace(2));\n\t          return;\n\t        }\n\n\t        acceptCallCount -= 1;\n\n\t        if (acceptCallCount > 0) {\n\t          return;\n\t        }\n\n\t        popped = true;\n\t        resume();\n\t      };\n\t    } // Exports test.push() to the user API\n\t    // Alias of pushResult.\n\n\t  }, {\n\t    key: \"push\",\n\t    value: function push(result, actual, expected, message, negative) {\n\t      Logger.warn(\"assert.push is deprecated and will be removed in QUnit 3.0.\" + \" Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).\");\n\t      var currentAssert = this instanceof Assert ? this : config.current.assert;\n\t      return currentAssert.pushResult({\n\t        result: result,\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message,\n\t        negative: negative\n\t      });\n\t    }\n\t  }, {\n\t    key: \"pushResult\",\n\t    value: function pushResult(resultInfo) {\n\t      // Destructure of resultInfo = { result, actual, expected, message, negative }\n\t      var assert = this;\n\t      var currentTest = assert instanceof Assert && assert.test || config.current; // Backwards compatibility fix.\n\t      // Allows the direct use of global exported assertions and QUnit.assert.*\n\t      // Although, it's use is not recommended as it can leak assertions\n\t      // to other tests from async tests, because we only get a reference to the current test,\n\t      // not exactly the test where assertion were intended to be called.\n\n\t      if (!currentTest) {\n\t        throw new Error(\"assertion outside test context, in \" + sourceFromStacktrace(2));\n\t      }\n\n\t      if (!(assert instanceof Assert)) {\n\t        assert = currentTest.assert;\n\t      }\n\n\t      return assert.test.pushResult(resultInfo);\n\t    }\n\t  }, {\n\t    key: \"ok\",\n\t    value: function ok(result, message) {\n\t      if (!message) {\n\t        message = result ? \"okay\" : \"failed, expected argument to be truthy, was: \".concat(dump.parse(result));\n\t      }\n\n\t      this.pushResult({\n\t        result: !!result,\n\t        actual: result,\n\t        expected: true,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"notOk\",\n\t    value: function notOk(result, message) {\n\t      if (!message) {\n\t        message = !result ? \"okay\" : \"failed, expected argument to be falsy, was: \".concat(dump.parse(result));\n\t      }\n\n\t      this.pushResult({\n\t        result: !result,\n\t        actual: result,\n\t        expected: false,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"true\",\n\t    value: function _true(result, message) {\n\t      this.pushResult({\n\t        result: result === true,\n\t        actual: result,\n\t        expected: true,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"false\",\n\t    value: function _false(result, message) {\n\t      this.pushResult({\n\t        result: result === false,\n\t        actual: result,\n\t        expected: false,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"equal\",\n\t    value: function equal(actual, expected, message) {\n\t      // eslint-disable-next-line eqeqeq\n\t      var result = expected == actual;\n\t      this.pushResult({\n\t        result: result,\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"notEqual\",\n\t    value: function notEqual(actual, expected, message) {\n\t      // eslint-disable-next-line eqeqeq\n\t      var result = expected != actual;\n\t      this.pushResult({\n\t        result: result,\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message,\n\t        negative: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"propEqual\",\n\t    value: function propEqual(actual, expected, message) {\n\t      actual = objectValues(actual);\n\t      expected = objectValues(expected);\n\t      this.pushResult({\n\t        result: equiv(actual, expected),\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"notPropEqual\",\n\t    value: function notPropEqual(actual, expected, message) {\n\t      actual = objectValues(actual);\n\t      expected = objectValues(expected);\n\t      this.pushResult({\n\t        result: !equiv(actual, expected),\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message,\n\t        negative: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"deepEqual\",\n\t    value: function deepEqual(actual, expected, message) {\n\t      this.pushResult({\n\t        result: equiv(actual, expected),\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"notDeepEqual\",\n\t    value: function notDeepEqual(actual, expected, message) {\n\t      this.pushResult({\n\t        result: !equiv(actual, expected),\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message,\n\t        negative: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"strictEqual\",\n\t    value: function strictEqual(actual, expected, message) {\n\t      this.pushResult({\n\t        result: expected === actual,\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"notStrictEqual\",\n\t    value: function notStrictEqual(actual, expected, message) {\n\t      this.pushResult({\n\t        result: expected !== actual,\n\t        actual: actual,\n\t        expected: expected,\n\t        message: message,\n\t        negative: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"throws\",\n\t    value: function throws(block, expected, message) {\n\t      var actual,\n\t          result = false;\n\t      var currentTest = this instanceof Assert && this.test || config.current; // 'expected' is optional unless doing string comparison\n\n\t      if (objectType(expected) === \"string\") {\n\t        if (message == null) {\n\t          message = expected;\n\t          expected = null;\n\t        } else {\n\t          throw new Error(\"throws/raises does not accept a string value for the expected argument.\\n\" + \"Use a non-string object value (e.g. regExp) instead if it's necessary.\");\n\t        }\n\t      }\n\n\t      currentTest.ignoreGlobalErrors = true;\n\n\t      try {\n\t        block.call(currentTest.testEnvironment);\n\t      } catch (e) {\n\t        actual = e;\n\t      }\n\n\t      currentTest.ignoreGlobalErrors = false;\n\n\t      if (actual) {\n\t        var expectedType = objectType(expected); // We don't want to validate thrown error\n\n\t        if (!expected) {\n\t          result = true; // Expected is a regexp\n\t        } else if (expectedType === \"regexp\") {\n\t          result = expected.test(errorString(actual)); // Log the string form of the regexp\n\n\t          expected = String(expected); // Expected is a constructor, maybe an Error constructor.\n\t          // Note the extra check on its prototype - this is an implicit\n\t          // requirement of \"instanceof\", else it will throw a TypeError.\n\t        } else if (expectedType === \"function\" && expected.prototype !== undefined && actual instanceof expected) {\n\t          result = true; // Expected is an Error object\n\t        } else if (expectedType === \"object\") {\n\t          result = actual instanceof expected.constructor && actual.name === expected.name && actual.message === expected.message; // Log the string form of the Error object\n\n\t          expected = errorString(expected); // Expected is a validation function which returns true if validation passed\n\t        } else if (expectedType === \"function\" && expected.call({}, actual) === true) {\n\t          expected = null;\n\t          result = true;\n\t        }\n\t      }\n\n\t      currentTest.assert.pushResult({\n\t        result: result,\n\t        // undefined if it didn't throw\n\t        actual: actual && errorString(actual),\n\t        expected: expected,\n\t        message: message\n\t      });\n\t    }\n\t  }, {\n\t    key: \"rejects\",\n\t    value: function rejects(promise, expected, message) {\n\t      var result = false;\n\t      var currentTest = this instanceof Assert && this.test || config.current; // 'expected' is optional unless doing string comparison\n\n\t      if (objectType(expected) === \"string\") {\n\t        if (message === undefined) {\n\t          message = expected;\n\t          expected = undefined;\n\t        } else {\n\t          message = \"assert.rejects does not accept a string value for the expected \" + \"argument.\\nUse a non-string object value (e.g. validator function) instead \" + \"if necessary.\";\n\t          currentTest.assert.pushResult({\n\t            result: false,\n\t            message: message\n\t          });\n\t          return;\n\t        }\n\t      }\n\n\t      var then = promise && promise.then;\n\n\t      if (objectType(then) !== \"function\") {\n\t        var _message = \"The value provided to `assert.rejects` in \" + \"\\\"\" + currentTest.testName + \"\\\" was not a promise.\";\n\n\t        currentTest.assert.pushResult({\n\t          result: false,\n\t          message: _message,\n\t          actual: promise\n\t        });\n\t        return;\n\t      }\n\n\t      var done = this.async();\n\t      return then.call(promise, function handleFulfillment() {\n\t        var message = \"The promise returned by the `assert.rejects` callback in \" + \"\\\"\" + currentTest.testName + \"\\\" did not reject.\";\n\t        currentTest.assert.pushResult({\n\t          result: false,\n\t          message: message,\n\t          actual: promise\n\t        });\n\t        done();\n\t      }, function handleRejection(actual) {\n\t        var expectedType = objectType(expected); // We don't want to validate\n\n\t        if (expected === undefined) {\n\t          result = true; // Expected is a regexp\n\t        } else if (expectedType === \"regexp\") {\n\t          result = expected.test(errorString(actual)); // Log the string form of the regexp\n\n\t          expected = String(expected); // Expected is a constructor, maybe an Error constructor\n\t        } else if (expectedType === \"function\" && actual instanceof expected) {\n\t          result = true; // Expected is an Error object\n\t        } else if (expectedType === \"object\") {\n\t          result = actual instanceof expected.constructor && actual.name === expected.name && actual.message === expected.message; // Log the string form of the Error object\n\n\t          expected = errorString(expected); // Expected is a validation function which returns true if validation passed\n\t        } else {\n\t          if (expectedType === \"function\") {\n\t            result = expected.call({}, actual) === true;\n\t            expected = null; // Expected is some other invalid type\n\t          } else {\n\t            result = false;\n\t            message = \"invalid expected value provided to `assert.rejects` \" + \"callback in \\\"\" + currentTest.testName + \"\\\": \" + expectedType + \".\";\n\t          }\n\t        }\n\n\t        currentTest.assert.pushResult({\n\t          result: result,\n\t          // leave rejection value of undefined as-is\n\t          actual: actual && errorString(actual),\n\t          expected: expected,\n\t          message: message\n\t        });\n\t        done();\n\t      });\n\t    }\n\t  }]);\n\n\t  return Assert;\n\t}(); // Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n\t// Known to us are: Closure Compiler, Narwhal\n\t// eslint-disable-next-line dot-notation\n\n\n\tAssert.prototype.raises = Assert.prototype[\"throws\"];\n\t/**\n\t * Converts an error into a simple string for comparisons.\n\t *\n\t * @param {Error|Object} error\n\t * @return {string}\n\t */\n\n\tfunction errorString(error) {\n\t  var resultErrorString = error.toString(); // If the error wasn't a subclass of Error but something like\n\t  // an object literal with name and message properties...\n\n\t  if (resultErrorString.slice(0, 7) === \"[object\") {\n\t    // Based on https://es5.github.com/#x15.11.4.4\n\t    var name = error.name ? String(error.name) : \"Error\";\n\t    return error.message ? \"\".concat(name, \": \").concat(error.message) : name;\n\t  } else {\n\t    return resultErrorString;\n\t  }\n\t}\n\n\t/* global module, exports, define */\n\tfunction exportQUnit(QUnit) {\n\t  var exportedModule = false;\n\n\t  if (window$1 && document) {\n\t    // QUnit may be defined when it is preconfigured but then only QUnit and QUnit.config may be defined.\n\t    if (window$1.QUnit && window$1.QUnit.version) {\n\t      throw new Error(\"QUnit has already been defined.\");\n\t    }\n\n\t    window$1.QUnit = QUnit;\n\t    exportedModule = true;\n\t  } // For Node.js\n\n\n\t  if (typeof module !== \"undefined\" && module && module.exports) {\n\t    module.exports = QUnit; // For consistency with CommonJS environments' exports\n\n\t    module.exports.QUnit = QUnit;\n\t    exportedModule = true;\n\t  } // For CommonJS with exports, but without module.exports, like Rhino\n\n\n\t  if (typeof exports !== \"undefined\" && exports) {\n\t    exports.QUnit = QUnit;\n\t    exportedModule = true;\n\t  } // For AMD\n\n\n\t  if (typeof define === \"function\" && define.amd) {\n\t    define(function () {\n\t      return QUnit;\n\t    });\n\t    QUnit.config.autostart = false;\n\t    exportedModule = true;\n\t  } // For Web/Service Workers\n\n\n\t  if (self$1 && self$1.WorkerGlobalScope && self$1 instanceof self$1.WorkerGlobalScope) {\n\t    self$1.QUnit = QUnit;\n\t    exportedModule = true;\n\t  } // For other environments, such as SpiderMonkey (mozjs) and other\n\t  // embedded JavaScript engines\n\n\n\t  if (!exportedModule) {\n\t    global__default['default'].QUnit = QUnit;\n\t  }\n\t}\n\n\t// error handling should be suppressed and false otherwise.\n\t// In this case, we will only suppress further error handling if the\n\t// \"ignoreGlobalErrors\" configuration option is enabled.\n\n\tfunction onError(error) {\n\t  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (config.current) {\n\t    if (config.current.ignoreGlobalErrors) {\n\t      return true;\n\t    }\n\n\t    pushFailure.apply(void 0, [error.message, error.stacktrace || error.fileName + \":\" + error.lineNumber].concat(args));\n\t  } else {\n\t    test(\"global failure\", extend(function () {\n\t      pushFailure.apply(void 0, [error.message, error.stacktrace || error.fileName + \":\" + error.lineNumber].concat(args));\n\t    }, {\n\t      validTest: true\n\t    }));\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction onUnhandledRejection(reason) {\n\t  var resultInfo = {\n\t    result: false,\n\t    message: reason.message || \"error\",\n\t    actual: reason,\n\t    source: reason.stack || sourceFromStacktrace(3)\n\t  };\n\t  var currentTest = config.current;\n\n\t  if (currentTest) {\n\t    currentTest.assert.pushResult(resultInfo);\n\t  } else {\n\t    test(\"global failure\", extend(function (assert) {\n\t      assert.pushResult(resultInfo);\n\t    }, {\n\t      validTest: true\n\t    }));\n\t  }\n\t}\n\n\tvar QUnit = {};\n\tvar globalSuite = new SuiteReport(); // The initial \"currentModule\" represents the global (or top-level) module that\n\t// is not explicitly defined by the user, therefore we add the \"globalSuite\" to\n\t// it since each module has a suiteReport associated with it.\n\n\tconfig.currentModule.suiteReport = globalSuite;\n\tvar globalStartCalled = false;\n\tvar runStarted = false; // Figure out if we're running the tests from a server or not\n\n\tQUnit.isLocal = window$1 && window$1.location && window$1.location.protocol === \"file:\"; // Expose the current QUnit version\n\n\tQUnit.version = \"2.14.0\";\n\n\textend(QUnit, {\n\t  config: config,\n\t  dump: dump,\n\t  equiv: equiv,\n\t  is: is,\n\t  objectType: objectType,\n\t  on: on,\n\t  onError: onError,\n\t  onUnhandledRejection: onUnhandledRejection,\n\t  pushFailure: pushFailure,\n\t  assert: Assert.prototype,\n\t  module: module$1,\n\t  test: test,\n\t  // alias other test flavors for easy access\n\t  todo: test.todo,\n\t  skip: test.skip,\n\t  only: test.only,\n\t  start: function start(count) {\n\t    if (config.current) {\n\t      throw new Error(\"QUnit.start cannot be called inside a test context.\");\n\t    }\n\n\t    var globalStartAlreadyCalled = globalStartCalled;\n\t    globalStartCalled = true;\n\n\t    if (runStarted) {\n\t      throw new Error(\"Called start() while test already started running\");\n\t    }\n\n\t    if (globalStartAlreadyCalled || count > 1) {\n\t      throw new Error(\"Called start() outside of a test context too many times\");\n\t    }\n\n\t    if (config.autostart) {\n\t      throw new Error(\"Called start() outside of a test context when \" + \"QUnit.config.autostart was true\");\n\t    }\n\n\t    if (!config.pageLoaded) {\n\t      // The page isn't completely loaded yet, so we set autostart and then\n\t      // load if we're in Node or wait for the browser's load event.\n\t      config.autostart = true; // Starts from Node even if .load was not previously called. We still return\n\t      // early otherwise we'll wind up \"beginning\" twice.\n\n\t      if (!document) {\n\t        QUnit.load();\n\t      }\n\n\t      return;\n\t    }\n\n\t    scheduleBegin();\n\t  },\n\t  extend: function extend$1() {\n\t    Logger.warn(\"QUnit.extend is deprecated and will be removed in QUnit 3.0.\" + \" Please use Object.assign instead.\"); // delegate to utility implementation, which does not warn and can be used elsewhere internally\n\n\t    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    return extend.apply(this, args);\n\t  },\n\t  load: function load() {\n\t    config.pageLoaded = true; // Initialize the configuration options\n\n\t    extend(config, {\n\t      stats: {\n\t        all: 0,\n\t        bad: 0,\n\t        testCount: 0\n\t      },\n\t      started: 0,\n\t      updateRate: 1000,\n\t      autostart: true,\n\t      filter: \"\"\n\t    }, true);\n\n\t    if (!runStarted) {\n\t      config.blocking = false;\n\n\t      if (config.autostart) {\n\t        scheduleBegin();\n\t      }\n\t    }\n\t  },\n\t  stack: function stack(offset) {\n\t    offset = (offset || 0) + 2;\n\t    return sourceFromStacktrace(offset);\n\t  }\n\t});\n\n\tregisterLoggingCallbacks(QUnit);\n\n\tfunction scheduleBegin() {\n\t  runStarted = true; // Add a slight delay to allow definition of more modules and tests.\n\n\t  if (setTimeout$1) {\n\t    setTimeout$1(function () {\n\t      begin();\n\t    });\n\t  } else {\n\t    begin();\n\t  }\n\t}\n\n\tfunction unblockAndAdvanceQueue() {\n\t  config.blocking = false;\n\t  ProcessingQueue.advance();\n\t}\n\n\tfunction begin() {\n\t  if (config.started) {\n\t    unblockAndAdvanceQueue();\n\t    return;\n\t  } // The test run hasn't officially begun yet\n\t  // Record the time of the test run's beginning\n\n\n\t  config.started = now(); // Delete the loose unnamed module if unused.\n\n\t  if (config.modules[0].name === \"\" && config.modules[0].tests.length === 0) {\n\t    config.modules.shift();\n\t  } // Avoid unnecessary information by not logging modules' test environments\n\n\n\t  var l = config.modules.length;\n\t  var modulesLog = [];\n\n\t  for (var i = 0; i < l; i++) {\n\t    modulesLog.push({\n\t      name: config.modules[i].name,\n\t      tests: config.modules[i].tests\n\t    });\n\t  } // The test run is officially beginning now\n\n\n\t  emit(\"runStart\", globalSuite.start(true));\n\t  runLoggingCallbacks(\"begin\", {\n\t    totalTests: Test.count,\n\t    modules: modulesLog\n\t  }).then(unblockAndAdvanceQueue);\n\t}\n\texportQUnit(QUnit);\n\n\t(function () {\n\t  if (!window$1 || !document) {\n\t    return;\n\t  }\n\n\t  var config = QUnit.config,\n\t      hasOwn = Object.prototype.hasOwnProperty; // Stores fixture HTML for resetting later\n\n\t  function storeFixture() {\n\t    // Avoid overwriting user-defined values\n\t    if (hasOwn.call(config, \"fixture\")) {\n\t      return;\n\t    }\n\n\t    var fixture = document.getElementById(\"qunit-fixture\");\n\n\t    if (fixture) {\n\t      config.fixture = fixture.cloneNode(true);\n\t    }\n\t  }\n\n\t  QUnit.begin(storeFixture); // Resets the fixture DOM element if available.\n\n\t  function resetFixture() {\n\t    if (config.fixture == null) {\n\t      return;\n\t    }\n\n\t    var fixture = document.getElementById(\"qunit-fixture\");\n\n\t    var resetFixtureType = _typeof(config.fixture);\n\n\t    if (resetFixtureType === \"string\") {\n\t      // support user defined values for `config.fixture`\n\t      var newFixture = document.createElement(\"div\");\n\t      newFixture.setAttribute(\"id\", \"qunit-fixture\");\n\t      newFixture.innerHTML = config.fixture;\n\t      fixture.parentNode.replaceChild(newFixture, fixture);\n\t    } else {\n\t      var clonedFixture = config.fixture.cloneNode(true);\n\t      fixture.parentNode.replaceChild(clonedFixture, fixture);\n\t    }\n\t  }\n\n\t  QUnit.testStart(resetFixture);\n\t})();\n\n\t(function () {\n\t  // Only interact with URLs via window.location\n\t  var location = typeof window$1 !== \"undefined\" && window$1.location;\n\n\t  if (!location) {\n\t    return;\n\t  }\n\n\t  var urlParams = getUrlParams();\n\t  QUnit.urlParams = urlParams; // Match module/test by inclusion in an array\n\n\t  QUnit.config.moduleId = [].concat(urlParams.moduleId || []);\n\t  QUnit.config.testId = [].concat(urlParams.testId || []); // Exact case-insensitive match of the module name\n\n\t  QUnit.config.module = urlParams.module; // Regular expression or case-insenstive substring match against \"moduleName: testName\"\n\n\t  QUnit.config.filter = urlParams.filter; // Test order randomization\n\n\t  if (urlParams.seed === true) {\n\t    // Generate a random seed if the option is specified without a value\n\t    QUnit.config.seed = Math.random().toString(36).slice(2);\n\t  } else if (urlParams.seed) {\n\t    QUnit.config.seed = urlParams.seed;\n\t  } // Add URL-parameter-mapped config values with UI form rendering data\n\n\n\t  QUnit.config.urlConfig.push({\n\t    id: \"hidepassed\",\n\t    label: \"Hide passed tests\",\n\t    tooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t  }, {\n\t    id: \"noglobals\",\n\t    label: \"Check for Globals\",\n\t    tooltip: \"Enabling this will test if any test introduces new properties on the \" + \"global object (`window` in Browsers). Stored as query-strings.\"\n\t  }, {\n\t    id: \"notrycatch\",\n\t    label: \"No try-catch\",\n\t    tooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" + \"exceptions in IE reasonable. Stored as query-strings.\"\n\t  });\n\t  QUnit.begin(function () {\n\t    var i,\n\t        option,\n\t        urlConfig = QUnit.config.urlConfig;\n\n\t    for (i = 0; i < urlConfig.length; i++) {\n\t      // Options can be either strings or objects with nonempty \"id\" properties\n\t      option = QUnit.config.urlConfig[i];\n\n\t      if (typeof option !== \"string\") {\n\t        option = option.id;\n\t      }\n\n\t      if (QUnit.config[option] === undefined) {\n\t        QUnit.config[option] = urlParams[option];\n\t      }\n\t    }\n\t  });\n\n\t  function getUrlParams() {\n\t    var i, param, name, value;\n\t    var urlParams = Object.create(null);\n\t    var params = location.search.slice(1).split(\"&\");\n\t    var length = params.length;\n\n\t    for (i = 0; i < length; i++) {\n\t      if (params[i]) {\n\t        param = params[i].split(\"=\");\n\t        name = decodeQueryParam(param[0]); // Allow just a key to turn on a flag, e.g., test.html?noglobals\n\n\t        value = param.length === 1 || decodeQueryParam(param.slice(1).join(\"=\"));\n\n\t        if (name in urlParams) {\n\t          urlParams[name] = [].concat(urlParams[name], value);\n\t        } else {\n\t          urlParams[name] = value;\n\t        }\n\t      }\n\t    }\n\n\t    return urlParams;\n\t  }\n\n\t  function decodeQueryParam(param) {\n\t    return decodeURIComponent(param.replace(/\\+/g, \"%20\"));\n\t  }\n\t})();\n\n\tvar fuzzysort = createCommonjsModule(function (module) {\n\n\t  (function (root, UMD) {\n\t    if ( module.exports) module.exports = UMD();else root.fuzzysort = UMD();\n\t  })(commonjsGlobal, function UMD() {\n\t    function fuzzysortNew(instanceOptions) {\n\t      var fuzzysort = {\n\t        single: function (search, target, options) {\n\t          if (!search) return null;\n\t          if (!isObj(search)) search = fuzzysort.getPreparedSearch(search);\n\t          if (!target) return null;\n\t          if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t          var allowTypo = options && options.allowTypo !== undefined ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== undefined ? instanceOptions.allowTypo : true;\n\t          var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;\n\t          return algorithm(search, target, search[0]); // var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991\n\t          // var result = algorithm(search, target, search[0])\n\t          // if(result === null) return null\n\t          // if(result.score < threshold) return null\n\t          // return result\n\t        },\n\t        go: function (search, targets, options) {\n\t          if (!search) return noResults;\n\t          search = fuzzysort.prepareSearch(search);\n\t          var searchLowerCode = search[0];\n\t          var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;\n\t          var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;\n\t          var allowTypo = options && options.allowTypo !== undefined ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== undefined ? instanceOptions.allowTypo : true;\n\t          var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;\n\t          var resultsLen = 0;\n\t          var limitedCount = 0;\n\t          var targetsLen = targets.length; // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]\n\t          // options.keys\n\n\t          if (options && options.keys) {\n\t            var scoreFn = options.scoreFn || defaultScoreFn;\n\t            var keys = options.keys;\n\t            var keysLen = keys.length;\n\n\t            for (var i = targetsLen - 1; i >= 0; --i) {\n\t              var obj = targets[i];\n\t              var objResults = new Array(keysLen);\n\n\t              for (var keyI = keysLen - 1; keyI >= 0; --keyI) {\n\t                var key = keys[keyI];\n\t                var target = getValue(obj, key);\n\n\t                if (!target) {\n\t                  objResults[keyI] = null;\n\t                  continue;\n\t                }\n\n\t                if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t                objResults[keyI] = algorithm(search, target, searchLowerCode);\n\t              }\n\n\t              objResults.obj = obj; // before scoreFn so scoreFn can use it\n\n\t              var score = scoreFn(objResults);\n\t              if (score === null) continue;\n\t              if (score < threshold) continue;\n\t              objResults.score = score;\n\n\t              if (resultsLen < limit) {\n\t                q.add(objResults);\n\t                ++resultsLen;\n\t              } else {\n\t                ++limitedCount;\n\t                if (score > q.peek().score) q.replaceTop(objResults);\n\t              }\n\t            } // options.key\n\n\t          } else if (options && options.key) {\n\t            var key = options.key;\n\n\t            for (var i = targetsLen - 1; i >= 0; --i) {\n\t              var obj = targets[i];\n\t              var target = getValue(obj, key);\n\t              if (!target) continue;\n\t              if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t              var result = algorithm(search, target, searchLowerCode);\n\t              if (result === null) continue;\n\t              if (result.score < threshold) continue; // have to clone result so duplicate targets from different obj can each reference the correct obj\n\n\t              result = {\n\t                target: result.target,\n\t                _targetLowerCodes: null,\n\t                _nextBeginningIndexes: null,\n\t                score: result.score,\n\t                indexes: result.indexes,\n\t                obj: obj\n\t              }; // hidden\n\n\t              if (resultsLen < limit) {\n\t                q.add(result);\n\t                ++resultsLen;\n\t              } else {\n\t                ++limitedCount;\n\t                if (result.score > q.peek().score) q.replaceTop(result);\n\t              }\n\t            } // no keys\n\n\t          } else {\n\t            for (var i = targetsLen - 1; i >= 0; --i) {\n\t              var target = targets[i];\n\t              if (!target) continue;\n\t              if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t              var result = algorithm(search, target, searchLowerCode);\n\t              if (result === null) continue;\n\t              if (result.score < threshold) continue;\n\n\t              if (resultsLen < limit) {\n\t                q.add(result);\n\t                ++resultsLen;\n\t              } else {\n\t                ++limitedCount;\n\t                if (result.score > q.peek().score) q.replaceTop(result);\n\t              }\n\t            }\n\t          }\n\n\t          if (resultsLen === 0) return noResults;\n\t          var results = new Array(resultsLen);\n\n\t          for (var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll();\n\n\t          results.total = resultsLen + limitedCount;\n\t          return results;\n\t        },\n\t        goAsync: function (search, targets, options) {\n\t          var canceled = false;\n\t          var p = new Promise(function (resolve, reject) {\n\t            if (!search) return resolve(noResults);\n\t            search = fuzzysort.prepareSearch(search);\n\t            var searchLowerCode = search[0];\n\t            var q = fastpriorityqueue();\n\t            var iCurrent = targets.length - 1;\n\t            var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;\n\t            var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;\n\t            var allowTypo = options && options.allowTypo !== undefined ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== undefined ? instanceOptions.allowTypo : true;\n\t            var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;\n\t            var resultsLen = 0;\n\t            var limitedCount = 0;\n\n\t            function step() {\n\t              if (canceled) return reject('canceled');\n\t              var startMs = Date.now(); // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]\n\t              // options.keys\n\n\t              if (options && options.keys) {\n\t                var scoreFn = options.scoreFn || defaultScoreFn;\n\t                var keys = options.keys;\n\t                var keysLen = keys.length;\n\n\t                for (; iCurrent >= 0; --iCurrent) {\n\t                  var obj = targets[iCurrent];\n\t                  var objResults = new Array(keysLen);\n\n\t                  for (var keyI = keysLen - 1; keyI >= 0; --keyI) {\n\t                    var key = keys[keyI];\n\t                    var target = getValue(obj, key);\n\n\t                    if (!target) {\n\t                      objResults[keyI] = null;\n\t                      continue;\n\t                    }\n\n\t                    if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t                    objResults[keyI] = algorithm(search, target, searchLowerCode);\n\t                  }\n\n\t                  objResults.obj = obj; // before scoreFn so scoreFn can use it\n\n\t                  var score = scoreFn(objResults);\n\t                  if (score === null) continue;\n\t                  if (score < threshold) continue;\n\t                  objResults.score = score;\n\n\t                  if (resultsLen < limit) {\n\t                    q.add(objResults);\n\t                    ++resultsLen;\n\t                  } else {\n\t                    ++limitedCount;\n\t                    if (score > q.peek().score) q.replaceTop(objResults);\n\t                  }\n\n\t                  if (iCurrent % 1000\n\t                  /*itemsPerCheck*/\n\t                  === 0) {\n\t                    if (Date.now() - startMs >= 10\n\t                    /*asyncInterval*/\n\t                    ) {\n\t                        isNode ? setImmediate(step) : setTimeout(step);\n\t                        return;\n\t                      }\n\t                  }\n\t                } // options.key\n\n\t              } else if (options && options.key) {\n\t                var key = options.key;\n\n\t                for (; iCurrent >= 0; --iCurrent) {\n\t                  var obj = targets[iCurrent];\n\t                  var target = getValue(obj, key);\n\t                  if (!target) continue;\n\t                  if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t                  var result = algorithm(search, target, searchLowerCode);\n\t                  if (result === null) continue;\n\t                  if (result.score < threshold) continue; // have to clone result so duplicate targets from different obj can each reference the correct obj\n\n\t                  result = {\n\t                    target: result.target,\n\t                    _targetLowerCodes: null,\n\t                    _nextBeginningIndexes: null,\n\t                    score: result.score,\n\t                    indexes: result.indexes,\n\t                    obj: obj\n\t                  }; // hidden\n\n\t                  if (resultsLen < limit) {\n\t                    q.add(result);\n\t                    ++resultsLen;\n\t                  } else {\n\t                    ++limitedCount;\n\t                    if (result.score > q.peek().score) q.replaceTop(result);\n\t                  }\n\n\t                  if (iCurrent % 1000\n\t                  /*itemsPerCheck*/\n\t                  === 0) {\n\t                    if (Date.now() - startMs >= 10\n\t                    /*asyncInterval*/\n\t                    ) {\n\t                        isNode ? setImmediate(step) : setTimeout(step);\n\t                        return;\n\t                      }\n\t                  }\n\t                } // no keys\n\n\t              } else {\n\t                for (; iCurrent >= 0; --iCurrent) {\n\t                  var target = targets[iCurrent];\n\t                  if (!target) continue;\n\t                  if (!isObj(target)) target = fuzzysort.getPrepared(target);\n\t                  var result = algorithm(search, target, searchLowerCode);\n\t                  if (result === null) continue;\n\t                  if (result.score < threshold) continue;\n\n\t                  if (resultsLen < limit) {\n\t                    q.add(result);\n\t                    ++resultsLen;\n\t                  } else {\n\t                    ++limitedCount;\n\t                    if (result.score > q.peek().score) q.replaceTop(result);\n\t                  }\n\n\t                  if (iCurrent % 1000\n\t                  /*itemsPerCheck*/\n\t                  === 0) {\n\t                    if (Date.now() - startMs >= 10\n\t                    /*asyncInterval*/\n\t                    ) {\n\t                        isNode ? setImmediate(step) : setTimeout(step);\n\t                        return;\n\t                      }\n\t                  }\n\t                }\n\t              }\n\n\t              if (resultsLen === 0) return resolve(noResults);\n\t              var results = new Array(resultsLen);\n\n\t              for (var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll();\n\n\t              results.total = resultsLen + limitedCount;\n\t              resolve(results);\n\t            }\n\n\t            isNode ? setImmediate(step) : step();\n\t          });\n\n\t          p.cancel = function () {\n\t            canceled = true;\n\t          };\n\n\t          return p;\n\t        },\n\t        highlight: function (result, hOpen, hClose) {\n\t          if (result === null) return null;\n\t          if (hOpen === undefined) hOpen = '<b>';\n\t          if (hClose === undefined) hClose = '</b>';\n\t          var highlighted = '';\n\t          var matchesIndex = 0;\n\t          var opened = false;\n\t          var target = result.target;\n\t          var targetLen = target.length;\n\t          var matchesBest = result.indexes;\n\n\t          for (var i = 0; i < targetLen; ++i) {\n\t            var char = target[i];\n\n\t            if (matchesBest[matchesIndex] === i) {\n\t              ++matchesIndex;\n\n\t              if (!opened) {\n\t                opened = true;\n\t                highlighted += hOpen;\n\t              }\n\n\t              if (matchesIndex === matchesBest.length) {\n\t                highlighted += char + hClose + target.substr(i + 1);\n\t                break;\n\t              }\n\t            } else {\n\t              if (opened) {\n\t                opened = false;\n\t                highlighted += hClose;\n\t              }\n\t            }\n\n\t            highlighted += char;\n\t          }\n\n\t          return highlighted;\n\t        },\n\t        prepare: function (target) {\n\t          if (!target) return;\n\t          return {\n\t            target: target,\n\t            _targetLowerCodes: fuzzysort.prepareLowerCodes(target),\n\t            _nextBeginningIndexes: null,\n\t            score: null,\n\t            indexes: null,\n\t            obj: null\n\t          }; // hidden\n\t        },\n\t        prepareSlow: function (target) {\n\t          if (!target) return;\n\t          return {\n\t            target: target,\n\t            _targetLowerCodes: fuzzysort.prepareLowerCodes(target),\n\t            _nextBeginningIndexes: fuzzysort.prepareNextBeginningIndexes(target),\n\t            score: null,\n\t            indexes: null,\n\t            obj: null\n\t          }; // hidden\n\t        },\n\t        prepareSearch: function (search) {\n\t          if (!search) return;\n\t          return fuzzysort.prepareLowerCodes(search);\n\t        },\n\t        // Below this point is only internal code\n\t        // Below this point is only internal code\n\t        // Below this point is only internal code\n\t        // Below this point is only internal code\n\t        getPrepared: function (target) {\n\t          if (target.length > 999) return fuzzysort.prepare(target); // don't cache huge targets\n\n\t          var targetPrepared = preparedCache.get(target);\n\t          if (targetPrepared !== undefined) return targetPrepared;\n\t          targetPrepared = fuzzysort.prepare(target);\n\t          preparedCache.set(target, targetPrepared);\n\t          return targetPrepared;\n\t        },\n\t        getPreparedSearch: function (search) {\n\t          if (search.length > 999) return fuzzysort.prepareSearch(search); // don't cache huge searches\n\n\t          var searchPrepared = preparedSearchCache.get(search);\n\t          if (searchPrepared !== undefined) return searchPrepared;\n\t          searchPrepared = fuzzysort.prepareSearch(search);\n\t          preparedSearchCache.set(search, searchPrepared);\n\t          return searchPrepared;\n\t        },\n\t        algorithm: function (searchLowerCodes, prepared, searchLowerCode) {\n\t          var targetLowerCodes = prepared._targetLowerCodes;\n\t          var searchLen = searchLowerCodes.length;\n\t          var targetLen = targetLowerCodes.length;\n\t          var searchI = 0; // where we at\n\n\t          var targetI = 0; // where you at\n\n\t          var typoSimpleI = 0;\n\t          var matchesSimpleLen = 0; // very basic fuzzy match; to remove non-matching targets ASAP!\n\t          // walk through target. find sequential matches.\n\t          // if all chars aren't found then exit\n\n\t          for (;;) {\n\t            var isMatch = searchLowerCode === targetLowerCodes[targetI];\n\n\t            if (isMatch) {\n\t              matchesSimple[matchesSimpleLen++] = targetI;\n\t              ++searchI;\n\t              if (searchI === searchLen) break;\n\t              searchLowerCode = searchLowerCodes[typoSimpleI === 0 ? searchI : typoSimpleI === searchI ? searchI + 1 : typoSimpleI === searchI - 1 ? searchI - 1 : searchI];\n\t            }\n\n\t            ++targetI;\n\n\t            if (targetI >= targetLen) {\n\t              // Failed to find searchI\n\t              // Check for typo or exit\n\t              // we go as far as possible before trying to transpose\n\t              // then we transpose backwards until we reach the beginning\n\t              for (;;) {\n\t                if (searchI <= 1) return null; // not allowed to transpose first char\n\n\t                if (typoSimpleI === 0) {\n\t                  // we haven't tried to transpose yet\n\t                  --searchI;\n\t                  var searchLowerCodeNew = searchLowerCodes[searchI];\n\t                  if (searchLowerCode === searchLowerCodeNew) continue; // doesn't make sense to transpose a repeat char\n\n\t                  typoSimpleI = searchI;\n\t                } else {\n\t                  if (typoSimpleI === 1) return null; // reached the end of the line for transposing\n\n\t                  --typoSimpleI;\n\t                  searchI = typoSimpleI;\n\t                  searchLowerCode = searchLowerCodes[searchI + 1];\n\t                  var searchLowerCodeNew = searchLowerCodes[searchI];\n\t                  if (searchLowerCode === searchLowerCodeNew) continue; // doesn't make sense to transpose a repeat char\n\t                }\n\n\t                matchesSimpleLen = searchI;\n\t                targetI = matchesSimple[matchesSimpleLen - 1] + 1;\n\t                break;\n\t              }\n\t            }\n\t          }\n\n\t          var searchI = 0;\n\t          var typoStrictI = 0;\n\t          var successStrict = false;\n\t          var matchesStrictLen = 0;\n\t          var nextBeginningIndexes = prepared._nextBeginningIndexes;\n\t          if (nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target);\n\t          var firstPossibleI = targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1]; // Our target string successfully matched all characters in sequence!\n\t          // Let's try a more advanced and strict test to improve the score\n\t          // only count it as a match if it's consecutive or a beginning character!\n\n\t          if (targetI !== targetLen) for (;;) {\n\t            if (targetI >= targetLen) {\n\t              // We failed to find a good spot for this search char, go back to the previous search char and force it forward\n\t              if (searchI <= 0) {\n\t                // We failed to push chars forward for a better match\n\t                // transpose, starting from the beginning\n\t                ++typoStrictI;\n\t                if (typoStrictI > searchLen - 2) break;\n\t                if (searchLowerCodes[typoStrictI] === searchLowerCodes[typoStrictI + 1]) continue; // doesn't make sense to transpose a repeat char\n\n\t                targetI = firstPossibleI;\n\t                continue;\n\t              }\n\n\t              --searchI;\n\t              var lastMatch = matchesStrict[--matchesStrictLen];\n\t              targetI = nextBeginningIndexes[lastMatch];\n\t            } else {\n\t              var isMatch = searchLowerCodes[typoStrictI === 0 ? searchI : typoStrictI === searchI ? searchI + 1 : typoStrictI === searchI - 1 ? searchI - 1 : searchI] === targetLowerCodes[targetI];\n\n\t              if (isMatch) {\n\t                matchesStrict[matchesStrictLen++] = targetI;\n\t                ++searchI;\n\n\t                if (searchI === searchLen) {\n\t                  successStrict = true;\n\t                  break;\n\t                }\n\n\t                ++targetI;\n\t              } else {\n\t                targetI = nextBeginningIndexes[targetI];\n\t              }\n\t            }\n\t          }\n\t          {\n\t            // tally up the score & keep track of matches for highlighting later\n\t            if (successStrict) {\n\t              var matchesBest = matchesStrict;\n\t              var matchesBestLen = matchesStrictLen;\n\t            } else {\n\t              var matchesBest = matchesSimple;\n\t              var matchesBestLen = matchesSimpleLen;\n\t            }\n\n\t            var score = 0;\n\t            var lastTargetI = -1;\n\n\t            for (var i = 0; i < searchLen; ++i) {\n\t              var targetI = matchesBest[i]; // score only goes down if they're not consecutive\n\n\t              if (lastTargetI !== targetI - 1) score -= targetI;\n\t              lastTargetI = targetI;\n\t            }\n\n\t            if (!successStrict) {\n\t              score *= 1000;\n\t              if (typoSimpleI !== 0) score += -20;\n\t              /*typoPenalty*/\n\t            } else {\n\t              if (typoStrictI !== 0) score += -20;\n\t              /*typoPenalty*/\n\t            }\n\n\t            score -= targetLen - searchLen;\n\t            prepared.score = score;\n\t            prepared.indexes = new Array(matchesBestLen);\n\n\t            for (var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];\n\n\t            return prepared;\n\t          }\n\t        },\n\t        algorithmNoTypo: function (searchLowerCodes, prepared, searchLowerCode) {\n\t          var targetLowerCodes = prepared._targetLowerCodes;\n\t          var searchLen = searchLowerCodes.length;\n\t          var targetLen = targetLowerCodes.length;\n\t          var searchI = 0; // where we at\n\n\t          var targetI = 0; // where you at\n\n\t          var matchesSimpleLen = 0; // very basic fuzzy match; to remove non-matching targets ASAP!\n\t          // walk through target. find sequential matches.\n\t          // if all chars aren't found then exit\n\n\t          for (;;) {\n\t            var isMatch = searchLowerCode === targetLowerCodes[targetI];\n\n\t            if (isMatch) {\n\t              matchesSimple[matchesSimpleLen++] = targetI;\n\t              ++searchI;\n\t              if (searchI === searchLen) break;\n\t              searchLowerCode = searchLowerCodes[searchI];\n\t            }\n\n\t            ++targetI;\n\t            if (targetI >= targetLen) return null; // Failed to find searchI\n\t          }\n\n\t          var searchI = 0;\n\t          var successStrict = false;\n\t          var matchesStrictLen = 0;\n\t          var nextBeginningIndexes = prepared._nextBeginningIndexes;\n\t          if (nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target);\n\t          var firstPossibleI = targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1]; // Our target string successfully matched all characters in sequence!\n\t          // Let's try a more advanced and strict test to improve the score\n\t          // only count it as a match if it's consecutive or a beginning character!\n\n\t          if (targetI !== targetLen) for (;;) {\n\t            if (targetI >= targetLen) {\n\t              // We failed to find a good spot for this search char, go back to the previous search char and force it forward\n\t              if (searchI <= 0) break; // We failed to push chars forward for a better match\n\n\t              --searchI;\n\t              var lastMatch = matchesStrict[--matchesStrictLen];\n\t              targetI = nextBeginningIndexes[lastMatch];\n\t            } else {\n\t              var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI];\n\n\t              if (isMatch) {\n\t                matchesStrict[matchesStrictLen++] = targetI;\n\t                ++searchI;\n\n\t                if (searchI === searchLen) {\n\t                  successStrict = true;\n\t                  break;\n\t                }\n\n\t                ++targetI;\n\t              } else {\n\t                targetI = nextBeginningIndexes[targetI];\n\t              }\n\t            }\n\t          }\n\t          {\n\t            // tally up the score & keep track of matches for highlighting later\n\t            if (successStrict) {\n\t              var matchesBest = matchesStrict;\n\t              var matchesBestLen = matchesStrictLen;\n\t            } else {\n\t              var matchesBest = matchesSimple;\n\t              var matchesBestLen = matchesSimpleLen;\n\t            }\n\n\t            var score = 0;\n\t            var lastTargetI = -1;\n\n\t            for (var i = 0; i < searchLen; ++i) {\n\t              var targetI = matchesBest[i]; // score only goes down if they're not consecutive\n\n\t              if (lastTargetI !== targetI - 1) score -= targetI;\n\t              lastTargetI = targetI;\n\t            }\n\n\t            if (!successStrict) score *= 1000;\n\t            score -= targetLen - searchLen;\n\t            prepared.score = score;\n\t            prepared.indexes = new Array(matchesBestLen);\n\n\t            for (var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];\n\n\t            return prepared;\n\t          }\n\t        },\n\t        prepareLowerCodes: function (str) {\n\t          var strLen = str.length;\n\t          var lowerCodes = []; // new Array(strLen)    sparse array is too slow\n\n\t          var lower = str.toLowerCase();\n\n\t          for (var i = 0; i < strLen; ++i) lowerCodes[i] = lower.charCodeAt(i);\n\n\t          return lowerCodes;\n\t        },\n\t        prepareBeginningIndexes: function (target) {\n\t          var targetLen = target.length;\n\t          var beginningIndexes = [];\n\t          var beginningIndexesLen = 0;\n\t          var wasUpper = false;\n\t          var wasAlphanum = false;\n\n\t          for (var i = 0; i < targetLen; ++i) {\n\t            var targetCode = target.charCodeAt(i);\n\t            var isUpper = targetCode >= 65 && targetCode <= 90;\n\t            var isAlphanum = isUpper || targetCode >= 97 && targetCode <= 122 || targetCode >= 48 && targetCode <= 57;\n\t            var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum;\n\t            wasUpper = isUpper;\n\t            wasAlphanum = isAlphanum;\n\t            if (isBeginning) beginningIndexes[beginningIndexesLen++] = i;\n\t          }\n\n\t          return beginningIndexes;\n\t        },\n\t        prepareNextBeginningIndexes: function (target) {\n\t          var targetLen = target.length;\n\t          var beginningIndexes = fuzzysort.prepareBeginningIndexes(target);\n\t          var nextBeginningIndexes = []; // new Array(targetLen)     sparse array is too slow\n\n\t          var lastIsBeginning = beginningIndexes[0];\n\t          var lastIsBeginningI = 0;\n\n\t          for (var i = 0; i < targetLen; ++i) {\n\t            if (lastIsBeginning > i) {\n\t              nextBeginningIndexes[i] = lastIsBeginning;\n\t            } else {\n\t              lastIsBeginning = beginningIndexes[++lastIsBeginningI];\n\t              nextBeginningIndexes[i] = lastIsBeginning === undefined ? targetLen : lastIsBeginning;\n\t            }\n\t          }\n\n\t          return nextBeginningIndexes;\n\t        },\n\t        cleanup: cleanup,\n\t        new: fuzzysortNew\n\t      };\n\t      return fuzzysort;\n\t    } // fuzzysortNew\n\t    // This stuff is outside fuzzysortNew, because it's shared with instances of fuzzysort.new()\n\n\n\t    var isNode = typeof commonjsRequire !== 'undefined' && typeof window === 'undefined'; // var MAX_INT = Number.MAX_SAFE_INTEGER\n\t    // var MIN_INT = Number.MIN_VALUE\n\n\t    var preparedCache = new Map();\n\t    var preparedSearchCache = new Map();\n\t    var noResults = [];\n\t    noResults.total = 0;\n\t    var matchesSimple = [];\n\t    var matchesStrict = [];\n\n\t    function cleanup() {\n\t      preparedCache.clear();\n\t      preparedSearchCache.clear();\n\t      matchesSimple = [];\n\t      matchesStrict = [];\n\t    }\n\n\t    function defaultScoreFn(a) {\n\t      var max = -9007199254740991;\n\n\t      for (var i = a.length - 1; i >= 0; --i) {\n\t        var result = a[i];\n\t        if (result === null) continue;\n\t        var score = result.score;\n\t        if (score > max) max = score;\n\t      }\n\n\t      if (max === -9007199254740991) return null;\n\t      return max;\n\t    } // prop = 'key'              2.5ms optimized for this case, seems to be about as fast as direct obj[prop]\n\t    // prop = 'key1.key2'        10ms\n\t    // prop = ['key1', 'key2']   27ms\n\n\n\t    function getValue(obj, prop) {\n\t      var tmp = obj[prop];\n\t      if (tmp !== undefined) return tmp;\n\t      var segs = prop;\n\t      if (!Array.isArray(prop)) segs = prop.split('.');\n\t      var len = segs.length;\n\t      var i = -1;\n\n\t      while (obj && ++i < len) obj = obj[segs[i]];\n\n\t      return obj;\n\t    }\n\n\t    function isObj(x) {\n\t      return typeof x === 'object';\n\t    } // faster as a function\n\t    // Hacked version of https://github.com/lemire/FastPriorityQueue.js\n\n\n\t    var fastpriorityqueue = function () {\n\t      var r = [],\n\t          o = 0,\n\t          e = {};\n\n\t      function n() {\n\t        for (var e = 0, n = r[e], c = 1; c < o;) {\n\t          var f = c + 1;\n\t          e = c, f < o && r[f].score < r[c].score && (e = f), r[e - 1 >> 1] = r[e], c = 1 + (e << 1);\n\t        }\n\n\t        for (var a = e - 1 >> 1; e > 0 && n.score < r[a].score; a = (e = a) - 1 >> 1) r[e] = r[a];\n\n\t        r[e] = n;\n\t      }\n\n\t      return e.add = function (e) {\n\t        var n = o;\n\t        r[o++] = e;\n\n\t        for (var c = n - 1 >> 1; n > 0 && e.score < r[c].score; c = (n = c) - 1 >> 1) r[n] = r[c];\n\n\t        r[n] = e;\n\t      }, e.poll = function () {\n\t        if (0 !== o) {\n\t          var e = r[0];\n\t          return r[0] = r[--o], n(), e;\n\t        }\n\t      }, e.peek = function (e) {\n\t        if (0 !== o) return r[0];\n\t      }, e.replaceTop = function (o) {\n\t        r[0] = o, n();\n\t      }, e;\n\t    };\n\n\t    var q = fastpriorityqueue(); // reuse this, except for async, it needs to make its own\n\n\t    return fuzzysortNew();\n\t  }); // UMD\n\t  // TODO: (performance) wasm version!?\n\t  // TODO: (performance) layout memory in an optimal way to go fast by avoiding cache misses\n\t  // TODO: (performance) preparedCache is a memory leak\n\t  // TODO: (like sublime) backslash === forwardslash\n\t  // TODO: (performance) i have no idea how well optizmied the allowing typos algorithm is\n\n\t});\n\n\tvar stats = {\n\t  passedTests: 0,\n\t  failedTests: 0,\n\t  skippedTests: 0,\n\t  todoTests: 0\n\t}; // Escape text for attribute or text content.\n\n\tfunction escapeText(s) {\n\t  if (!s) {\n\t    return \"\";\n\t  }\n\n\t  s = s + \"\"; // Both single quotes and double quotes (for attributes)\n\n\t  return s.replace(/['\"<>&]/g, function (s) {\n\t    switch (s) {\n\t      case \"'\":\n\t        return \"&#039;\";\n\n\t      case \"\\\"\":\n\t        return \"&quot;\";\n\n\t      case \"<\":\n\t        return \"&lt;\";\n\n\t      case \">\":\n\t        return \"&gt;\";\n\n\t      case \"&\":\n\t        return \"&amp;\";\n\t    }\n\t  });\n\t}\n\n\t(function () {\n\t  // Don't load the HTML Reporter on non-browser environments\n\t  if (!window$1 || !document) {\n\t    return;\n\t  }\n\n\t  var config = QUnit.config,\n\t      hiddenTests = [],\n\t      collapseNext = false,\n\t      hasOwn = Object.prototype.hasOwnProperty,\n\t      unfilteredUrl = setUrl({\n\t    filter: undefined,\n\t    module: undefined,\n\t    moduleId: undefined,\n\t    testId: undefined\n\t  });\n\n\t  function addEvent(elem, type, fn) {\n\t    elem.addEventListener(type, fn, false);\n\t  }\n\n\t  function removeEvent(elem, type, fn) {\n\t    elem.removeEventListener(type, fn, false);\n\t  }\n\n\t  function addEvents(elems, type, fn) {\n\t    var i = elems.length;\n\n\t    while (i--) {\n\t      addEvent(elems[i], type, fn);\n\t    }\n\t  }\n\n\t  function hasClass(elem, name) {\n\t    return (\" \" + elem.className + \" \").indexOf(\" \" + name + \" \") >= 0;\n\t  }\n\n\t  function addClass(elem, name) {\n\t    if (!hasClass(elem, name)) {\n\t      elem.className += (elem.className ? \" \" : \"\") + name;\n\t    }\n\t  }\n\n\t  function toggleClass(elem, name, force) {\n\t    if (force || typeof force === \"undefined\" && !hasClass(elem, name)) {\n\t      addClass(elem, name);\n\t    } else {\n\t      removeClass(elem, name);\n\t    }\n\t  }\n\n\t  function removeClass(elem, name) {\n\t    var set = \" \" + elem.className + \" \"; // Class name may appear multiple times\n\n\t    while (set.indexOf(\" \" + name + \" \") >= 0) {\n\t      set = set.replace(\" \" + name + \" \", \" \");\n\t    } // Trim for prettiness\n\n\n\t    elem.className = typeof set.trim === \"function\" ? set.trim() : set.replace(/^\\s+|\\s+$/g, \"\");\n\t  }\n\n\t  function id(name) {\n\t    return document.getElementById && document.getElementById(name);\n\t  }\n\n\t  function abortTests() {\n\t    var abortButton = id(\"qunit-abort-tests-button\");\n\n\t    if (abortButton) {\n\t      abortButton.disabled = true;\n\t      abortButton.innerHTML = \"Aborting...\";\n\t    }\n\n\t    QUnit.config.queue.length = 0;\n\t    return false;\n\t  }\n\n\t  function interceptNavigation(ev) {\n\t    applyUrlParams();\n\n\t    if (ev && ev.preventDefault) {\n\t      ev.preventDefault();\n\t    }\n\n\t    return false;\n\t  }\n\n\t  function getUrlConfigHtml() {\n\t    var i,\n\t        j,\n\t        val,\n\t        escaped,\n\t        escapedTooltip,\n\t        selection = false,\n\t        urlConfig = config.urlConfig,\n\t        urlConfigHtml = \"\";\n\n\t    for (i = 0; i < urlConfig.length; i++) {\n\t      // Options can be either strings or objects with nonempty \"id\" properties\n\t      val = config.urlConfig[i];\n\n\t      if (typeof val === \"string\") {\n\t        val = {\n\t          id: val,\n\t          label: val\n\t        };\n\t      }\n\n\t      escaped = escapeText(val.id);\n\t      escapedTooltip = escapeText(val.tooltip);\n\n\t      if (!val.value || typeof val.value === \"string\") {\n\t        urlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped + \"' title='\" + escapedTooltip + \"'><input id='qunit-urlconfig-\" + escaped + \"' name='\" + escaped + \"' type='checkbox'\" + (val.value ? \" value='\" + escapeText(val.value) + \"'\" : \"\") + (config[val.id] ? \" checked='checked'\" : \"\") + \" title='\" + escapedTooltip + \"' />\" + escapeText(val.label) + \"</label>\";\n\t      } else {\n\t        urlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped + \"' title='\" + escapedTooltip + \"'>\" + val.label + \": </label><select id='qunit-urlconfig-\" + escaped + \"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\n\t        if (QUnit.is(\"array\", val.value)) {\n\t          for (j = 0; j < val.value.length; j++) {\n\t            escaped = escapeText(val.value[j]);\n\t            urlConfigHtml += \"<option value='\" + escaped + \"'\" + (config[val.id] === val.value[j] ? (selection = true) && \" selected='selected'\" : \"\") + \">\" + escaped + \"</option>\";\n\t          }\n\t        } else {\n\t          for (j in val.value) {\n\t            if (hasOwn.call(val.value, j)) {\n\t              urlConfigHtml += \"<option value='\" + escapeText(j) + \"'\" + (config[val.id] === j ? (selection = true) && \" selected='selected'\" : \"\") + \">\" + escapeText(val.value[j]) + \"</option>\";\n\t            }\n\t          }\n\t        }\n\n\t        if (config[val.id] && !selection) {\n\t          escaped = escapeText(config[val.id]);\n\t          urlConfigHtml += \"<option value='\" + escaped + \"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t        }\n\n\t        urlConfigHtml += \"</select>\";\n\t      }\n\t    }\n\n\t    return urlConfigHtml;\n\t  } // Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n\t  // Updates the URL with the new state of `config.urlConfig` values.\n\n\n\t  function toolbarChanged() {\n\t    var updatedUrl,\n\t        value,\n\t        tests,\n\t        field = this,\n\t        params = {}; // Detect if field is a select menu or a checkbox\n\n\t    if (\"selectedIndex\" in field) {\n\t      value = field.options[field.selectedIndex].value || undefined;\n\t    } else {\n\t      value = field.checked ? field.defaultValue || true : undefined;\n\t    }\n\n\t    params[field.name] = value;\n\t    updatedUrl = setUrl(params); // Check if we can apply the change without a page refresh\n\n\t    if (\"hidepassed\" === field.name && \"replaceState\" in window$1.history) {\n\t      QUnit.urlParams[field.name] = value;\n\t      config[field.name] = value || false;\n\t      tests = id(\"qunit-tests\");\n\n\t      if (tests) {\n\t        var length = tests.children.length;\n\t        var children = tests.children;\n\n\t        if (field.checked) {\n\t          for (var i = 0; i < length; i++) {\n\t            var test = children[i];\n\t            var className = test ? test.className : \"\";\n\t            var classNameHasPass = className.indexOf(\"pass\") > -1;\n\t            var classNameHasSkipped = className.indexOf(\"skipped\") > -1;\n\n\t            if (classNameHasPass || classNameHasSkipped) {\n\t              hiddenTests.push(test);\n\t            }\n\t          }\n\n\t          var _iterator = _createForOfIteratorHelper(hiddenTests),\n\t              _step;\n\n\t          try {\n\t            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n\t              var hiddenTest = _step.value;\n\t              tests.removeChild(hiddenTest);\n\t            }\n\t          } catch (err) {\n\t            _iterator.e(err);\n\t          } finally {\n\t            _iterator.f();\n\t          }\n\t        } else {\n\t          while ((test = hiddenTests.pop()) != null) {\n\t            tests.appendChild(test);\n\t          }\n\t        }\n\t      }\n\n\t      window$1.history.replaceState(null, \"\", updatedUrl);\n\t    } else {\n\t      window$1.location = updatedUrl;\n\t    }\n\t  }\n\n\t  function setUrl(params) {\n\t    var key,\n\t        arrValue,\n\t        i,\n\t        querystring = \"?\",\n\t        location = window$1.location;\n\t    params = extend(extend({}, QUnit.urlParams), params);\n\n\t    for (key in params) {\n\t      // Skip inherited or undefined properties\n\t      if (hasOwn.call(params, key) && params[key] !== undefined) {\n\t        // Output a parameter for each value of this key\n\t        // (but usually just one)\n\t        arrValue = [].concat(params[key]);\n\n\t        for (i = 0; i < arrValue.length; i++) {\n\t          querystring += encodeURIComponent(key);\n\n\t          if (arrValue[i] !== true) {\n\t            querystring += \"=\" + encodeURIComponent(arrValue[i]);\n\t          }\n\n\t          querystring += \"&\";\n\t        }\n\t      }\n\t    }\n\n\t    return location.protocol + \"//\" + location.host + location.pathname + querystring.slice(0, -1);\n\t  }\n\n\t  function applyUrlParams() {\n\t    var i,\n\t        selectedModules = [],\n\t        modulesList = id(\"qunit-modulefilter-dropdown-list\").getElementsByTagName(\"input\"),\n\t        filter = id(\"qunit-filter-input\").value;\n\n\t    for (i = 0; i < modulesList.length; i++) {\n\t      if (modulesList[i].checked) {\n\t        selectedModules.push(modulesList[i].value);\n\t      }\n\t    }\n\n\t    window$1.location = setUrl({\n\t      filter: filter === \"\" ? undefined : filter,\n\t      moduleId: selectedModules.length === 0 ? undefined : selectedModules,\n\t      // Remove module and testId filter\n\t      module: undefined,\n\t      testId: undefined\n\t    });\n\t  }\n\n\t  function toolbarUrlConfigContainer() {\n\t    var urlConfigContainer = document.createElement(\"span\");\n\t    urlConfigContainer.innerHTML = getUrlConfigHtml();\n\t    addClass(urlConfigContainer, \"qunit-url-config\");\n\t    addEvents(urlConfigContainer.getElementsByTagName(\"input\"), \"change\", toolbarChanged);\n\t    addEvents(urlConfigContainer.getElementsByTagName(\"select\"), \"change\", toolbarChanged);\n\t    return urlConfigContainer;\n\t  }\n\n\t  function abortTestsButton() {\n\t    var button = document.createElement(\"button\");\n\t    button.id = \"qunit-abort-tests-button\";\n\t    button.innerHTML = \"Abort\";\n\t    addEvent(button, \"click\", abortTests);\n\t    return button;\n\t  }\n\n\t  function toolbarLooseFilter() {\n\t    var filter = document.createElement(\"form\"),\n\t        label = document.createElement(\"label\"),\n\t        input = document.createElement(\"input\"),\n\t        button = document.createElement(\"button\");\n\t    addClass(filter, \"qunit-filter\");\n\t    label.innerHTML = \"Filter: \";\n\t    input.type = \"text\";\n\t    input.value = config.filter || \"\";\n\t    input.name = \"filter\";\n\t    input.id = \"qunit-filter-input\";\n\t    button.innerHTML = \"Go\";\n\t    label.appendChild(input);\n\t    filter.appendChild(label);\n\t    filter.appendChild(document.createTextNode(\" \"));\n\t    filter.appendChild(button);\n\t    addEvent(filter, \"submit\", interceptNavigation);\n\t    return filter;\n\t  }\n\n\t  function moduleListHtml(modules) {\n\t    var i,\n\t        checked,\n\t        html = \"\";\n\n\t    for (i = 0; i < modules.length; i++) {\n\t      if (modules[i].name !== \"\") {\n\t        checked = config.moduleId.indexOf(modules[i].moduleId) > -1;\n\t        html += \"<li><label class='clickable\" + (checked ? \" checked\" : \"\") + \"'><input type='checkbox' \" + \"value='\" + modules[i].moduleId + \"'\" + (checked ? \" checked='checked'\" : \"\") + \" />\" + escapeText(modules[i].name) + \"</label></li>\";\n\t      }\n\t    }\n\n\t    return html;\n\t  }\n\n\t  function toolbarModuleFilter() {\n\t    var commit,\n\t        reset,\n\t        moduleFilter = document.createElement(\"form\"),\n\t        label = document.createElement(\"label\"),\n\t        moduleSearch = document.createElement(\"input\"),\n\t        dropDown = document.createElement(\"div\"),\n\t        actions = document.createElement(\"span\"),\n\t        applyButton = document.createElement(\"button\"),\n\t        resetButton = document.createElement(\"button\"),\n\t        allModulesLabel = document.createElement(\"label\"),\n\t        allCheckbox = document.createElement(\"input\"),\n\t        dropDownList = document.createElement(\"ul\"),\n\t        dirty = false;\n\t    moduleSearch.id = \"qunit-modulefilter-search\";\n\t    moduleSearch.autocomplete = \"off\";\n\t    addEvent(moduleSearch, \"input\", searchInput);\n\t    addEvent(moduleSearch, \"input\", searchFocus);\n\t    addEvent(moduleSearch, \"focus\", searchFocus);\n\t    addEvent(moduleSearch, \"click\", searchFocus);\n\t    config.modules.forEach(function (module) {\n\t      return module.namePrepared = fuzzysort.prepare(module.name);\n\t    });\n\t    label.id = \"qunit-modulefilter-search-container\";\n\t    label.innerHTML = \"Module: \";\n\t    label.appendChild(moduleSearch);\n\t    applyButton.textContent = \"Apply\";\n\t    applyButton.style.display = \"none\";\n\t    resetButton.textContent = \"Reset\";\n\t    resetButton.type = \"reset\";\n\t    resetButton.style.display = \"none\";\n\t    allCheckbox.type = \"checkbox\";\n\t    allCheckbox.checked = config.moduleId.length === 0;\n\t    allModulesLabel.className = \"clickable\";\n\n\t    if (config.moduleId.length) {\n\t      allModulesLabel.className = \"checked\";\n\t    }\n\n\t    allModulesLabel.appendChild(allCheckbox);\n\t    allModulesLabel.appendChild(document.createTextNode(\"All modules\"));\n\t    actions.id = \"qunit-modulefilter-actions\";\n\t    actions.appendChild(applyButton);\n\t    actions.appendChild(resetButton);\n\t    actions.appendChild(allModulesLabel);\n\t    commit = actions.firstChild;\n\t    reset = commit.nextSibling;\n\t    addEvent(commit, \"click\", applyUrlParams);\n\t    dropDownList.id = \"qunit-modulefilter-dropdown-list\";\n\t    dropDownList.innerHTML = moduleListHtml(config.modules);\n\t    dropDown.id = \"qunit-modulefilter-dropdown\";\n\t    dropDown.style.display = \"none\";\n\t    dropDown.appendChild(actions);\n\t    dropDown.appendChild(dropDownList);\n\t    addEvent(dropDown, \"change\", selectionChange);\n\t    selectionChange();\n\t    moduleFilter.id = \"qunit-modulefilter\";\n\t    moduleFilter.appendChild(label);\n\t    moduleFilter.appendChild(dropDown);\n\t    addEvent(moduleFilter, \"submit\", interceptNavigation);\n\t    addEvent(moduleFilter, \"reset\", function () {\n\t      // Let the reset happen, then update styles\n\t      window$1.setTimeout(selectionChange);\n\t    }); // Enables show/hide for the dropdown\n\n\t    function searchFocus() {\n\t      if (dropDown.style.display !== \"none\") {\n\t        return;\n\t      }\n\n\t      dropDown.style.display = \"block\";\n\t      addEvent(document, \"click\", hideHandler);\n\t      addEvent(document, \"keydown\", hideHandler); // Hide on Escape keydown or outside-container click\n\n\t      function hideHandler(e) {\n\t        var inContainer = moduleFilter.contains(e.target);\n\n\t        if (e.keyCode === 27 || !inContainer) {\n\t          if (e.keyCode === 27 && inContainer) {\n\t            moduleSearch.focus();\n\t          }\n\n\t          dropDown.style.display = \"none\";\n\t          removeEvent(document, \"click\", hideHandler);\n\t          removeEvent(document, \"keydown\", hideHandler);\n\t          moduleSearch.value = \"\";\n\t          searchInput();\n\t        }\n\t      }\n\t    }\n\n\t    function filterModules(searchText) {\n\t      if (searchText === \"\") {\n\t        return config.modules;\n\t      }\n\n\t      return fuzzysort.go(searchText, config.modules, {\n\t        key: \"namePrepared\",\n\t        threshold: -10000\n\t      }).map(function (module) {\n\t        return module.obj;\n\t      });\n\t    } // Processes module search box input\n\n\n\t    var searchInputTimeout;\n\n\t    function searchInput() {\n\t      window$1.clearTimeout(searchInputTimeout);\n\t      searchInputTimeout = window$1.setTimeout(function () {\n\t        var searchText = moduleSearch.value.toLowerCase(),\n\t            filteredModules = filterModules(searchText);\n\t        dropDownList.innerHTML = moduleListHtml(filteredModules);\n\t      }, 200);\n\t    } // Processes selection changes\n\n\n\t    function selectionChange(evt) {\n\t      var i,\n\t          item,\n\t          checkbox = evt && evt.target || allCheckbox,\n\t          modulesList = dropDownList.getElementsByTagName(\"input\"),\n\t          selectedNames = [];\n\t      toggleClass(checkbox.parentNode, \"checked\", checkbox.checked);\n\t      dirty = false;\n\n\t      if (checkbox.checked && checkbox !== allCheckbox) {\n\t        allCheckbox.checked = false;\n\t        removeClass(allCheckbox.parentNode, \"checked\");\n\t      }\n\n\t      for (i = 0; i < modulesList.length; i++) {\n\t        item = modulesList[i];\n\n\t        if (!evt) {\n\t          toggleClass(item.parentNode, \"checked\", item.checked);\n\t        } else if (checkbox === allCheckbox && checkbox.checked) {\n\t          item.checked = false;\n\t          removeClass(item.parentNode, \"checked\");\n\t        }\n\n\t        dirty = dirty || item.checked !== item.defaultChecked;\n\n\t        if (item.checked) {\n\t          selectedNames.push(item.parentNode.textContent);\n\t        }\n\t      }\n\n\t      commit.style.display = reset.style.display = dirty ? \"\" : \"none\";\n\t      moduleSearch.placeholder = selectedNames.join(\", \") || allCheckbox.parentNode.textContent;\n\t      moduleSearch.title = \"Type to filter list. Current selection:\\n\" + (selectedNames.join(\"\\n\") || allCheckbox.parentNode.textContent);\n\t    }\n\n\t    return moduleFilter;\n\t  }\n\n\t  function toolbarFilters() {\n\t    var toolbarFilters = document.createElement(\"span\");\n\t    toolbarFilters.id = \"qunit-toolbar-filters\";\n\t    toolbarFilters.appendChild(toolbarLooseFilter());\n\t    toolbarFilters.appendChild(toolbarModuleFilter());\n\t    return toolbarFilters;\n\t  }\n\n\t  function appendToolbar() {\n\t    var toolbar = id(\"qunit-testrunner-toolbar\");\n\n\t    if (toolbar) {\n\t      toolbar.appendChild(toolbarUrlConfigContainer());\n\t      toolbar.appendChild(toolbarFilters());\n\t      toolbar.appendChild(document.createElement(\"div\")).className = \"clearfix\";\n\t    }\n\t  }\n\n\t  function appendHeader() {\n\t    var header = id(\"qunit-header\");\n\n\t    if (header) {\n\t      header.innerHTML = \"<a href='\" + escapeText(unfilteredUrl) + \"'>\" + header.innerHTML + \"</a> \";\n\t    }\n\t  }\n\n\t  function appendBanner() {\n\t    var banner = id(\"qunit-banner\");\n\n\t    if (banner) {\n\t      banner.className = \"\";\n\t    }\n\t  }\n\n\t  function appendTestResults() {\n\t    var tests = id(\"qunit-tests\"),\n\t        result = id(\"qunit-testresult\"),\n\t        controls;\n\n\t    if (result) {\n\t      result.parentNode.removeChild(result);\n\t    }\n\n\t    if (tests) {\n\t      tests.innerHTML = \"\";\n\t      result = document.createElement(\"p\");\n\t      result.id = \"qunit-testresult\";\n\t      result.className = \"result\";\n\t      tests.parentNode.insertBefore(result, tests);\n\t      result.innerHTML = \"<div id=\\\"qunit-testresult-display\\\">Running...<br />&#160;</div>\" + \"<div id=\\\"qunit-testresult-controls\\\"></div>\" + \"<div class=\\\"clearfix\\\"></div>\";\n\t      controls = id(\"qunit-testresult-controls\");\n\t    }\n\n\t    if (controls) {\n\t      controls.appendChild(abortTestsButton());\n\t    }\n\t  }\n\n\t  function appendFilteredTest() {\n\t    var testId = QUnit.config.testId;\n\n\t    if (!testId || testId.length <= 0) {\n\t      return \"\";\n\t    }\n\n\t    return \"<div id='qunit-filteredTest'>Rerunning selected tests: \" + escapeText(testId.join(\", \")) + \" <a id='qunit-clearFilter' href='\" + escapeText(unfilteredUrl) + \"'>Run all tests</a></div>\";\n\t  }\n\n\t  function appendUserAgent() {\n\t    var userAgent = id(\"qunit-userAgent\");\n\n\t    if (userAgent) {\n\t      userAgent.innerHTML = \"\";\n\t      userAgent.appendChild(document.createTextNode(\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent));\n\t    }\n\t  }\n\n\t  function appendInterface() {\n\t    var qunit = id(\"qunit\"); // For compat with QUnit 1.2, and to support fully custom theme HTML,\n\t    // we will use any existing elements if no id=\"qunit\" element exists.\n\t    //\n\t    // Note that we don't fail or fallback to creating it ourselves,\n\t    // because not having id=\"qunit\" (and not having the below elements)\n\t    // simply means QUnit acts headless, allowing users to use their own\n\t    // reporters, or for a test runner to listen for events directly without\n\t    // having the HTML reporter actively render anything.\n\n\t    if (qunit) {\n\t      qunit.setAttribute(\"role\", \"main\"); // Since QUnit 1.3, these are created automatically if the page\n\t      // contains id=\"qunit\".\n\n\t      qunit.innerHTML = \"<h1 id='qunit-header'>\" + escapeText(document.title) + \"</h1>\" + \"<h2 id='qunit-banner'></h2>\" + \"<div id='qunit-testrunner-toolbar' role='navigation'></div>\" + appendFilteredTest() + \"<h2 id='qunit-userAgent'></h2>\" + \"<ol id='qunit-tests'></ol>\";\n\t    }\n\n\t    appendHeader();\n\t    appendBanner();\n\t    appendTestResults();\n\t    appendUserAgent();\n\t    appendToolbar();\n\t  }\n\n\t  function appendTest(name, testId, moduleName) {\n\t    var title,\n\t        rerunTrigger,\n\t        testBlock,\n\t        assertList,\n\t        tests = id(\"qunit-tests\");\n\n\t    if (!tests) {\n\t      return;\n\t    }\n\n\t    title = document.createElement(\"strong\");\n\t    title.innerHTML = getNameHtml(name, moduleName);\n\t    rerunTrigger = document.createElement(\"a\");\n\t    rerunTrigger.innerHTML = \"Rerun\";\n\t    rerunTrigger.href = setUrl({\n\t      testId: testId\n\t    });\n\t    testBlock = document.createElement(\"li\");\n\t    testBlock.appendChild(title);\n\t    testBlock.appendChild(rerunTrigger);\n\t    testBlock.id = \"qunit-test-output-\" + testId;\n\t    assertList = document.createElement(\"ol\");\n\t    assertList.className = \"qunit-assert-list\";\n\t    testBlock.appendChild(assertList);\n\t    tests.appendChild(testBlock);\n\t  } // HTML Reporter initialization and load\n\n\n\t  QUnit.begin(function () {\n\t    // Initialize QUnit elements\n\t    appendInterface();\n\t  });\n\t  QUnit.done(function (details) {\n\t    var banner = id(\"qunit-banner\"),\n\t        tests = id(\"qunit-tests\"),\n\t        abortButton = id(\"qunit-abort-tests-button\"),\n\t        totalTests = stats.passedTests + stats.skippedTests + stats.todoTests + stats.failedTests,\n\t        html = [totalTests, \" tests completed in \", details.runtime, \" milliseconds, with \", stats.failedTests, \" failed, \", stats.skippedTests, \" skipped, and \", stats.todoTests, \" todo.<br />\", \"<span class='passed'>\", details.passed, \"</span> assertions of <span class='total'>\", details.total, \"</span> passed, <span class='failed'>\", details.failed, \"</span> failed.\"].join(\"\"),\n\t        test,\n\t        assertLi,\n\t        assertList; // Update remaining tests to aborted\n\n\t    if (abortButton && abortButton.disabled) {\n\t      html = \"Tests aborted after \" + details.runtime + \" milliseconds.\";\n\n\t      for (var i = 0; i < tests.children.length; i++) {\n\t        test = tests.children[i];\n\n\t        if (test.className === \"\" || test.className === \"running\") {\n\t          test.className = \"aborted\";\n\t          assertList = test.getElementsByTagName(\"ol\")[0];\n\t          assertLi = document.createElement(\"li\");\n\t          assertLi.className = \"fail\";\n\t          assertLi.innerHTML = \"Test aborted.\";\n\t          assertList.appendChild(assertLi);\n\t        }\n\t      }\n\t    }\n\n\t    if (banner && (!abortButton || abortButton.disabled === false)) {\n\t      banner.className = stats.failedTests ? \"qunit-fail\" : \"qunit-pass\";\n\t    }\n\n\t    if (abortButton) {\n\t      abortButton.parentNode.removeChild(abortButton);\n\t    }\n\n\t    if (tests) {\n\t      id(\"qunit-testresult-display\").innerHTML = html;\n\t    }\n\n\t    if (config.altertitle && document.title) {\n\t      // Show ✖ for good, ✔ for bad suite result in title\n\t      // use escape sequences in case file gets loaded with non-utf-8\n\t      // charset\n\t      document.title = [stats.failedTests ? \"\\u2716\" : \"\\u2714\", document.title.replace(/^[\\u2714\\u2716] /i, \"\")].join(\" \");\n\t    } // Scroll back to top to show results\n\n\n\t    if (config.scrolltop && window$1.scrollTo) {\n\t      window$1.scrollTo(0, 0);\n\t    }\n\t  });\n\n\t  function getNameHtml(name, module) {\n\t    var nameHtml = \"\";\n\n\t    if (module) {\n\t      nameHtml = \"<span class='module-name'>\" + escapeText(module) + \"</span>: \";\n\t    }\n\n\t    nameHtml += \"<span class='test-name'>\" + escapeText(name) + \"</span>\";\n\t    return nameHtml;\n\t  }\n\n\t  function getProgressHtml(runtime, stats, total) {\n\t    var completed = stats.passedTests + stats.skippedTests + stats.todoTests + stats.failedTests;\n\t    return [\"<br />\", completed, \" / \", total, \" tests completed in \", runtime, \" milliseconds, with \", stats.failedTests, \" failed, \", stats.skippedTests, \" skipped, and \", stats.todoTests, \" todo.\"].join(\"\");\n\t  }\n\n\t  QUnit.testStart(function (details) {\n\t    var running, bad;\n\t    appendTest(details.name, details.testId, details.module);\n\t    running = id(\"qunit-testresult-display\");\n\n\t    if (running) {\n\t      addClass(running, \"running\");\n\t      bad = QUnit.config.reorder && details.previousFailure;\n\t      running.innerHTML = [bad ? \"Rerunning previously failed test: <br />\" : \"Running: <br />\", getNameHtml(details.name, details.module), getProgressHtml(now() - config.started, stats, Test.count)].join(\"\");\n\t    }\n\t  });\n\n\t  function stripHtml(string) {\n\t    // Strip tags, html entity and whitespaces\n\t    return string.replace(/<\\/?[^>]+(>|$)/g, \"\").replace(/&quot;/g, \"\").replace(/\\s+/g, \"\");\n\t  }\n\n\t  QUnit.log(function (details) {\n\t    var assertList,\n\t        assertLi,\n\t        message,\n\t        expected,\n\t        actual,\n\t        diff,\n\t        showDiff = false,\n\t        testItem = id(\"qunit-test-output-\" + details.testId);\n\n\t    if (!testItem) {\n\t      return;\n\t    }\n\n\t    message = escapeText(details.message) || (details.result ? \"okay\" : \"failed\");\n\t    message = \"<span class='test-message'>\" + message + \"</span>\";\n\t    message += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\"; // The pushFailure doesn't provide details.expected\n\t    // when it calls, it's implicit to also not show expected and diff stuff\n\t    // Also, we need to check details.expected existence, as it can exist and be undefined\n\n\t    if (!details.result && hasOwn.call(details, \"expected\")) {\n\t      if (details.negative) {\n\t        expected = \"NOT \" + QUnit.dump.parse(details.expected);\n\t      } else {\n\t        expected = QUnit.dump.parse(details.expected);\n\t      }\n\n\t      actual = QUnit.dump.parse(details.actual);\n\t      message += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" + escapeText(expected) + \"</pre></td></tr>\";\n\n\t      if (actual !== expected) {\n\t        message += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + escapeText(actual) + \"</pre></td></tr>\";\n\n\t        if (typeof details.actual === \"number\" && typeof details.expected === \"number\") {\n\t          if (!isNaN(details.actual) && !isNaN(details.expected)) {\n\t            showDiff = true;\n\t            diff = details.actual - details.expected;\n\t            diff = (diff > 0 ? \"+\" : \"\") + diff;\n\t          }\n\t        } else if (typeof details.actual !== \"boolean\" && typeof details.expected !== \"boolean\") {\n\t          diff = QUnit.diff(expected, actual); // don't show diff if there is zero overlap\n\n\t          showDiff = stripHtml(diff).length !== stripHtml(expected).length + stripHtml(actual).length;\n\t        }\n\n\t        if (showDiff) {\n\t          message += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" + diff + \"</pre></td></tr>\";\n\t        }\n\t      } else if (expected.indexOf(\"[object Array]\") !== -1 || expected.indexOf(\"[object Object]\") !== -1) {\n\t        message += \"<tr class='test-message'><th>Message: </th><td>\" + \"Diff suppressed as the depth of object is more than current max depth (\" + QUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" + \" run with a higher max depth or <a href='\" + escapeText(setUrl({\n\t          maxDepth: -1\n\t        })) + \"'>\" + \"Rerun</a> without max depth.</p></td></tr>\";\n\t      } else {\n\t        message += \"<tr class='test-message'><th>Message: </th><td>\" + \"Diff suppressed as the expected and actual results have an equivalent\" + \" serialization</td></tr>\";\n\t      }\n\n\t      if (details.source) {\n\t        message += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeText(details.source) + \"</pre></td></tr>\";\n\t      }\n\n\t      message += \"</table>\"; // This occurs when pushFailure is set and we have an extracted stack trace\n\t    } else if (!details.result && details.source) {\n\t      message += \"<table>\" + \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeText(details.source) + \"</pre></td></tr>\" + \"</table>\";\n\t    }\n\n\t    assertList = testItem.getElementsByTagName(\"ol\")[0];\n\t    assertLi = document.createElement(\"li\");\n\t    assertLi.className = details.result ? \"pass\" : \"fail\";\n\t    assertLi.innerHTML = message;\n\t    assertList.appendChild(assertLi);\n\t  });\n\t  QUnit.testDone(function (details) {\n\t    var testTitle,\n\t        time,\n\t        testItem,\n\t        assertList,\n\t        status,\n\t        good,\n\t        bad,\n\t        testCounts,\n\t        skipped,\n\t        sourceName,\n\t        tests = id(\"qunit-tests\");\n\n\t    if (!tests) {\n\t      return;\n\t    }\n\n\t    testItem = id(\"qunit-test-output-\" + details.testId);\n\t    removeClass(testItem, \"running\");\n\n\t    if (details.failed > 0) {\n\t      status = \"failed\";\n\t    } else if (details.todo) {\n\t      status = \"todo\";\n\t    } else {\n\t      status = details.skipped ? \"skipped\" : \"passed\";\n\t    }\n\n\t    assertList = testItem.getElementsByTagName(\"ol\")[0];\n\t    good = details.passed;\n\t    bad = details.failed; // This test passed if it has no unexpected failed assertions\n\n\t    var testPassed = details.failed > 0 ? details.todo : !details.todo;\n\n\t    if (testPassed) {\n\t      // Collapse the passing tests\n\t      addClass(assertList, \"qunit-collapsed\");\n\t    } else if (config.collapse) {\n\t      if (!collapseNext) {\n\t        // Skip collapsing the first failing test\n\t        collapseNext = true;\n\t      } else {\n\t        // Collapse remaining tests\n\t        addClass(assertList, \"qunit-collapsed\");\n\t      }\n\t    } // The testItem.firstChild is the test name\n\n\n\t    testTitle = testItem.firstChild;\n\t    testCounts = bad ? \"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" : \"\";\n\t    testTitle.innerHTML += \" <b class='counts'>(\" + testCounts + details.assertions.length + \")</b>\";\n\n\t    if (details.skipped) {\n\t      stats.skippedTests++;\n\t      testItem.className = \"skipped\";\n\t      skipped = document.createElement(\"em\");\n\t      skipped.className = \"qunit-skipped-label\";\n\t      skipped.innerHTML = \"skipped\";\n\t      testItem.insertBefore(skipped, testTitle);\n\t    } else {\n\t      addEvent(testTitle, \"click\", function () {\n\t        toggleClass(assertList, \"qunit-collapsed\");\n\t      });\n\t      testItem.className = testPassed ? \"pass\" : \"fail\";\n\n\t      if (details.todo) {\n\t        var todoLabel = document.createElement(\"em\");\n\t        todoLabel.className = \"qunit-todo-label\";\n\t        todoLabel.innerHTML = \"todo\";\n\t        testItem.className += \" todo\";\n\t        testItem.insertBefore(todoLabel, testTitle);\n\t      }\n\n\t      time = document.createElement(\"span\");\n\t      time.className = \"runtime\";\n\t      time.innerHTML = details.runtime + \" ms\";\n\t      testItem.insertBefore(time, assertList);\n\n\t      if (!testPassed) {\n\t        stats.failedTests++;\n\t      } else if (details.todo) {\n\t        stats.todoTests++;\n\t      } else {\n\t        stats.passedTests++;\n\t      }\n\t    } // Show the source of the test when showing assertions\n\n\n\t    if (details.source) {\n\t      sourceName = document.createElement(\"p\");\n\t      sourceName.innerHTML = \"<strong>Source: </strong>\" + escapeText(details.source);\n\t      addClass(sourceName, \"qunit-source\");\n\n\t      if (testPassed) {\n\t        addClass(sourceName, \"qunit-collapsed\");\n\t      }\n\n\t      addEvent(testTitle, \"click\", function () {\n\t        toggleClass(sourceName, \"qunit-collapsed\");\n\t      });\n\t      testItem.appendChild(sourceName);\n\t    }\n\n\t    if (config.hidepassed && (status === \"passed\" || details.skipped)) {\n\t      // use removeChild instead of remove because of support\n\t      hiddenTests.push(testItem);\n\t      tests.removeChild(testItem);\n\t    }\n\t  }); // Avoid readyState issue with phantomjs\n\t  // Ref: #818\n\n\t  var usingPhantom = function (p) {\n\t    return p && p.version && p.version.major > 0;\n\t  }(window$1.phantom);\n\n\t  if (usingPhantom) {\n\t    console$1.warn(\"Support for PhantomJS is deprecated and will be removed in QUnit 3.0.\");\n\t  }\n\n\t  if (!usingPhantom && document.readyState === \"complete\") {\n\t    QUnit.load();\n\t  } else {\n\t    addEvent(window$1, \"load\", QUnit.load);\n\t  } // Wrap window.onerror. We will call the original window.onerror to see if\n\t  // the existing handler fully handles the error; if not, we will call the\n\t  // QUnit.onError function.\n\n\n\t  var originalWindowOnError = window$1.onerror; // Cover uncaught exceptions\n\t  // Returning true will suppress the default browser handler,\n\t  // returning false will let it run.\n\n\t  window$1.onerror = function (message, fileName, lineNumber, columnNumber, errorObj) {\n\t    var ret = false;\n\n\t    if (originalWindowOnError) {\n\t      for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n\t        args[_key - 5] = arguments[_key];\n\t      }\n\n\t      ret = originalWindowOnError.call.apply(originalWindowOnError, [this, message, fileName, lineNumber, columnNumber, errorObj].concat(args));\n\t    } // Treat return value as window.onerror itself does,\n\t    // Only do our handling if not suppressed.\n\n\n\t    if (ret !== true) {\n\t      var error = {\n\t        message: message,\n\t        fileName: fileName,\n\t        lineNumber: lineNumber\n\t      }; // According to\n\t      // https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror,\n\t      // most modern browsers support an errorObj argument; use that to\n\t      // get a full stack trace if it's available.\n\n\t      if (errorObj && errorObj.stack) {\n\t        error.stacktrace = extractStacktrace(errorObj, 0);\n\t      }\n\n\t      ret = QUnit.onError(error);\n\t    }\n\n\t    return ret;\n\t  }; // Listen for unhandled rejections, and call QUnit.onUnhandledRejection\n\n\n\t  window$1.addEventListener(\"unhandledrejection\", function (event) {\n\t    QUnit.onUnhandledRejection(event.reason);\n\t  });\n\t})();\n\n\t/*\n\t * This file is a modified version of google-diff-match-patch's JavaScript implementation\n\t * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n\t * modifications are licensed as more fully set forth in LICENSE.txt.\n\t *\n\t * The original source of google-diff-match-patch is attributable and licensed as follows:\n\t *\n\t * Copyright 2006 Google Inc.\n\t * https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * https://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t * More Info:\n\t *  https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Usage: QUnit.diff(expected, actual)\n\t *\n\t */\n\n\tQUnit.diff = function () {\n\t  function DiffMatchPatch() {} //  DIFF FUNCTIONS\n\n\t  /**\n\t   * The data structure representing a diff is an array of tuples:\n\t   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t   */\n\n\n\t  var DIFF_DELETE = -1,\n\t      DIFF_INSERT = 1,\n\t      DIFF_EQUAL = 0,\n\t      hasOwn = Object.prototype.hasOwnProperty;\n\t  /**\n\t   * Find the differences between two texts.  Simplifies the problem by stripping\n\t   * any common prefix or suffix off the texts before diffing.\n\t   * @param {string} text1 Old string to be diffed.\n\t   * @param {string} text2 New string to be diffed.\n\t   * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t   *     then don't run a line-level diff first to identify the changed areas.\n\t   *     Defaults to true, which does a faster, slightly less optimal diff.\n\t   * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t   */\n\n\t  DiffMatchPatch.prototype.DiffMain = function (text1, text2, optChecklines) {\n\t    var deadline, checklines, commonlength, commonprefix, commonsuffix, diffs; // The diff must be complete in up to 1 second.\n\n\t    deadline = new Date().getTime() + 1000; // Check for null inputs.\n\n\t    if (text1 === null || text2 === null) {\n\t      throw new Error(\"Null input. (DiffMain)\");\n\t    } // Check for equality (speedup).\n\n\n\t    if (text1 === text2) {\n\t      if (text1) {\n\t        return [[DIFF_EQUAL, text1]];\n\t      }\n\n\t      return [];\n\t    }\n\n\t    if (typeof optChecklines === \"undefined\") {\n\t      optChecklines = true;\n\t    }\n\n\t    checklines = optChecklines; // Trim off common prefix (speedup).\n\n\t    commonlength = this.diffCommonPrefix(text1, text2);\n\t    commonprefix = text1.substring(0, commonlength);\n\t    text1 = text1.substring(commonlength);\n\t    text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n\t    commonlength = this.diffCommonSuffix(text1, text2);\n\t    commonsuffix = text1.substring(text1.length - commonlength);\n\t    text1 = text1.substring(0, text1.length - commonlength);\n\t    text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n\t    diffs = this.diffCompute(text1, text2, checklines, deadline); // Restore the prefix and suffix.\n\n\t    if (commonprefix) {\n\t      diffs.unshift([DIFF_EQUAL, commonprefix]);\n\t    }\n\n\t    if (commonsuffix) {\n\t      diffs.push([DIFF_EQUAL, commonsuffix]);\n\t    }\n\n\t    this.diffCleanupMerge(diffs);\n\t    return diffs;\n\t  };\n\t  /**\n\t   * Reduce the number of edits by eliminating operationally trivial equalities.\n\t   * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCleanupEfficiency = function (diffs) {\n\t    var changes, equalities, equalitiesLength, lastequality, pointer, preIns, preDel, postIns, postDel;\n\t    changes = false;\n\t    equalities = []; // Stack of indices where equalities are found.\n\n\t    equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n\t    /** @type {?string} */\n\n\t    lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n\t    pointer = 0; // Index of current position.\n\t    // Is there an insertion operation before the last equality.\n\n\t    preIns = false; // Is there a deletion operation before the last equality.\n\n\t    preDel = false; // Is there an insertion operation after the last equality.\n\n\t    postIns = false; // Is there a deletion operation after the last equality.\n\n\t    postDel = false;\n\n\t    while (pointer < diffs.length) {\n\t      // Equality found.\n\t      if (diffs[pointer][0] === DIFF_EQUAL) {\n\t        if (diffs[pointer][1].length < 4 && (postIns || postDel)) {\n\t          // Candidate found.\n\t          equalities[equalitiesLength++] = pointer;\n\t          preIns = postIns;\n\t          preDel = postDel;\n\t          lastequality = diffs[pointer][1];\n\t        } else {\n\t          // Not a candidate, and can never become one.\n\t          equalitiesLength = 0;\n\t          lastequality = null;\n\t        }\n\n\t        postIns = postDel = false; // An insertion or deletion.\n\t      } else {\n\t        if (diffs[pointer][0] === DIFF_DELETE) {\n\t          postDel = true;\n\t        } else {\n\t          postIns = true;\n\t        }\n\t        /*\n\t         * Five types to be split:\n\t         * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t         * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t         * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t         * <ins>A</del>X<ins>C</ins><del>D</del>\n\t         * <ins>A</ins><del>B</del>X<del>C</del>\n\t         */\n\n\n\t        if (lastequality && (preIns && preDel && postIns && postDel || lastequality.length < 2 && preIns + preDel + postIns + postDel === 3)) {\n\t          // Duplicate record.\n\t          diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n\t          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n\t          equalitiesLength--; // Throw away the equality we just deleted;\n\n\t          lastequality = null;\n\n\t          if (preIns && preDel) {\n\t            // No changes made which could affect previous entry, keep going.\n\t            postIns = postDel = true;\n\t            equalitiesLength = 0;\n\t          } else {\n\t            equalitiesLength--; // Throw away the previous equality.\n\n\t            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n\t            postIns = postDel = false;\n\t          }\n\n\t          changes = true;\n\t        }\n\t      }\n\n\t      pointer++;\n\t    }\n\n\t    if (changes) {\n\t      this.diffCleanupMerge(diffs);\n\t    }\n\t  };\n\t  /**\n\t   * Convert a diff array into a pretty HTML report.\n\t   * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t   * @param {integer} string to be beautified.\n\t   * @return {string} HTML representation.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffPrettyHtml = function (diffs) {\n\t    var op,\n\t        data,\n\t        x,\n\t        html = [];\n\n\t    for (x = 0; x < diffs.length; x++) {\n\t      op = diffs[x][0]; // Operation (insert, delete, equal)\n\n\t      data = diffs[x][1]; // Text of change.\n\n\t      switch (op) {\n\t        case DIFF_INSERT:\n\t          html[x] = \"<ins>\" + escapeText(data) + \"</ins>\";\n\t          break;\n\n\t        case DIFF_DELETE:\n\t          html[x] = \"<del>\" + escapeText(data) + \"</del>\";\n\t          break;\n\n\t        case DIFF_EQUAL:\n\t          html[x] = \"<span>\" + escapeText(data) + \"</span>\";\n\t          break;\n\t      }\n\t    }\n\n\t    return html.join(\"\");\n\t  };\n\t  /**\n\t   * Determine the common prefix of two strings.\n\t   * @param {string} text1 First string.\n\t   * @param {string} text2 Second string.\n\t   * @return {number} The number of characters common to the start of each\n\t   *     string.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCommonPrefix = function (text1, text2) {\n\t    var pointermid, pointermax, pointermin, pointerstart; // Quick check for common null cases.\n\n\t    if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n\t      return 0;\n\t    } // Binary search.\n\t    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\n\n\t    pointermin = 0;\n\t    pointermax = Math.min(text1.length, text2.length);\n\t    pointermid = pointermax;\n\t    pointerstart = 0;\n\n\t    while (pointermin < pointermid) {\n\t      if (text1.substring(pointerstart, pointermid) === text2.substring(pointerstart, pointermid)) {\n\t        pointermin = pointermid;\n\t        pointerstart = pointermin;\n\t      } else {\n\t        pointermax = pointermid;\n\t      }\n\n\t      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t    }\n\n\t    return pointermid;\n\t  };\n\t  /**\n\t   * Determine the common suffix of two strings.\n\t   * @param {string} text1 First string.\n\t   * @param {string} text2 Second string.\n\t   * @return {number} The number of characters common to the end of each string.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCommonSuffix = function (text1, text2) {\n\t    var pointermid, pointermax, pointermin, pointerend; // Quick check for common null cases.\n\n\t    if (!text1 || !text2 || text1.charAt(text1.length - 1) !== text2.charAt(text2.length - 1)) {\n\t      return 0;\n\t    } // Binary search.\n\t    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\n\n\t    pointermin = 0;\n\t    pointermax = Math.min(text1.length, text2.length);\n\t    pointermid = pointermax;\n\t    pointerend = 0;\n\n\t    while (pointermin < pointermid) {\n\t      if (text1.substring(text1.length - pointermid, text1.length - pointerend) === text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n\t        pointermin = pointermid;\n\t        pointerend = pointermin;\n\t      } else {\n\t        pointermax = pointermid;\n\t      }\n\n\t      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t    }\n\n\t    return pointermid;\n\t  };\n\t  /**\n\t   * Find the differences between two texts.  Assumes that the texts do not\n\t   * have any common prefix or suffix.\n\t   * @param {string} text1 Old string to be diffed.\n\t   * @param {string} text2 New string to be diffed.\n\t   * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t   *     line-level diff first to identify the changed areas.\n\t   *     If true, then run a faster, slightly less optimal diff.\n\t   * @param {number} deadline Time when the diff should be complete by.\n\t   * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCompute = function (text1, text2, checklines, deadline) {\n\t    var diffs, longtext, shorttext, i, hm, text1A, text2A, text1B, text2B, midCommon, diffsA, diffsB;\n\n\t    if (!text1) {\n\t      // Just add some text (speedup).\n\t      return [[DIFF_INSERT, text2]];\n\t    }\n\n\t    if (!text2) {\n\t      // Just delete some text (speedup).\n\t      return [[DIFF_DELETE, text1]];\n\t    }\n\n\t    longtext = text1.length > text2.length ? text1 : text2;\n\t    shorttext = text1.length > text2.length ? text2 : text1;\n\t    i = longtext.indexOf(shorttext);\n\n\t    if (i !== -1) {\n\t      // Shorter text is inside the longer text (speedup).\n\t      diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.\n\n\t      if (text1.length > text2.length) {\n\t        diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n\t      }\n\n\t      return diffs;\n\t    }\n\n\t    if (shorttext.length === 1) {\n\t      // Single character string.\n\t      // After the previous speedup, the character can't be an equality.\n\t      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t    } // Check to see if the problem can be split in two.\n\n\n\t    hm = this.diffHalfMatch(text1, text2);\n\n\t    if (hm) {\n\t      // A half-match was found, sort out the return data.\n\t      text1A = hm[0];\n\t      text1B = hm[1];\n\t      text2A = hm[2];\n\t      text2B = hm[3];\n\t      midCommon = hm[4]; // Send both pairs off for separate processing.\n\n\t      diffsA = this.DiffMain(text1A, text2A, checklines, deadline);\n\t      diffsB = this.DiffMain(text1B, text2B, checklines, deadline); // Merge the results.\n\n\t      return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n\t    }\n\n\t    if (checklines && text1.length > 100 && text2.length > 100) {\n\t      return this.diffLineMode(text1, text2, deadline);\n\t    }\n\n\t    return this.diffBisect(text1, text2, deadline);\n\t  };\n\t  /**\n\t   * Do the two texts share a substring which is at least half the length of the\n\t   * longer text?\n\t   * This speedup can produce non-minimal diffs.\n\t   * @param {string} text1 First string.\n\t   * @param {string} text2 Second string.\n\t   * @return {Array.<string>} Five element Array, containing the prefix of\n\t   *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t   *     text2 and the common middle.  Or null if there was no match.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffHalfMatch = function (text1, text2) {\n\t    var longtext, shorttext, dmp, text1A, text2B, text2A, text1B, midCommon, hm1, hm2, hm;\n\t    longtext = text1.length > text2.length ? text1 : text2;\n\t    shorttext = text1.length > text2.length ? text2 : text1;\n\n\t    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n\t      return null; // Pointless.\n\t    }\n\n\t    dmp = this; // 'this' becomes 'window' in a closure.\n\n\t    /**\n\t     * Does a substring of shorttext exist within longtext such that the substring\n\t     * is at least half the length of longtext?\n\t     * Closure, but does not reference any external variables.\n\t     * @param {string} longtext Longer string.\n\t     * @param {string} shorttext Shorter string.\n\t     * @param {number} i Start index of quarter length substring within longtext.\n\t     * @return {Array.<string>} Five element Array, containing the prefix of\n\t     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t     *     of shorttext and the common middle.  Or null if there was no match.\n\t     * @private\n\t     */\n\n\t    function diffHalfMatchI(longtext, shorttext, i) {\n\t      var seed, j, bestCommon, prefixLength, suffixLength, bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB; // Start with a 1/4 length substring at position i as a seed.\n\n\t      seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n\t      j = -1;\n\t      bestCommon = \"\";\n\n\t      while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n\t        prefixLength = dmp.diffCommonPrefix(longtext.substring(i), shorttext.substring(j));\n\t        suffixLength = dmp.diffCommonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n\t        if (bestCommon.length < suffixLength + prefixLength) {\n\t          bestCommon = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n\t          bestLongtextA = longtext.substring(0, i - suffixLength);\n\t          bestLongtextB = longtext.substring(i + prefixLength);\n\t          bestShorttextA = shorttext.substring(0, j - suffixLength);\n\t          bestShorttextB = shorttext.substring(j + prefixLength);\n\t        }\n\t      }\n\n\t      if (bestCommon.length * 2 >= longtext.length) {\n\t        return [bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB, bestCommon];\n\t      } else {\n\t        return null;\n\t      }\n\t    } // First check if the second quarter is the seed for a half-match.\n\n\n\t    hm1 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n\t    hm2 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 2));\n\n\t    if (!hm1 && !hm2) {\n\t      return null;\n\t    } else if (!hm2) {\n\t      hm = hm1;\n\t    } else if (!hm1) {\n\t      hm = hm2;\n\t    } else {\n\t      // Both matched.  Select the longest.\n\t      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n\t    } // A half-match was found, sort out the return data.\n\n\n\t    if (text1.length > text2.length) {\n\t      text1A = hm[0];\n\t      text1B = hm[1];\n\t      text2A = hm[2];\n\t      text2B = hm[3];\n\t    } else {\n\t      text2A = hm[0];\n\t      text2B = hm[1];\n\t      text1A = hm[2];\n\t      text1B = hm[3];\n\t    }\n\n\t    midCommon = hm[4];\n\t    return [text1A, text1B, text2A, text2B, midCommon];\n\t  };\n\t  /**\n\t   * Do a quick line-level diff on both strings, then rediff the parts for\n\t   * greater accuracy.\n\t   * This speedup can produce non-minimal diffs.\n\t   * @param {string} text1 Old string to be diffed.\n\t   * @param {string} text2 New string to be diffed.\n\t   * @param {number} deadline Time when the diff should be complete by.\n\t   * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffLineMode = function (text1, text2, deadline) {\n\t    var a, diffs, linearray, pointer, countInsert, countDelete, textInsert, textDelete, j; // Scan the text on a line-by-line basis first.\n\n\t    a = this.diffLinesToChars(text1, text2);\n\t    text1 = a.chars1;\n\t    text2 = a.chars2;\n\t    linearray = a.lineArray;\n\t    diffs = this.DiffMain(text1, text2, false, deadline); // Convert the diff back to original text.\n\n\t    this.diffCharsToLines(diffs, linearray); // Eliminate freak matches (e.g. blank lines)\n\n\t    this.diffCleanupSemantic(diffs); // Rediff any replacement blocks, this time character-by-character.\n\t    // Add a dummy entry at the end.\n\n\t    diffs.push([DIFF_EQUAL, \"\"]);\n\t    pointer = 0;\n\t    countDelete = 0;\n\t    countInsert = 0;\n\t    textDelete = \"\";\n\t    textInsert = \"\";\n\n\t    while (pointer < diffs.length) {\n\t      switch (diffs[pointer][0]) {\n\t        case DIFF_INSERT:\n\t          countInsert++;\n\t          textInsert += diffs[pointer][1];\n\t          break;\n\n\t        case DIFF_DELETE:\n\t          countDelete++;\n\t          textDelete += diffs[pointer][1];\n\t          break;\n\n\t        case DIFF_EQUAL:\n\t          // Upon reaching an equality, check for prior redundancies.\n\t          if (countDelete >= 1 && countInsert >= 1) {\n\t            // Delete the offending records and add the merged ones.\n\t            diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n\t            pointer = pointer - countDelete - countInsert;\n\t            a = this.DiffMain(textDelete, textInsert, false, deadline);\n\n\t            for (j = a.length - 1; j >= 0; j--) {\n\t              diffs.splice(pointer, 0, a[j]);\n\t            }\n\n\t            pointer = pointer + a.length;\n\t          }\n\n\t          countInsert = 0;\n\t          countDelete = 0;\n\t          textDelete = \"\";\n\t          textInsert = \"\";\n\t          break;\n\t      }\n\n\t      pointer++;\n\t    }\n\n\t    diffs.pop(); // Remove the dummy entry at the end.\n\n\t    return diffs;\n\t  };\n\t  /**\n\t   * Find the 'middle snake' of a diff, split the problem in two\n\t   * and return the recursively constructed diff.\n\t   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t   * @param {string} text1 Old string to be diffed.\n\t   * @param {string} text2 New string to be diffed.\n\t   * @param {number} deadline Time at which to bail if not yet complete.\n\t   * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffBisect = function (text1, text2, deadline) {\n\t    var text1Length, text2Length, maxD, vOffset, vLength, v1, v2, x, delta, front, k1start, k1end, k2start, k2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2; // Cache the text lengths to prevent multiple calls.\n\n\t    text1Length = text1.length;\n\t    text2Length = text2.length;\n\t    maxD = Math.ceil((text1Length + text2Length) / 2);\n\t    vOffset = maxD;\n\t    vLength = 2 * maxD;\n\t    v1 = new Array(vLength);\n\t    v2 = new Array(vLength); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t    // integers and undefined.\n\n\t    for (x = 0; x < vLength; x++) {\n\t      v1[x] = -1;\n\t      v2[x] = -1;\n\t    }\n\n\t    v1[vOffset + 1] = 0;\n\t    v2[vOffset + 1] = 0;\n\t    delta = text1Length - text2Length; // If the total number of characters is odd, then the front path will collide\n\t    // with the reverse path.\n\n\t    front = delta % 2 !== 0; // Offsets for start and end of k loop.\n\t    // Prevents mapping of space beyond the grid.\n\n\t    k1start = 0;\n\t    k1end = 0;\n\t    k2start = 0;\n\t    k2end = 0;\n\n\t    for (d = 0; d < maxD; d++) {\n\t      // Bail out if deadline is reached.\n\t      if (new Date().getTime() > deadline) {\n\t        break;\n\t      } // Walk the front path one step.\n\n\n\t      for (k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n\t        k1Offset = vOffset + k1;\n\n\t        if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n\t          x1 = v1[k1Offset + 1];\n\t        } else {\n\t          x1 = v1[k1Offset - 1] + 1;\n\t        }\n\n\t        y1 = x1 - k1;\n\n\t        while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n\t          x1++;\n\t          y1++;\n\t        }\n\n\t        v1[k1Offset] = x1;\n\n\t        if (x1 > text1Length) {\n\t          // Ran off the right of the graph.\n\t          k1end += 2;\n\t        } else if (y1 > text2Length) {\n\t          // Ran off the bottom of the graph.\n\t          k1start += 2;\n\t        } else if (front) {\n\t          k2Offset = vOffset + delta - k1;\n\n\t          if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n\t            // Mirror x2 onto top-left coordinate system.\n\t            x2 = text1Length - v2[k2Offset];\n\n\t            if (x1 >= x2) {\n\t              // Overlap detected.\n\t              return this.diffBisectSplit(text1, text2, x1, y1, deadline);\n\t            }\n\t          }\n\t        }\n\t      } // Walk the reverse path one step.\n\n\n\t      for (k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n\t        k2Offset = vOffset + k2;\n\n\t        if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n\t          x2 = v2[k2Offset + 1];\n\t        } else {\n\t          x2 = v2[k2Offset - 1] + 1;\n\t        }\n\n\t        y2 = x2 - k2;\n\n\t        while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n\t          x2++;\n\t          y2++;\n\t        }\n\n\t        v2[k2Offset] = x2;\n\n\t        if (x2 > text1Length) {\n\t          // Ran off the left of the graph.\n\t          k2end += 2;\n\t        } else if (y2 > text2Length) {\n\t          // Ran off the top of the graph.\n\t          k2start += 2;\n\t        } else if (!front) {\n\t          k1Offset = vOffset + delta - k2;\n\n\t          if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n\t            x1 = v1[k1Offset];\n\t            y1 = vOffset + x1 - k1Offset; // Mirror x2 onto top-left coordinate system.\n\n\t            x2 = text1Length - x2;\n\n\t            if (x1 >= x2) {\n\t              // Overlap detected.\n\t              return this.diffBisectSplit(text1, text2, x1, y1, deadline);\n\t            }\n\t          }\n\t        }\n\t      }\n\t    } // Diff took too long and hit the deadline or\n\t    // number of diffs equals number of characters, no commonality at all.\n\n\n\t    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t  };\n\t  /**\n\t   * Given the location of the 'middle snake', split the diff in two parts\n\t   * and recurse.\n\t   * @param {string} text1 Old string to be diffed.\n\t   * @param {string} text2 New string to be diffed.\n\t   * @param {number} x Index of split point in text1.\n\t   * @param {number} y Index of split point in text2.\n\t   * @param {number} deadline Time at which to bail if not yet complete.\n\t   * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffBisectSplit = function (text1, text2, x, y, deadline) {\n\t    var text1a, text1b, text2a, text2b, diffs, diffsb;\n\t    text1a = text1.substring(0, x);\n\t    text2a = text2.substring(0, y);\n\t    text1b = text1.substring(x);\n\t    text2b = text2.substring(y); // Compute both diffs serially.\n\n\t    diffs = this.DiffMain(text1a, text2a, false, deadline);\n\t    diffsb = this.DiffMain(text1b, text2b, false, deadline);\n\t    return diffs.concat(diffsb);\n\t  };\n\t  /**\n\t   * Reduce the number of edits by eliminating semantically trivial equalities.\n\t   * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCleanupSemantic = function (diffs) {\n\t    var changes, equalities, equalitiesLength, lastequality, pointer, lengthInsertions2, lengthDeletions2, lengthInsertions1, lengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t    changes = false;\n\t    equalities = []; // Stack of indices where equalities are found.\n\n\t    equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n\t    /** @type {?string} */\n\n\t    lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n\t    pointer = 0; // Index of current position.\n\t    // Number of characters that changed prior to the equality.\n\n\t    lengthInsertions1 = 0;\n\t    lengthDeletions1 = 0; // Number of characters that changed after the equality.\n\n\t    lengthInsertions2 = 0;\n\t    lengthDeletions2 = 0;\n\n\t    while (pointer < diffs.length) {\n\t      if (diffs[pointer][0] === DIFF_EQUAL) {\n\t        // Equality found.\n\t        equalities[equalitiesLength++] = pointer;\n\t        lengthInsertions1 = lengthInsertions2;\n\t        lengthDeletions1 = lengthDeletions2;\n\t        lengthInsertions2 = 0;\n\t        lengthDeletions2 = 0;\n\t        lastequality = diffs[pointer][1];\n\t      } else {\n\t        // An insertion or deletion.\n\t        if (diffs[pointer][0] === DIFF_INSERT) {\n\t          lengthInsertions2 += diffs[pointer][1].length;\n\t        } else {\n\t          lengthDeletions2 += diffs[pointer][1].length;\n\t        } // Eliminate an equality that is smaller or equal to the edits on both\n\t        // sides of it.\n\n\n\t        if (lastequality && lastequality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastequality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n\t          // Duplicate record.\n\t          diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n\t          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT; // Throw away the equality we just deleted.\n\n\t          equalitiesLength--; // Throw away the previous equality (it needs to be reevaluated).\n\n\t          equalitiesLength--;\n\t          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1; // Reset the counters.\n\n\t          lengthInsertions1 = 0;\n\t          lengthDeletions1 = 0;\n\t          lengthInsertions2 = 0;\n\t          lengthDeletions2 = 0;\n\t          lastequality = null;\n\t          changes = true;\n\t        }\n\t      }\n\n\t      pointer++;\n\t    } // Normalize the diff.\n\n\n\t    if (changes) {\n\t      this.diffCleanupMerge(diffs);\n\t    } // Find any overlaps between deletions and insertions.\n\t    // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t    //   -> <del>abc</del>xxx<ins>def</ins>\n\t    // e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t    //   -> <ins>def</ins>xxx<del>abc</del>\n\t    // Only extract an overlap if it is as big as the edit ahead or behind it.\n\n\n\t    pointer = 1;\n\n\t    while (pointer < diffs.length) {\n\t      if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n\t        deletion = diffs[pointer - 1][1];\n\t        insertion = diffs[pointer][1];\n\t        overlapLength1 = this.diffCommonOverlap(deletion, insertion);\n\t        overlapLength2 = this.diffCommonOverlap(insertion, deletion);\n\n\t        if (overlapLength1 >= overlapLength2) {\n\t          if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n\t            // Overlap found.  Insert an equality and trim the surrounding edits.\n\t            diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n\t            diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n\t            diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n\t            pointer++;\n\t          }\n\t        } else {\n\t          if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n\t            // Reverse overlap found.\n\t            // Insert an equality and swap and trim the surrounding edits.\n\t            diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n\t            diffs[pointer - 1][0] = DIFF_INSERT;\n\t            diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n\t            diffs[pointer + 1][0] = DIFF_DELETE;\n\t            diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n\t            pointer++;\n\t          }\n\t        }\n\n\t        pointer++;\n\t      }\n\n\t      pointer++;\n\t    }\n\t  };\n\t  /**\n\t   * Determine if the suffix of one string is the prefix of another.\n\t   * @param {string} text1 First string.\n\t   * @param {string} text2 Second string.\n\t   * @return {number} The number of characters common to the end of the first\n\t   *     string and the start of the second string.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCommonOverlap = function (text1, text2) {\n\t    var text1Length, text2Length, textLength, best, length, pattern, found; // Cache the text lengths to prevent multiple calls.\n\n\t    text1Length = text1.length;\n\t    text2Length = text2.length; // Eliminate the null case.\n\n\t    if (text1Length === 0 || text2Length === 0) {\n\t      return 0;\n\t    } // Truncate the longer string.\n\n\n\t    if (text1Length > text2Length) {\n\t      text1 = text1.substring(text1Length - text2Length);\n\t    } else if (text1Length < text2Length) {\n\t      text2 = text2.substring(0, text1Length);\n\t    }\n\n\t    textLength = Math.min(text1Length, text2Length); // Quick check for the worst case.\n\n\t    if (text1 === text2) {\n\t      return textLength;\n\t    } // Start by looking for a single character match\n\t    // and increase length until no match is found.\n\t    // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\n\n\t    best = 0;\n\t    length = 1;\n\n\t    while (true) {\n\t      pattern = text1.substring(textLength - length);\n\t      found = text2.indexOf(pattern);\n\n\t      if (found === -1) {\n\t        return best;\n\t      }\n\n\t      length += found;\n\n\t      if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n\t        best = length;\n\t        length++;\n\t      }\n\t    }\n\t  };\n\t  /**\n\t   * Split two texts into an array of strings.  Reduce the texts to a string of\n\t   * hashes where each Unicode character represents one line.\n\t   * @param {string} text1 First string.\n\t   * @param {string} text2 Second string.\n\t   * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t   *     An object containing the encoded text1, the encoded text2 and\n\t   *     the array of unique strings.\n\t   *     The zeroth element of the array of unique strings is intentionally blank.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffLinesToChars = function (text1, text2) {\n\t    var lineArray, lineHash, chars1, chars2;\n\t    lineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\n\t    lineHash = {}; // E.g. lineHash['Hello\\n'] === 4\n\t    // '\\x00' is a valid character, but various debuggers don't like it.\n\t    // So we'll insert a junk entry to avoid generating a null character.\n\n\t    lineArray[0] = \"\";\n\t    /**\n\t     * Split a text into an array of strings.  Reduce the texts to a string of\n\t     * hashes where each Unicode character represents one line.\n\t     * Modifies linearray and linehash through being a closure.\n\t     * @param {string} text String to encode.\n\t     * @return {string} Encoded string.\n\t     * @private\n\t     */\n\n\t    function diffLinesToCharsMunge(text) {\n\t      var chars, lineStart, lineEnd, lineArrayLength, line;\n\t      chars = \"\"; // Walk the text, pulling out a substring for each line.\n\t      // text.split('\\n') would would temporarily double our memory footprint.\n\t      // Modifying text would create many large strings to garbage collect.\n\n\t      lineStart = 0;\n\t      lineEnd = -1; // Keeping our own length variable is faster than looking it up.\n\n\t      lineArrayLength = lineArray.length;\n\n\t      while (lineEnd < text.length - 1) {\n\t        lineEnd = text.indexOf(\"\\n\", lineStart);\n\n\t        if (lineEnd === -1) {\n\t          lineEnd = text.length - 1;\n\t        }\n\n\t        line = text.substring(lineStart, lineEnd + 1);\n\t        lineStart = lineEnd + 1;\n\n\t        if (hasOwn.call(lineHash, line)) {\n\t          chars += String.fromCharCode(lineHash[line]);\n\t        } else {\n\t          chars += String.fromCharCode(lineArrayLength);\n\t          lineHash[line] = lineArrayLength;\n\t          lineArray[lineArrayLength++] = line;\n\t        }\n\t      }\n\n\t      return chars;\n\t    }\n\n\t    chars1 = diffLinesToCharsMunge(text1);\n\t    chars2 = diffLinesToCharsMunge(text2);\n\t    return {\n\t      chars1: chars1,\n\t      chars2: chars2,\n\t      lineArray: lineArray\n\t    };\n\t  };\n\t  /**\n\t   * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t   * text.\n\t   * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t   * @param {!Array.<string>} lineArray Array of unique strings.\n\t   * @private\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCharsToLines = function (diffs, lineArray) {\n\t    var x, chars, text, y;\n\n\t    for (x = 0; x < diffs.length; x++) {\n\t      chars = diffs[x][1];\n\t      text = [];\n\n\t      for (y = 0; y < chars.length; y++) {\n\t        text[y] = lineArray[chars.charCodeAt(y)];\n\t      }\n\n\t      diffs[x][1] = text.join(\"\");\n\t    }\n\t  };\n\t  /**\n\t   * Reorder and merge like edit sections.  Merge equalities.\n\t   * Any edit section can move as long as it doesn't cross an equality.\n\t   * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t   */\n\n\n\t  DiffMatchPatch.prototype.diffCleanupMerge = function (diffs) {\n\t    var pointer, countDelete, countInsert, textInsert, textDelete, commonlength, changes, diffPointer, position;\n\t    diffs.push([DIFF_EQUAL, \"\"]); // Add a dummy entry at the end.\n\n\t    pointer = 0;\n\t    countDelete = 0;\n\t    countInsert = 0;\n\t    textDelete = \"\";\n\t    textInsert = \"\";\n\n\t    while (pointer < diffs.length) {\n\t      switch (diffs[pointer][0]) {\n\t        case DIFF_INSERT:\n\t          countInsert++;\n\t          textInsert += diffs[pointer][1];\n\t          pointer++;\n\t          break;\n\n\t        case DIFF_DELETE:\n\t          countDelete++;\n\t          textDelete += diffs[pointer][1];\n\t          pointer++;\n\t          break;\n\n\t        case DIFF_EQUAL:\n\t          // Upon reaching an equality, check for prior redundancies.\n\t          if (countDelete + countInsert > 1) {\n\t            if (countDelete !== 0 && countInsert !== 0) {\n\t              // Factor out any common prefixes.\n\t              commonlength = this.diffCommonPrefix(textInsert, textDelete);\n\n\t              if (commonlength !== 0) {\n\t                if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n\t                  diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n\t                } else {\n\t                  diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n\t                  pointer++;\n\t                }\n\n\t                textInsert = textInsert.substring(commonlength);\n\t                textDelete = textDelete.substring(commonlength);\n\t              } // Factor out any common suffixies.\n\n\n\t              commonlength = this.diffCommonSuffix(textInsert, textDelete);\n\n\t              if (commonlength !== 0) {\n\t                diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n\t                textInsert = textInsert.substring(0, textInsert.length - commonlength);\n\t                textDelete = textDelete.substring(0, textDelete.length - commonlength);\n\t              }\n\t            } // Delete the offending records and add the merged ones.\n\n\n\t            if (countDelete === 0) {\n\t              diffs.splice(pointer - countInsert, countDelete + countInsert, [DIFF_INSERT, textInsert]);\n\t            } else if (countInsert === 0) {\n\t              diffs.splice(pointer - countDelete, countDelete + countInsert, [DIFF_DELETE, textDelete]);\n\t            } else {\n\t              diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert, [DIFF_DELETE, textDelete], [DIFF_INSERT, textInsert]);\n\t            }\n\n\t            pointer = pointer - countDelete - countInsert + (countDelete ? 1 : 0) + (countInsert ? 1 : 0) + 1;\n\t          } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n\t            // Merge this equality with the previous one.\n\t            diffs[pointer - 1][1] += diffs[pointer][1];\n\t            diffs.splice(pointer, 1);\n\t          } else {\n\t            pointer++;\n\t          }\n\n\t          countInsert = 0;\n\t          countDelete = 0;\n\t          textDelete = \"\";\n\t          textInsert = \"\";\n\t          break;\n\t      }\n\t    }\n\n\t    if (diffs[diffs.length - 1][1] === \"\") {\n\t      diffs.pop(); // Remove the dummy entry at the end.\n\t    } // Second pass: look for single edits surrounded on both sides by equalities\n\t    // which can be shifted sideways to eliminate an equality.\n\t    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n\t    changes = false;\n\t    pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n\t    while (pointer < diffs.length - 1) {\n\t      if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n\t        diffPointer = diffs[pointer][1];\n\t        position = diffPointer.substring(diffPointer.length - diffs[pointer - 1][1].length); // This is a single edit surrounded by equalities.\n\n\t        if (position === diffs[pointer - 1][1]) {\n\t          // Shift the edit over the previous equality.\n\t          diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n\t          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n\t          diffs.splice(pointer - 1, 1);\n\t          changes = true;\n\t        } else if (diffPointer.substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n\t          // Shift the edit over the next equality.\n\t          diffs[pointer - 1][1] += diffs[pointer + 1][1];\n\t          diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n\t          diffs.splice(pointer + 1, 1);\n\t          changes = true;\n\t        }\n\t      }\n\n\t      pointer++;\n\t    } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n\t    if (changes) {\n\t      this.diffCleanupMerge(diffs);\n\t    }\n\t  };\n\n\t  return function (o, n) {\n\t    var diff, output, text;\n\t    diff = new DiffMatchPatch();\n\t    output = diff.DiffMain(o, n);\n\t    diff.diffCleanupEfficiency(output);\n\t    text = diff.diffPrettyHtml(output);\n\t    return text;\n\t  };\n\t}();\n\n}((function() { return this; }())));\n","QUnit.notifications = function( options ) {\n  \"use strict\";\n\n  options         = options         || {};\n  options.icons   = options.icons   || {};\n  options.timeout = options.timeout || 4000;\n  options.titles  = options.titles  || { passed: \"Passed!\", failed: \"Failed!\" };\n  options.bodies  = options.bodies  || {\n    passed: \"{{passed}} of {{total}} passed\",\n    failed: \"{{passed}} passed. {{failed}} failed.\"\n  };\n\n  var renderBody = function( body, details ) {\n    [ \"passed\", \"failed\", \"total\", \"runtime\" ].forEach( function( type ) {\n      body = body.replace( \"{{\" + type + \"}}\", details[ type ] );\n    } );\n\n    return body;\n  };\n\n  function generateQueryString( params ) {\n    var key,\n      querystring = \"?\";\n\n    params = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\n    for ( key in params ) {\n      if ( params.hasOwnProperty( key ) ) {\n        if ( params[ key ] === undefined ) {\n          continue;\n        }\n        querystring += encodeURIComponent( key );\n        if ( params[ key ] !== true ) {\n          querystring += \"=\" + encodeURIComponent( params[ key ] );\n        }\n        querystring += \"&\";\n      }\n    }\n    return location.protocol + \"//\" + location.host +\n      location.pathname + querystring.slice( 0, -1 );\n  }\n\n  if ( window.Notification ) {\n    QUnit.done( function( details ) {\n      var title,\n          _options = {},\n          notification;\n\n      if ( window.Notification && QUnit.urlParams.notifications ) {\n        if ( details.failed === 0 ) {\n          title = options.titles.passed;\n          _options.body = renderBody( options.bodies.passed, details );\n\n          if ( options.icons.passed ) {\n            _options.icon = options.icons.passed;\n          }\n        } else {\n          title = options.titles.failed;\n          _options.body = renderBody( options.bodies.failed, details );\n\n          if ( options.icons.failed ) {\n            _options.icon = options.icons.failed;\n          }\n        }\n\n        notification = new window.Notification( title, _options );\n\n        setTimeout( function() {\n          notification.close();\n        }, options.timeout );\n      }\n    } );\n\n    QUnit.begin( function() {\n      var toolbar      = document.getElementById( \"qunit-testrunner-toolbar\" );\n      if ( !toolbar ) { return; }\n\n      var notification = document.createElement( \"input\" ),\n          label        = document.createElement( \"label\" ),\n          disableCheckbox = function() {\n            notification.checked = false;\n            notification.disabled = true;\n            label.style.opacity = 0.5;\n            label.title = notification.title = \"Note: Notifications have been \" +\n              \"disabled in this browser.\";\n          };\n\n      notification.type = \"checkbox\";\n      notification.id   = \"qunit-notifications\";\n\n      label.innerHTML = \"Notifications\";\n      label.for = \"qunit-notifications\";\n      label.title = \"Show notifications.\";\n      if ( window.Notification.permission === \"denied\" ) {\n        disableCheckbox();\n      } else if ( QUnit.urlParams.notifications ) {\n        notification.checked = true;\n      }\n\n      notification.addEventListener( \"click\", function( event ) {\n        if ( event.target.checked ) {\n          if ( window.Notification.permission === \"granted\" ) {\n            window.location = generateQueryString( { notifications: true } );\n          } else if ( window.Notification.permission === \"denied\" ) {\n            disableCheckbox();\n          } else {\n            window.Notification.requestPermission( function( permission ) {\n              if ( permission === \"denied\" ) {\n                disableCheckbox();\n              } else {\n                window.location = generateQueryString( { notifications: true } );\n              }\n            } );\n          }\n        } else {\n          window.location = generateQueryString( { notifications: undefined } );\n        }\n      }, false );\n\n      toolbar.appendChild( notification );\n      toolbar.appendChild( label );\n   } );\n  }\n};\n","/* globals jQuery, QUnit */\n\n(function() {\n  QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});\n  QUnit.config.urlConfig.push({ id: 'nolint', label: 'Disable Linting'});\n  QUnit.config.urlConfig.push({ id: 'dockcontainer', label: 'Dock container'});\n  QUnit.config.urlConfig.push({ id: 'devmode', label: 'Development mode' });\n\n  QUnit.config.testTimeout = QUnit.urlParams.devmode ? null : 60000; //Default Test Timeout 60 Seconds\n\n  if (QUnit.notifications) {\n    QUnit.notifications({\n      icons: {\n        passed: '/assets/passed.png',\n        failed: '/assets/failed.png'\n      }\n    });\n  }\n\n  function ready(fn) {\n    if (typeof jQuery === 'function') {\n      jQuery(document).ready(fn);\n      return;\n    }\n\n    if (document.readyState != 'loading'){\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  }\n\n  ready(function() {\n    var testContainer = document.getElementById('ember-testing-container');\n    if (!testContainer) { return; }\n\n    var params = QUnit.urlParams;\n\n    var containerVisibility = params.nocontainer ? 'hidden' : 'visible';\n    var containerPosition = (params.dockcontainer || params.devmode) ? 'absolute' : 'relative';\n\n    if (params.devmode) {\n      testContainer.className = ' full-screen';\n    }\n\n    testContainer.style.visibility = containerVisibility;\n    testContainer.style.position = containerPosition;\n  });\n})();\n","/* globals jQuery, QUnit, require, requirejs */\n\n(function() {\n  function ready(fn) {\n    if (typeof jQuery === 'function') {\n      jQuery(document).ready(fn);\n      return;\n    }\n\n    if (document.readyState != 'loading'){\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  }\n  \n  var autostart = QUnit.config.autostart !== false;\n  QUnit.config.autostart = false;\n\n  ready(function() {\n    var QUnitAdapter = require('ember-qunit').QUnitAdapter;\n    Ember.Test.adapter = QUnitAdapter.create();\n\n    var testLoaderModulePath = 'ember-cli-test-loader/test-support/index';\n\n    if (!requirejs.entries[testLoaderModulePath]) {\n      testLoaderModulePath = 'ember-cli/test-loader';\n    }\n\n    var TestLoaderModule = require(testLoaderModulePath);\n    var TestLoader = TestLoaderModule['default'];\n    var addModuleExcludeMatcher = TestLoaderModule['addModuleExcludeMatcher'];\n    var addModuleIncludeMatcher = TestLoaderModule['addModuleIncludeMatcher'];\n\n    function excludeModule(moduleName) {\n      return QUnit.urlParams.nolint &&\n        moduleName.match(/\\.(jshint|lint-test)$/);\n    }\n\n    function includeModule(moduleName) {\n      return moduleName.match(/\\.jshint$/);\n    }\n\n    if (addModuleExcludeMatcher && addModuleIncludeMatcher) {\n      addModuleExcludeMatcher(excludeModule);\n      addModuleIncludeMatcher(includeModule);\n    } else {\n      TestLoader.prototype.shouldLoadModule = function shouldLoadModule(moduleName) {\n        return (moduleName.match(/[-_]test$/) || includeModule(moduleName)) && !excludeModule(moduleName);\n      };\n    }\n\n    var moduleLoadFailures = [];\n\n    TestLoader.prototype.moduleLoadFailure = function(moduleName, error) {\n      moduleLoadFailures.push(error);\n\n      QUnit.module('TestLoader Failures');\n      QUnit.test(moduleName + ': could not be loaded', function() {\n        throw error;\n      });\n    };\n\n    QUnit.done(function() {\n      if (moduleLoadFailures.length) {\n        throw new Error('\\n' + moduleLoadFailures.join('\\n'));\n      }\n    });\n\n    setTimeout(function() {\n      TestLoader.load();\n\n      if (autostart) {\n        QUnit.start();\n      }\n    }, 250);\n  });\n\n})();\n","define('ember-cli-test-loader/test-support/index', ['exports'], function (exports) {\n  /* globals requirejs, require */\n  \"use strict\";\n\n  exports.addModuleIncludeMatcher = addModuleIncludeMatcher;\n  exports.addModuleExcludeMatcher = addModuleExcludeMatcher;\n  exports['default'] = TestLoader;\n  var moduleIncludeMatchers = [];\n  var moduleExcludeMatchers = [];\n\n  function addModuleIncludeMatcher(fn) {\n    moduleIncludeMatchers.push(fn);\n  }\n\n  ;\n\n  function addModuleExcludeMatcher(fn) {\n    moduleExcludeMatchers.push(fn);\n  }\n\n  ;\n\n  function checkMatchers(matchers, moduleName) {\n    var matcher;\n\n    for (var i = 0, l = matchers.length; i < l; i++) {\n      matcher = matchers[i];\n\n      if (matcher(moduleName)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  function TestLoader() {\n    this._didLogMissingUnsee = false;\n  }\n\n  ;\n\n  TestLoader.prototype = {\n    shouldLoadModule: function shouldLoadModule(moduleName) {\n      return moduleName.match(/[-_]test$/);\n    },\n\n    listModules: function listModules() {\n      return Object.keys(requirejs.entries);\n    },\n\n    listTestModules: function listTestModules() {\n      var moduleNames = this.listModules();\n      var testModules = [];\n      var moduleName;\n\n      for (var i = 0; i < moduleNames.length; i++) {\n        moduleName = moduleNames[i];\n\n        if (checkMatchers(moduleExcludeMatchers, moduleName)) {\n          continue;\n        }\n\n        if (checkMatchers(moduleIncludeMatchers, moduleName) || this.shouldLoadModule(moduleName)) {\n          testModules.push(moduleName);\n        }\n      }\n\n      return testModules;\n    },\n\n    loadModules: function loadModules() {\n      var testModules = this.listTestModules();\n      var testModule;\n\n      for (var i = 0; i < testModules.length; i++) {\n        testModule = testModules[i];\n        this.require(testModule);\n        this.unsee(testModule);\n      }\n    }\n  };\n\n  TestLoader.prototype.require = function (moduleName) {\n    try {\n      require(moduleName);\n    } catch (e) {\n      this.moduleLoadFailure(moduleName, e);\n    }\n  };\n\n  TestLoader.prototype.unsee = function (moduleName) {\n    if (typeof require.unsee === 'function') {\n      require.unsee(moduleName);\n    } else if (!this._didLogMissingUnsee) {\n      this._didLogMissingUnsee = true;\n      if (typeof console !== 'undefined') {\n        console.warn('unable to require.unsee, please upgrade loader.js to >= v3.3.0');\n      }\n    }\n  };\n\n  TestLoader.prototype.moduleLoadFailure = function (moduleName, error) {\n    console.error('Error loading: ' + moduleName, error.stack);\n  };\n\n  TestLoader.load = function () {\n    new TestLoader().loadModules();\n  };\n});","define('ember-qunit', ['exports', 'ember-qunit/module-for', 'ember-qunit/module-for-component', 'ember-qunit/module-for-model', 'ember-qunit/adapter', 'ember-test-helpers', 'qunit'], function (exports, _emberQunitModuleFor, _emberQunitModuleForComponent, _emberQunitModuleForModel, _emberQunitAdapter, _emberTestHelpers, _qunit) {\n  'use strict';\n\n  Object.defineProperty(exports, 'module', {\n    enumerable: true,\n    get: function get() {\n      return _qunit.module;\n    }\n  });\n  Object.defineProperty(exports, 'test', {\n    enumerable: true,\n    get: function get() {\n      return _qunit.test;\n    }\n  });\n  Object.defineProperty(exports, 'skip', {\n    enumerable: true,\n    get: function get() {\n      return _qunit.skip;\n    }\n  });\n  Object.defineProperty(exports, 'only', {\n    enumerable: true,\n    get: function get() {\n      return _qunit.only;\n    }\n  });\n  Object.defineProperty(exports, 'todo', {\n    enumerable: true,\n    get: function get() {\n      return _qunit.todo;\n    }\n  });\n  exports.moduleFor = _emberQunitModuleFor['default'];\n  exports.moduleForComponent = _emberQunitModuleForComponent['default'];\n  exports.moduleForModel = _emberQunitModuleForModel['default'];\n  exports.setResolver = _emberTestHelpers.setResolver;\n  exports.QUnitAdapter = _emberQunitAdapter['default'];\n});","define('ember-qunit/adapter', ['exports', 'ember', 'qunit'], function (exports, _ember, _qunit) {\n  'use strict';\n\n  function unhandledRejectionAssertion(current, error) {\n    var message = undefined,\n        source = undefined;\n\n    if (typeof error === 'object' && error !== null) {\n      message = error.message;\n      source = error.stack;\n    } else if (typeof error === \"string\") {\n      message = error;\n      source = \"unknown source\";\n    } else {\n      message = \"unhandledRejection occured, but it had no message\";\n      source = \"unknown source\";\n    }\n\n    current.pushResult({\n      result: false,\n      actual: false,\n      expected: true,\n      message: message,\n      source: source\n    });\n  }\n\n  exports['default'] = _ember['default'].Test.Adapter.extend({\n    init: function init() {\n      this.doneCallbacks = [];\n    },\n\n    asyncStart: function asyncStart() {\n      this.doneCallbacks.push(_qunit['default'].config.current ? _qunit['default'].config.current.assert.async() : null);\n    },\n\n    asyncEnd: function asyncEnd() {\n      var done = this.doneCallbacks.pop();\n      // This can be null if asyncStart() was called outside of a test\n      if (done) {\n        done();\n      }\n    },\n\n    exception: function exception(error) {\n      unhandledRejectionAssertion(_qunit['default'].config.current, error);\n    }\n  });\n});","define('ember-qunit/module-for-component', ['exports', 'ember-qunit/qunit-module', 'ember-test-helpers'], function (exports, _emberQunitQunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleForComponent;\n\n  function moduleForComponent(name, description, callbacks) {\n    (0, _emberQunitQunitModule.createModule)(_emberTestHelpers.TestModuleForComponent, name, description, callbacks);\n  }\n});","define('ember-qunit/module-for-model', ['exports', 'ember-qunit/qunit-module', 'ember-test-helpers'], function (exports, _emberQunitQunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleForModel;\n\n  function moduleForModel(name, description, callbacks) {\n    (0, _emberQunitQunitModule.createModule)(_emberTestHelpers.TestModuleForModel, name, description, callbacks);\n  }\n});","define('ember-qunit/module-for', ['exports', 'ember-qunit/qunit-module', 'ember-test-helpers'], function (exports, _emberQunitQunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleFor;\n\n  function moduleFor(name, description, callbacks) {\n    (0, _emberQunitQunitModule.createModule)(_emberTestHelpers.TestModule, name, description, callbacks);\n  }\n});","define('ember-qunit/qunit-module', ['exports', 'ember', 'qunit'], function (exports, _ember, _qunit) {\n  'use strict';\n\n  exports.createModule = createModule;\n\n  function noop() {}\n\n  function callbackFor(name, callbacks) {\n    if (typeof callbacks !== 'object') {\n      return noop;\n    }\n    if (!callbacks) {\n      return noop;\n    }\n\n    var callback = noop;\n\n    if (callbacks[name]) {\n      callback = callbacks[name];\n      delete callbacks[name];\n    }\n\n    return callback;\n  }\n\n  function createModule(Constructor, name, description, callbacks) {\n    if (!callbacks && typeof description === 'object') {\n      callbacks = description;\n      description = name;\n    }\n\n    var _before = callbackFor('before', callbacks);\n    var _beforeEach = callbackFor('beforeEach', callbacks);\n    var _afterEach = callbackFor('afterEach', callbacks);\n    var _after = callbackFor('after', callbacks);\n\n    var module;\n    var moduleName = typeof description === 'string' ? description : name;\n\n    (0, _qunit.module)(moduleName, {\n      before: function before() {\n        // storing this in closure scope to avoid exposing these\n        // private internals to the test context\n        module = new Constructor(name, description, callbacks);\n        return _before.apply(this, arguments);\n      },\n\n      beforeEach: function beforeEach() {\n        var _module2,\n            _this = this,\n            _arguments = arguments;\n\n        // provide the test context to the underlying module\n        module.setContext(this);\n\n        return (_module2 = module).setup.apply(_module2, arguments).then(function () {\n          return _beforeEach.apply(_this, _arguments);\n        });\n      },\n\n      afterEach: function afterEach() {\n        var _arguments2 = arguments;\n\n        var result = _afterEach.apply(this, arguments);\n        return _ember['default'].RSVP.resolve(result).then(function () {\n          var _module3;\n\n          return (_module3 = module).teardown.apply(_module3, _arguments2);\n        });\n      },\n\n      after: function after() {\n        try {\n          return _after.apply(this, arguments);\n        } finally {\n          _after = _afterEach = _before = _beforeEach = callbacks = module = null;\n        }\n      }\n    });\n  }\n});","define('ember-test-helpers', ['exports', 'ember', 'ember-test-helpers/test-module', 'ember-test-helpers/test-module-for-acceptance', 'ember-test-helpers/test-module-for-integration', 'ember-test-helpers/test-module-for-component', 'ember-test-helpers/test-module-for-model', 'ember-test-helpers/test-context', 'ember-test-helpers/test-resolver'], function (exports, _ember, _emberTestHelpersTestModule, _emberTestHelpersTestModuleForAcceptance, _emberTestHelpersTestModuleForIntegration, _emberTestHelpersTestModuleForComponent, _emberTestHelpersTestModuleForModel, _emberTestHelpersTestContext, _emberTestHelpersTestResolver) {\n  'use strict';\n\n  _ember['default'].testing = true;\n\n  exports.TestModule = _emberTestHelpersTestModule['default'];\n  exports.TestModuleForAcceptance = _emberTestHelpersTestModuleForAcceptance['default'];\n  exports.TestModuleForIntegration = _emberTestHelpersTestModuleForIntegration['default'];\n  exports.TestModuleForComponent = _emberTestHelpersTestModuleForComponent['default'];\n  exports.TestModuleForModel = _emberTestHelpersTestModuleForModel['default'];\n  exports.getContext = _emberTestHelpersTestContext.getContext;\n  exports.setContext = _emberTestHelpersTestContext.setContext;\n  exports.unsetContext = _emberTestHelpersTestContext.unsetContext;\n  exports.setResolver = _emberTestHelpersTestResolver.setResolver;\n});","define('ember-test-helpers/-legacy-overrides', ['exports', 'ember', 'ember-test-helpers/has-ember-version'], function (exports, _ember, _emberTestHelpersHasEmberVersion) {\n  'use strict';\n\n  exports.preGlimmerSetupIntegrationForComponent = preGlimmerSetupIntegrationForComponent;\n\n  function preGlimmerSetupIntegrationForComponent() {\n    var module = this;\n    var context = this.context;\n\n    this.actionHooks = {};\n\n    context.dispatcher = this.container.lookup('event_dispatcher:main') || _ember['default'].EventDispatcher.create();\n    context.dispatcher.setup({}, '#ember-testing');\n    context.actions = module.actionHooks;\n\n    (this.registry || this.container).register('component:-test-holder', _ember['default'].Component.extend());\n\n    context.render = function (template) {\n      // in case `this.render` is called twice, make sure to teardown the first invocation\n      module.teardownComponent();\n\n      if (!template) {\n        throw new Error(\"in a component integration test you must pass a template to `render()`\");\n      }\n      if (_ember['default'].isArray(template)) {\n        template = template.join('');\n      }\n      if (typeof template === 'string') {\n        template = _ember['default'].Handlebars.compile(template);\n      }\n      module.component = module.container.lookupFactory('component:-test-holder').create({\n        layout: template\n      });\n\n      module.component.set('context', context);\n      module.component.set('controller', context);\n\n      _ember['default'].run(function () {\n        module.component.appendTo('#ember-testing');\n      });\n\n      context._element = module.component.element;\n    };\n\n    context.$ = function () {\n      return module.component.$.apply(module.component, arguments);\n    };\n\n    context.set = function (key, value) {\n      var ret = _ember['default'].run(function () {\n        return _ember['default'].set(context, key, value);\n      });\n\n      if ((0, _emberTestHelpersHasEmberVersion['default'])(2, 0)) {\n        return ret;\n      }\n    };\n\n    context.setProperties = function (hash) {\n      var ret = _ember['default'].run(function () {\n        return _ember['default'].setProperties(context, hash);\n      });\n\n      if ((0, _emberTestHelpersHasEmberVersion['default'])(2, 0)) {\n        return ret;\n      }\n    };\n\n    context.get = function (key) {\n      return _ember['default'].get(context, key);\n    };\n\n    context.getProperties = function () {\n      var args = Array.prototype.slice.call(arguments);\n      return _ember['default'].getProperties(context, args);\n    };\n\n    context.on = function (actionName, handler) {\n      module.actionHooks[actionName] = handler;\n    };\n\n    context.send = function (actionName) {\n      var hook = module.actionHooks[actionName];\n      if (!hook) {\n        throw new Error(\"integration testing template received unexpected action \" + actionName);\n      }\n      hook.apply(module, Array.prototype.slice.call(arguments, 1));\n    };\n\n    context.clearRender = function () {\n      module.teardownComponent();\n    };\n  }\n});","define('ember-test-helpers/abstract-test-module', ['exports', 'ember-test-helpers/wait', 'ember-test-helpers/test-context', 'ember'], function (exports, _emberTestHelpersWait, _emberTestHelpersTestContext, _ember) {\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  // calling this `merge` here because we cannot\n  // actually assume it is like `Object.assign`\n  // with > 2 args\n  var merge = _ember['default'].assign || _ember['default'].merge;\n\n  var _default = (function () {\n    function _default(name, options) {\n      _classCallCheck(this, _default);\n\n      this.context = undefined;\n      this.name = name;\n      this.callbacks = options || {};\n\n      this.initSetupSteps();\n      this.initTeardownSteps();\n    }\n\n    _createClass(_default, [{\n      key: 'setup',\n      value: function setup(assert) {\n        var _this = this;\n\n        return this.invokeSteps(this.setupSteps, this, assert).then(function () {\n          _this.contextualizeCallbacks();\n          return _this.invokeSteps(_this.contextualizedSetupSteps, _this.context, assert);\n        });\n      }\n    }, {\n      key: 'teardown',\n      value: function teardown(assert) {\n        var _this2 = this;\n\n        return this.invokeSteps(this.contextualizedTeardownSteps, this.context, assert).then(function () {\n          return _this2.invokeSteps(_this2.teardownSteps, _this2, assert);\n        }).then(function () {\n          _this2.cache = null;\n          _this2.cachedCalls = null;\n        });\n      }\n    }, {\n      key: 'initSetupSteps',\n      value: function initSetupSteps() {\n        this.setupSteps = [];\n        this.contextualizedSetupSteps = [];\n\n        if (this.callbacks.beforeSetup) {\n          this.setupSteps.push(this.callbacks.beforeSetup);\n          delete this.callbacks.beforeSetup;\n        }\n\n        this.setupSteps.push(this.setupContext);\n        this.setupSteps.push(this.setupTestElements);\n        this.setupSteps.push(this.setupAJAXListeners);\n\n        if (this.callbacks.setup) {\n          this.contextualizedSetupSteps.push(this.callbacks.setup);\n          delete this.callbacks.setup;\n        }\n      }\n    }, {\n      key: 'invokeSteps',\n      value: function invokeSteps(steps, context, assert) {\n        steps = steps.slice();\n\n        function nextStep() {\n          var step = steps.shift();\n          if (step) {\n            // guard against exceptions, for example missing components referenced from needs.\n            return new _ember['default'].RSVP.Promise(function (resolve) {\n              resolve(step.call(context, assert));\n            }).then(nextStep);\n          } else {\n            return _ember['default'].RSVP.resolve();\n          }\n        }\n        return nextStep();\n      }\n    }, {\n      key: 'contextualizeCallbacks',\n      value: function contextualizeCallbacks() {}\n    }, {\n      key: 'initTeardownSteps',\n      value: function initTeardownSteps() {\n        this.teardownSteps = [];\n        this.contextualizedTeardownSteps = [];\n\n        if (this.callbacks.teardown) {\n          this.contextualizedTeardownSteps.push(this.callbacks.teardown);\n          delete this.callbacks.teardown;\n        }\n\n        this.teardownSteps.push(this.teardownContext);\n        this.teardownSteps.push(this.teardownTestElements);\n        this.teardownSteps.push(this.teardownAJAXListeners);\n\n        if (this.callbacks.afterTeardown) {\n          this.teardownSteps.push(this.callbacks.afterTeardown);\n          delete this.callbacks.afterTeardown;\n        }\n      }\n    }, {\n      key: 'setupTestElements',\n      value: function setupTestElements() {\n        var testEl = document.querySelector('#ember-testing');\n        if (!testEl) {\n          var element = document.createElement('div');\n          element.setAttribute('id', 'ember-testing');\n\n          document.body.appendChild(element);\n          this.fixtureResetValue = '';\n        } else {\n          this.fixtureResetValue = testEl.innerHTML;\n        }\n      }\n    }, {\n      key: 'setupContext',\n      value: function setupContext(options) {\n        var context = this.getContext();\n\n        merge(context, {\n          dispatcher: null,\n          inject: {}\n        });\n        merge(context, options);\n\n        this.setToString();\n        (0, _emberTestHelpersTestContext.setContext)(context);\n        this.context = context;\n      }\n    }, {\n      key: 'setContext',\n      value: function setContext(context) {\n        this.context = context;\n      }\n    }, {\n      key: 'getContext',\n      value: function getContext() {\n        if (this.context) {\n          return this.context;\n        }\n\n        return this.context = (0, _emberTestHelpersTestContext.getContext)() || {};\n      }\n    }, {\n      key: 'setToString',\n      value: function setToString() {\n        var _this3 = this;\n\n        this.context.toString = function () {\n          if (_this3.subjectName) {\n            return 'test context for: ' + _this3.subjectName;\n          }\n\n          if (_this3.name) {\n            return 'test context for: ' + _this3.name;\n          }\n        };\n      }\n    }, {\n      key: 'setupAJAXListeners',\n      value: function setupAJAXListeners() {\n        (0, _emberTestHelpersWait._setupAJAXHooks)();\n      }\n    }, {\n      key: 'teardownAJAXListeners',\n      value: function teardownAJAXListeners() {\n        (0, _emberTestHelpersWait._teardownAJAXHooks)();\n      }\n    }, {\n      key: 'teardownTestElements',\n      value: function teardownTestElements() {\n        document.getElementById('ember-testing').innerHTML = this.fixtureResetValue;\n\n        // Ember 2.0.0 removed Ember.View as public API, so only do this when\n        // Ember.View is present\n        if (_ember['default'].View && _ember['default'].View.views) {\n          _ember['default'].View.views = {};\n        }\n      }\n    }, {\n      key: 'teardownContext',\n      value: function teardownContext() {\n        var context = this.context;\n        this.context = undefined;\n        (0, _emberTestHelpersTestContext.unsetContext)();\n\n        if (context && context.dispatcher && !context.dispatcher.isDestroyed) {\n          _ember['default'].run(function () {\n            context.dispatcher.destroy();\n          });\n        }\n      }\n    }]);\n\n    return _default;\n  })();\n\n  exports['default'] = _default;\n});","define('ember-test-helpers/build-registry', ['exports', 'require', 'ember'], function (exports, _require, _ember) {\n  /* globals global, self, requirejs */\n\n  'use strict';\n\n  function exposeRegistryMethodsWithoutDeprecations(container) {\n    var methods = ['register', 'unregister', 'resolve', 'normalize', 'typeInjection', 'injection', 'factoryInjection', 'factoryTypeInjection', 'has', 'options', 'optionsForType'];\n\n    function exposeRegistryMethod(container, method) {\n      if (method in container) {\n        container[method] = function () {\n          return container._registry[method].apply(container._registry, arguments);\n        };\n      }\n    }\n\n    for (var i = 0, l = methods.length; i < l; i++) {\n      exposeRegistryMethod(container, methods[i]);\n    }\n  }\n\n  var Owner = (function () {\n    if (_ember['default']._RegistryProxyMixin && _ember['default']._ContainerProxyMixin) {\n      return _ember['default'].Object.extend(_ember['default']._RegistryProxyMixin, _ember['default']._ContainerProxyMixin);\n    }\n\n    return _ember['default'].Object.extend();\n  })();\n\n  exports['default'] = function (resolver) {\n    var fallbackRegistry, registry, container;\n    var namespace = _ember['default'].Object.create({\n      Resolver: { create: function create() {\n          return resolver;\n        } }\n    });\n\n    function register(name, factory) {\n      var thingToRegisterWith = registry || container;\n\n      if (!(container.factoryFor ? container.factoryFor(name) : container.lookupFactory(name))) {\n        thingToRegisterWith.register(name, factory);\n      }\n    }\n\n    if (_ember['default'].Application.buildRegistry) {\n      fallbackRegistry = _ember['default'].Application.buildRegistry(namespace);\n      fallbackRegistry.register('component-lookup:main', _ember['default'].ComponentLookup);\n\n      registry = new _ember['default'].Registry({\n        fallback: fallbackRegistry\n      });\n\n      if (_ember['default'].ApplicationInstance && _ember['default'].ApplicationInstance.setupRegistry) {\n        _ember['default'].ApplicationInstance.setupRegistry(registry);\n      }\n\n      // these properties are set on the fallback registry by `buildRegistry`\n      // and on the primary registry within the ApplicationInstance constructor\n      // but we need to manually recreate them since ApplicationInstance's are not\n      // exposed externally\n      registry.normalizeFullName = fallbackRegistry.normalizeFullName;\n      registry.makeToString = fallbackRegistry.makeToString;\n      registry.describe = fallbackRegistry.describe;\n\n      var owner = Owner.create({\n        __registry__: registry,\n        __container__: null\n      });\n\n      container = registry.container({ owner: owner });\n      owner.__container__ = container;\n\n      exposeRegistryMethodsWithoutDeprecations(container);\n    } else {\n      container = _ember['default'].Application.buildContainer(namespace);\n      container.register('component-lookup:main', _ember['default'].ComponentLookup);\n    }\n\n    // Ember 1.10.0 did not properly add `view:toplevel` or `view:default`\n    // to the registry in Ember.Application.buildRegistry :(\n    //\n    // Ember 2.0.0 removed Ember.View as public API, so only do this when\n    // Ember.View is present\n    if (_ember['default'].View) {\n      register('view:toplevel', _ember['default'].View.extend());\n    }\n\n    // Ember 2.0.0 removed Ember._MetamorphView from the Ember global, so only\n    // do this when present\n    if (_ember['default']._MetamorphView) {\n      register('view:default', _ember['default']._MetamorphView);\n    }\n\n    var globalContext = typeof global === 'object' && global || self;\n    if (requirejs.entries['ember-data/setup-container']) {\n      // ember-data is a proper ember-cli addon since 2.3; if no 'import\n      // 'ember-data'' is present somewhere in the tests, there is also no `DS`\n      // available on the globalContext and hence ember-data wouldn't be setup\n      // correctly for the tests; that's why we import and call setupContainer\n      // here; also see https://github.com/emberjs/data/issues/4071 for context\n      var setupContainer = (0, _require['default'])('ember-data/setup-container')['default'];\n      setupContainer(registry || container);\n    } else if (globalContext.DS) {\n      var DS = globalContext.DS;\n      if (DS._setupContainer) {\n        DS._setupContainer(registry || container);\n      } else {\n        register('transform:boolean', DS.BooleanTransform);\n        register('transform:date', DS.DateTransform);\n        register('transform:number', DS.NumberTransform);\n        register('transform:string', DS.StringTransform);\n        register('serializer:-default', DS.JSONSerializer);\n        register('serializer:-rest', DS.RESTSerializer);\n        register('adapter:-rest', DS.RESTAdapter);\n      }\n    }\n\n    return {\n      registry: registry,\n      container: container\n    };\n  };\n});","define('ember-test-helpers/has-ember-version', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = hasEmberVersion;\n\n  function hasEmberVersion(major, minor) {\n    var numbers = _ember['default'].VERSION.split('-')[0].split('.');\n    var actualMajor = parseInt(numbers[0], 10);\n    var actualMinor = parseInt(numbers[1], 10);\n    return actualMajor > major || actualMajor === major && actualMinor >= minor;\n  }\n});","define(\"ember-test-helpers/test-context\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.setContext = setContext;\n  exports.getContext = getContext;\n  exports.unsetContext = unsetContext;\n  var __test_context__;\n\n  function setContext(context) {\n    __test_context__ = context;\n  }\n\n  function getContext() {\n    return __test_context__;\n  }\n\n  function unsetContext() {\n    __test_context__ = undefined;\n  }\n});","define('ember-test-helpers/test-module-for-acceptance', ['exports', 'ember-test-helpers/abstract-test-module', 'ember', 'ember-test-helpers/test-context'], function (exports, _emberTestHelpersAbstractTestModule, _ember, _emberTestHelpersTestContext) {\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n  var _default = (function (_AbstractTestModule) {\n    _inherits(_default, _AbstractTestModule);\n\n    function _default() {\n      _classCallCheck(this, _default);\n\n      _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).apply(this, arguments);\n    }\n\n    _createClass(_default, [{\n      key: 'setupContext',\n      value: function setupContext() {\n        _get(Object.getPrototypeOf(_default.prototype), 'setupContext', this).call(this, { application: this.createApplication() });\n      }\n    }, {\n      key: 'teardownContext',\n      value: function teardownContext() {\n        _ember['default'].run(function () {\n          (0, _emberTestHelpersTestContext.getContext)().application.destroy();\n        });\n\n        _get(Object.getPrototypeOf(_default.prototype), 'teardownContext', this).call(this);\n      }\n    }, {\n      key: 'createApplication',\n      value: function createApplication() {\n        var _callbacks = this.callbacks;\n        var Application = _callbacks.Application;\n        var config = _callbacks.config;\n\n        var application = undefined;\n\n        _ember['default'].run(function () {\n          application = Application.create(config);\n          application.setupForTesting();\n          application.injectTestHelpers();\n        });\n\n        return application;\n      }\n    }]);\n\n    return _default;\n  })(_emberTestHelpersAbstractTestModule['default']);\n\n  exports['default'] = _default;\n});","define('ember-test-helpers/test-module-for-component', ['exports', 'ember-test-helpers/test-module', 'ember', 'ember-test-helpers/has-ember-version', 'ember-test-helpers/-legacy-overrides'], function (exports, _emberTestHelpersTestModule, _ember, _emberTestHelpersHasEmberVersion, _emberTestHelpersLegacyOverrides) {\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n  exports.setupComponentIntegrationTest = _setupComponentIntegrationTest;\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n  var ACTION_KEY = undefined;\n  if ((0, _emberTestHelpersHasEmberVersion['default'])(2, 0)) {\n    ACTION_KEY = 'actions';\n  } else {\n    ACTION_KEY = '_actions';\n  }\n\n  var isPreGlimmer = !(0, _emberTestHelpersHasEmberVersion['default'])(1, 13);\n\n  var getOwner = _ember['default'].getOwner;\n\n  var _default = (function (_TestModule) {\n    _inherits(_default, _TestModule);\n\n    function _default(componentName, description, callbacks) {\n      _classCallCheck(this, _default);\n\n      // Allow `description` to be omitted\n      if (!callbacks && typeof description === 'object') {\n        callbacks = description;\n        description = null;\n      } else if (!callbacks) {\n        callbacks = {};\n      }\n\n      var integrationOption = callbacks.integration;\n      var hasNeeds = Array.isArray(callbacks.needs);\n\n      _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).call(this, 'component:' + componentName, description, callbacks);\n\n      this.componentName = componentName;\n\n      if (hasNeeds || callbacks.unit || integrationOption === false) {\n        this.isUnitTest = true;\n      } else if (integrationOption) {\n        this.isUnitTest = false;\n      } else {\n        _ember['default'].deprecate(\"the component:\" + componentName + \" test module is implicitly running in unit test mode, \" + \"which will change to integration test mode by default in an upcoming version of \" + \"ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit \" + \"test mode.\", false, { id: 'ember-test-helpers.test-module-for-component.test-type', until: '0.6.0' });\n        this.isUnitTest = true;\n      }\n\n      if (!this.isUnitTest && !this.isLegacy) {\n        callbacks.integration = true;\n      }\n\n      if (this.isUnitTest || this.isLegacy) {\n        this.setupSteps.push(this.setupComponentUnitTest);\n      } else {\n        this.callbacks.subject = function () {\n          throw new Error(\"component integration tests do not support `subject()`. Instead, render the component as if it were HTML: `this.render('<my-component foo=true>');`. For more information, read: http://guides.emberjs.com/v2.2.0/testing/testing-components/\");\n        };\n        this.setupSteps.push(this.setupComponentIntegrationTest);\n        this.teardownSteps.unshift(this.teardownComponent);\n      }\n\n      if (_ember['default'].View && _ember['default'].View.views) {\n        this.setupSteps.push(this._aliasViewRegistry);\n        this.teardownSteps.unshift(this._resetViewRegistry);\n      }\n    }\n\n    _createClass(_default, [{\n      key: 'initIntegration',\n      value: function initIntegration(options) {\n        this.isLegacy = options.integration === 'legacy';\n        this.isIntegration = options.integration !== 'legacy';\n      }\n    }, {\n      key: '_aliasViewRegistry',\n      value: function _aliasViewRegistry() {\n        this._originalGlobalViewRegistry = _ember['default'].View.views;\n        var viewRegistry = this.container.lookup('-view-registry:main');\n\n        if (viewRegistry) {\n          _ember['default'].View.views = viewRegistry;\n        }\n      }\n    }, {\n      key: '_resetViewRegistry',\n      value: function _resetViewRegistry() {\n        _ember['default'].View.views = this._originalGlobalViewRegistry;\n      }\n    }, {\n      key: 'setupComponentUnitTest',\n      value: function setupComponentUnitTest() {\n        var _this = this;\n        var resolver = this.resolver;\n        var context = this.context;\n\n        var layoutName = 'template:components/' + this.componentName;\n\n        var layout = resolver.resolve(layoutName);\n\n        var thingToRegisterWith = this.registry || this.container;\n        if (layout) {\n          thingToRegisterWith.register(layoutName, layout);\n          thingToRegisterWith.injection(this.subjectName, 'layout', layoutName);\n        }\n\n        context.dispatcher = this.container.lookup('event_dispatcher:main') || _ember['default'].EventDispatcher.create();\n        context.dispatcher.setup({}, '#ember-testing');\n\n        context._element = null;\n\n        this.callbacks.render = function () {\n          var subject;\n\n          _ember['default'].run(function () {\n            subject = context.subject();\n            subject.appendTo('#ember-testing');\n          });\n\n          context._element = subject.element;\n\n          _this.teardownSteps.unshift(function () {\n            _ember['default'].run(function () {\n              _ember['default'].tryInvoke(subject, 'destroy');\n            });\n          });\n        };\n\n        this.callbacks.append = function () {\n          _ember['default'].deprecate('this.append() is deprecated. Please use this.render() or this.$() instead.', false, { id: 'ember-test-helpers.test-module-for-component.append', until: '0.6.0' });\n          return context.$();\n        };\n\n        context.$ = function () {\n          this.render();\n          var subject = this.subject();\n\n          return subject.$.apply(subject, arguments);\n        };\n      }\n    }, {\n      key: 'setupComponentIntegrationTest',\n      value: function setupComponentIntegrationTest() {\n        if (isPreGlimmer) {\n          return _emberTestHelpersLegacyOverrides.preGlimmerSetupIntegrationForComponent.apply(this, arguments);\n        } else {\n          return _setupComponentIntegrationTest.apply(this, arguments);\n        }\n      }\n    }, {\n      key: 'setupContext',\n      value: function setupContext() {\n        _get(Object.getPrototypeOf(_default.prototype), 'setupContext', this).call(this);\n\n        // only setup the injection if we are running against a version\n        // of Ember that has `-view-registry:main` (Ember >= 1.12)\n        if (this.container.factoryFor ? this.container.factoryFor('-view-registry:main') : this.container.lookupFactory('-view-registry:main')) {\n          (this.registry || this.container).injection('component', '_viewRegistry', '-view-registry:main');\n        }\n\n        if (!this.isUnitTest && !this.isLegacy) {\n          this.context.factory = function () {};\n        }\n      }\n    }, {\n      key: 'teardownComponent',\n      value: function teardownComponent() {\n        var component = this.component;\n        if (component) {\n          _ember['default'].run(component, 'destroy');\n          this.component = null;\n        }\n      }\n    }]);\n\n    return _default;\n  })(_emberTestHelpersTestModule['default']);\n\n  exports['default'] = _default;\n\n  function _setupComponentIntegrationTest() {\n    var module = this;\n    var context = this.context;\n\n    this.actionHooks = context[ACTION_KEY] = {};\n    context.dispatcher = this.container.lookup('event_dispatcher:main') || _ember['default'].EventDispatcher.create();\n    context.dispatcher.setup({}, '#ember-testing');\n\n    var hasRendered = false;\n    var OutletView = module.container.factoryFor ? module.container.factoryFor('view:-outlet') : module.container.lookupFactory('view:-outlet');\n    var OutletTemplate = module.container.lookup('template:-outlet');\n    var toplevelView = module.component = OutletView.create();\n    var hasOutletTemplate = !!OutletTemplate;\n    var outletState = {\n      render: {\n        owner: getOwner ? getOwner(module.container) : undefined,\n        into: undefined,\n        outlet: 'main',\n        name: 'application',\n        controller: module.context,\n        ViewClass: undefined,\n        template: OutletTemplate\n      },\n\n      outlets: {}\n    };\n\n    var element = document.getElementById('ember-testing');\n    var templateId = 0;\n\n    if (hasOutletTemplate) {\n      _ember['default'].run(function () {\n        toplevelView.setOutletState(outletState);\n      });\n    }\n\n    context.render = function (template) {\n      if (!template) {\n        throw new Error(\"in a component integration test you must pass a template to `render()`\");\n      }\n      if (_ember['default'].isArray(template)) {\n        template = template.join('');\n      }\n      if (typeof template === 'string') {\n        template = _ember['default'].Handlebars.compile(template);\n      }\n\n      var templateFullName = 'template:-undertest-' + ++templateId;\n      this.registry.register(templateFullName, template);\n      var stateToRender = {\n        owner: getOwner ? getOwner(module.container) : undefined,\n        into: undefined,\n        outlet: 'main',\n        name: 'index',\n        controller: module.context,\n        ViewClass: undefined,\n        template: module.container.lookup(templateFullName),\n        outlets: {}\n      };\n\n      if (hasOutletTemplate) {\n        stateToRender.name = 'index';\n        outletState.outlets.main = { render: stateToRender, outlets: {} };\n      } else {\n        stateToRender.name = 'application';\n        outletState = { render: stateToRender, outlets: {} };\n      }\n\n      _ember['default'].run(function () {\n        toplevelView.setOutletState(outletState);\n      });\n\n      if (!hasRendered) {\n        _ember['default'].run(module.component, 'appendTo', '#ember-testing');\n        hasRendered = true;\n      }\n\n      // ensure the element is based on the wrapping toplevel view\n      // Ember still wraps the main application template with a\n      // normal tagged view\n      context._element = element = document.querySelector('#ember-testing > .ember-view');\n    };\n\n    context.$ = function (selector) {\n      // emulates Ember internal behavor of `this.$` in a component\n      // https://github.com/emberjs/ember.js/blob/v2.5.1/packages/ember-views/lib/views/states/has_element.js#L18\n      return selector ? _ember['default'].$(selector, element) : _ember['default'].$(element);\n    };\n\n    context.set = function (key, value) {\n      var ret = _ember['default'].run(function () {\n        return _ember['default'].set(context, key, value);\n      });\n\n      if ((0, _emberTestHelpersHasEmberVersion['default'])(2, 0)) {\n        return ret;\n      }\n    };\n\n    context.setProperties = function (hash) {\n      var ret = _ember['default'].run(function () {\n        return _ember['default'].setProperties(context, hash);\n      });\n\n      if ((0, _emberTestHelpersHasEmberVersion['default'])(2, 0)) {\n        return ret;\n      }\n    };\n\n    context.get = function (key) {\n      return _ember['default'].get(context, key);\n    };\n\n    context.getProperties = function () {\n      var args = Array.prototype.slice.call(arguments);\n      return _ember['default'].getProperties(context, args);\n    };\n\n    context.on = function (actionName, handler) {\n      module.actionHooks[actionName] = handler;\n    };\n\n    context.send = function (actionName) {\n      var hook = module.actionHooks[actionName];\n      if (!hook) {\n        throw new Error(\"integration testing template received unexpected action \" + actionName);\n      }\n      hook.apply(module.context, Array.prototype.slice.call(arguments, 1));\n    };\n\n    context.clearRender = function () {\n      _ember['default'].run(function () {\n        toplevelView.setOutletState({\n          render: {\n            owner: module.container,\n            into: undefined,\n            outlet: 'main',\n            name: 'application',\n            controller: module.context,\n            ViewClass: undefined,\n            template: undefined\n          },\n          outlets: {}\n        });\n      });\n    };\n  }\n});","define('ember-test-helpers/test-module-for-integration', ['exports', 'ember', 'ember-test-helpers/abstract-test-module', 'ember-test-helpers/test-resolver', 'ember-test-helpers/build-registry', 'ember-test-helpers/has-ember-version', 'ember-test-helpers/-legacy-overrides', 'ember-test-helpers/test-module-for-component'], function (exports, _ember, _emberTestHelpersAbstractTestModule, _emberTestHelpersTestResolver, _emberTestHelpersBuildRegistry, _emberTestHelpersHasEmberVersion, _emberTestHelpersLegacyOverrides, _emberTestHelpersTestModuleForComponent) {\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n  var isPreGlimmer = !(0, _emberTestHelpersHasEmberVersion['default'])(1, 13);\n\n  var _default = (function (_AbstractTestModule) {\n    _inherits(_default, _AbstractTestModule);\n\n    function _default() {\n      _classCallCheck(this, _default);\n\n      _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).apply(this, arguments);\n      this.resolver = this.callbacks.resolver || (0, _emberTestHelpersTestResolver.getResolver)();\n    }\n\n    _createClass(_default, [{\n      key: 'initSetupSteps',\n      value: function initSetupSteps() {\n        this.setupSteps = [];\n        this.contextualizedSetupSteps = [];\n\n        if (this.callbacks.beforeSetup) {\n          this.setupSteps.push(this.callbacks.beforeSetup);\n          delete this.callbacks.beforeSetup;\n        }\n\n        this.setupSteps.push(this.setupContainer);\n        this.setupSteps.push(this.setupContext);\n        this.setupSteps.push(this.setupTestElements);\n        this.setupSteps.push(this.setupAJAXListeners);\n        this.setupSteps.push(this.setupComponentIntegrationTest);\n\n        if (_ember['default'].View && _ember['default'].View.views) {\n          this.setupSteps.push(this._aliasViewRegistry);\n        }\n\n        if (this.callbacks.setup) {\n          this.contextualizedSetupSteps.push(this.callbacks.setup);\n          delete this.callbacks.setup;\n        }\n      }\n    }, {\n      key: 'initTeardownSteps',\n      value: function initTeardownSteps() {\n        this.teardownSteps = [];\n        this.contextualizedTeardownSteps = [];\n\n        if (this.callbacks.teardown) {\n          this.contextualizedTeardownSteps.push(this.callbacks.teardown);\n          delete this.callbacks.teardown;\n        }\n\n        this.teardownSteps.push(this.teardownContainer);\n        this.teardownSteps.push(this.teardownContext);\n        this.teardownSteps.push(this.teardownAJAXListeners);\n        this.teardownSteps.push(this.teardownComponent);\n\n        if (_ember['default'].View && _ember['default'].View.views) {\n          this.teardownSteps.push(this._resetViewRegistry);\n        }\n\n        this.teardownSteps.push(this.teardownTestElements);\n\n        if (this.callbacks.afterTeardown) {\n          this.teardownSteps.push(this.callbacks.afterTeardown);\n          delete this.callbacks.afterTeardown;\n        }\n      }\n    }, {\n      key: 'setupContainer',\n      value: function setupContainer() {\n        var resolver = this.resolver;\n        var items = (0, _emberTestHelpersBuildRegistry['default'])(resolver);\n\n        this.container = items.container;\n        this.registry = items.registry;\n\n        if ((0, _emberTestHelpersHasEmberVersion['default'])(1, 13)) {\n          var thingToRegisterWith = this.registry || this.container;\n          var router = resolver.resolve('router:main');\n          router = router || _ember['default'].Router.extend();\n          thingToRegisterWith.register('router:main', router);\n        }\n      }\n    }, {\n      key: 'setupContext',\n      value: function setupContext() {\n        var subjectName = this.subjectName;\n        var container = this.container;\n\n        var factory = function factory() {\n          return container.factoryFor ? container.factoryFor(subjectName) : container.lookupFactory(subjectName);\n        };\n\n        _get(Object.getPrototypeOf(_default.prototype), 'setupContext', this).call(this, {\n          container: this.container,\n          registry: this.registry,\n          factory: factory,\n          register: function register() {\n            var target = this.registry || this.container;\n            return target.register.apply(target, arguments);\n          }\n        });\n\n        var context = this.context;\n\n        if (_ember['default'].setOwner) {\n          _ember['default'].setOwner(context, this.container.owner);\n        }\n\n        if (_ember['default'].inject) {\n          var keys = (Object.keys || _ember['default'].keys)(_ember['default'].inject);\n          keys.forEach(function (typeName) {\n            context.inject[typeName] = function (name, opts) {\n              var alias = opts && opts.as || name;\n              _ember['default'].run(function () {\n                _ember['default'].set(context, alias, context.container.lookup(typeName + ':' + name));\n              });\n            };\n          });\n        }\n\n        // only setup the injection if we are running against a version\n        // of Ember that has `-view-registry:main` (Ember >= 1.12)\n        if (this.container.factoryFor ? this.container.factoryFor('-view-registry:main') : this.container.lookupFactory('-view-registry:main')) {\n          (this.registry || this.container).injection('component', '_viewRegistry', '-view-registry:main');\n        }\n      }\n    }, {\n      key: 'setupComponentIntegrationTest',\n      value: function setupComponentIntegrationTest() {\n        if (isPreGlimmer) {\n          return _emberTestHelpersLegacyOverrides.preGlimmerSetupIntegrationForComponent.apply(this, arguments);\n        } else {\n          return _emberTestHelpersTestModuleForComponent.setupComponentIntegrationTest.apply(this, arguments);\n        }\n      }\n    }, {\n      key: 'teardownComponent',\n      value: function teardownComponent() {\n        var component = this.component;\n        if (component) {\n          _ember['default'].run(function () {\n            component.destroy();\n          });\n        }\n      }\n    }, {\n      key: 'teardownContainer',\n      value: function teardownContainer() {\n        var container = this.container;\n        _ember['default'].run(function () {\n          container.destroy();\n        });\n      }\n\n      // allow arbitrary named factories, like rspec let\n    }, {\n      key: 'contextualizeCallbacks',\n      value: function contextualizeCallbacks() {\n        var callbacks = this.callbacks;\n        var context = this.context;\n\n        this.cache = this.cache || {};\n        this.cachedCalls = this.cachedCalls || {};\n\n        var keys = (Object.keys || _ember['default'].keys)(callbacks);\n        var keysLength = keys.length;\n\n        if (keysLength) {\n          for (var i = 0; i < keysLength; i++) {\n            this._contextualizeCallback(context, keys[i], context);\n          }\n        }\n      }\n    }, {\n      key: '_contextualizeCallback',\n      value: function _contextualizeCallback(context, key, callbackContext) {\n        var _this = this;\n        var callbacks = this.callbacks;\n        var factory = context.factory;\n\n        context[key] = function (options) {\n          if (_this.cachedCalls[key]) {\n            return _this.cache[key];\n          }\n\n          var result = callbacks[key].call(callbackContext, options, factory());\n\n          _this.cache[key] = result;\n          _this.cachedCalls[key] = true;\n\n          return result;\n        };\n      }\n    }, {\n      key: '_aliasViewRegistry',\n      value: function _aliasViewRegistry() {\n        this._originalGlobalViewRegistry = _ember['default'].View.views;\n        var viewRegistry = this.container.lookup('-view-registry:main');\n\n        if (viewRegistry) {\n          _ember['default'].View.views = viewRegistry;\n        }\n      }\n    }, {\n      key: '_resetViewRegistry',\n      value: function _resetViewRegistry() {\n        _ember['default'].View.views = this._originalGlobalViewRegistry;\n      }\n    }]);\n\n    return _default;\n  })(_emberTestHelpersAbstractTestModule['default']);\n\n  exports['default'] = _default;\n});","define('ember-test-helpers/test-module-for-model', ['exports', 'require', 'ember-test-helpers/test-module', 'ember'], function (exports, _require, _emberTestHelpersTestModule, _ember) {\n  /* global DS, requirejs */ // added here to prevent an import from erroring when ED is not present\n\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n  var _default = (function (_TestModule) {\n    _inherits(_default, _TestModule);\n\n    function _default(modelName, description, callbacks) {\n      _classCallCheck(this, _default);\n\n      _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).call(this, 'model:' + modelName, description, callbacks);\n\n      this.modelName = modelName;\n\n      this.setupSteps.push(this.setupModel);\n    }\n\n    _createClass(_default, [{\n      key: 'setupModel',\n      value: function setupModel() {\n        var container = this.container;\n        var defaultSubject = this.defaultSubject;\n        var callbacks = this.callbacks;\n        var modelName = this.modelName;\n\n        var adapterFactory = container.factoryFor ? container.factoryFor('adapter:application') : container.lookupFactory('adapter:application');\n        if (!adapterFactory) {\n          if (requirejs.entries['ember-data/adapters/json-api']) {\n            adapterFactory = (0, _require['default'])('ember-data/adapters/json-api')['default'];\n          }\n\n          // when ember-data/adapters/json-api is provided via ember-cli shims\n          // using Ember Data 1.x the actual JSONAPIAdapter isn't found, but the\n          // above require statement returns a bizzaro object with only a `default`\n          // property (circular reference actually)\n          if (!adapterFactory || !adapterFactory.create) {\n            adapterFactory = DS.JSONAPIAdapter || DS.FixtureAdapter;\n          }\n\n          var thingToRegisterWith = this.registry || this.container;\n          thingToRegisterWith.register('adapter:application', adapterFactory);\n        }\n\n        callbacks.store = function () {\n          var container = this.container;\n          return container.lookup('service:store') || container.lookup('store:main');\n        };\n\n        if (callbacks.subject === defaultSubject) {\n          callbacks.subject = function (options) {\n            var container = this.container;\n\n            return _ember['default'].run(function () {\n              var store = container.lookup('service:store') || container.lookup('store:main');\n              return store.createRecord(modelName, options);\n            });\n          };\n        }\n      }\n    }]);\n\n    return _default;\n  })(_emberTestHelpersTestModule['default']);\n\n  exports['default'] = _default;\n});","define('ember-test-helpers/test-module', ['exports', 'ember', 'ember-test-helpers/abstract-test-module', 'ember-test-helpers/test-resolver', 'ember-test-helpers/build-registry', 'ember-test-helpers/has-ember-version'], function (exports, _ember, _emberTestHelpersAbstractTestModule, _emberTestHelpersTestResolver, _emberTestHelpersBuildRegistry, _emberTestHelpersHasEmberVersion) {\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n  var _default = (function (_AbstractTestModule) {\n    _inherits(_default, _AbstractTestModule);\n\n    function _default(subjectName, description, callbacks) {\n      _classCallCheck(this, _default);\n\n      // Allow `description` to be omitted, in which case it should\n      // default to `subjectName`\n      if (!callbacks && typeof description === 'object') {\n        callbacks = description;\n        description = subjectName;\n      }\n\n      _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).call(this, description || subjectName, callbacks);\n\n      this.subjectName = subjectName;\n      this.description = description || subjectName;\n      this.resolver = this.callbacks.resolver || (0, _emberTestHelpersTestResolver.getResolver)();\n\n      if (this.callbacks.integration && this.callbacks.needs) {\n        throw new Error(\"cannot declare 'integration: true' and 'needs' in the same module\");\n      }\n\n      if (this.callbacks.integration) {\n        this.initIntegration(callbacks);\n        delete callbacks.integration;\n      }\n\n      this.initSubject();\n      this.initNeeds();\n    }\n\n    _createClass(_default, [{\n      key: 'initIntegration',\n      value: function initIntegration(options) {\n        if (options.integration === 'legacy') {\n          throw new Error('`integration: \\'legacy\\'` is only valid for component tests.');\n        }\n        this.isIntegration = true;\n      }\n    }, {\n      key: 'initSubject',\n      value: function initSubject() {\n        this.callbacks.subject = this.callbacks.subject || this.defaultSubject;\n      }\n    }, {\n      key: 'initNeeds',\n      value: function initNeeds() {\n        this.needs = [this.subjectName];\n        if (this.callbacks.needs) {\n          this.needs = this.needs.concat(this.callbacks.needs);\n          delete this.callbacks.needs;\n        }\n      }\n    }, {\n      key: 'initSetupSteps',\n      value: function initSetupSteps() {\n        this.setupSteps = [];\n        this.contextualizedSetupSteps = [];\n\n        if (this.callbacks.beforeSetup) {\n          this.setupSteps.push(this.callbacks.beforeSetup);\n          delete this.callbacks.beforeSetup;\n        }\n\n        this.setupSteps.push(this.setupContainer);\n        this.setupSteps.push(this.setupContext);\n        this.setupSteps.push(this.setupTestElements);\n        this.setupSteps.push(this.setupAJAXListeners);\n\n        if (this.callbacks.setup) {\n          this.contextualizedSetupSteps.push(this.callbacks.setup);\n          delete this.callbacks.setup;\n        }\n      }\n    }, {\n      key: 'initTeardownSteps',\n      value: function initTeardownSteps() {\n        this.teardownSteps = [];\n        this.contextualizedTeardownSteps = [];\n\n        if (this.callbacks.teardown) {\n          this.contextualizedTeardownSteps.push(this.callbacks.teardown);\n          delete this.callbacks.teardown;\n        }\n\n        this.teardownSteps.push(this.teardownSubject);\n        this.teardownSteps.push(this.teardownContainer);\n        this.teardownSteps.push(this.teardownContext);\n        this.teardownSteps.push(this.teardownTestElements);\n        this.teardownSteps.push(this.teardownAJAXListeners);\n\n        if (this.callbacks.afterTeardown) {\n          this.teardownSteps.push(this.callbacks.afterTeardown);\n          delete this.callbacks.afterTeardown;\n        }\n      }\n    }, {\n      key: 'setupContainer',\n      value: function setupContainer() {\n        if (this.isIntegration || this.isLegacy) {\n          this._setupIntegratedContainer();\n        } else {\n          this._setupIsolatedContainer();\n        }\n      }\n    }, {\n      key: 'setupContext',\n      value: function setupContext() {\n        var subjectName = this.subjectName;\n        var container = this.container;\n\n        var factory = function factory() {\n          return container.factoryFor ? container.factoryFor(subjectName) : container.lookupFactory(subjectName);\n        };\n\n        _get(Object.getPrototypeOf(_default.prototype), 'setupContext', this).call(this, {\n          container: this.container,\n          registry: this.registry,\n          factory: factory,\n          register: function register() {\n            var target = this.registry || this.container;\n            return target.register.apply(target, arguments);\n          }\n        });\n\n        if (_ember['default'].setOwner) {\n          _ember['default'].setOwner(this.context, this.container.owner);\n        }\n\n        this.setupInject();\n      }\n    }, {\n      key: 'setupInject',\n      value: function setupInject() {\n        var module = this;\n        var context = this.context;\n\n        if (_ember['default'].inject) {\n          var keys = (Object.keys || _ember['default'].keys)(_ember['default'].inject);\n\n          keys.forEach(function (typeName) {\n            context.inject[typeName] = function (name, opts) {\n              var alias = opts && opts.as || name;\n              _ember['default'].run(function () {\n                _ember['default'].set(context, alias, module.container.lookup(typeName + ':' + name));\n              });\n            };\n          });\n        }\n      }\n    }, {\n      key: 'teardownSubject',\n      value: function teardownSubject() {\n        var subject = this.cache.subject;\n\n        if (subject) {\n          _ember['default'].run(function () {\n            _ember['default'].tryInvoke(subject, 'destroy');\n          });\n        }\n      }\n    }, {\n      key: 'teardownContainer',\n      value: function teardownContainer() {\n        var container = this.container;\n        _ember['default'].run(function () {\n          container.destroy();\n        });\n      }\n    }, {\n      key: 'defaultSubject',\n      value: function defaultSubject(options, factory) {\n        return factory.create(options);\n      }\n\n      // allow arbitrary named factories, like rspec let\n    }, {\n      key: 'contextualizeCallbacks',\n      value: function contextualizeCallbacks() {\n        var callbacks = this.callbacks;\n        var context = this.context;\n\n        this.cache = this.cache || {};\n        this.cachedCalls = this.cachedCalls || {};\n\n        var keys = (Object.keys || _ember['default'].keys)(callbacks);\n        var keysLength = keys.length;\n\n        if (keysLength) {\n          var deprecatedContext = this._buildDeprecatedContext(this, context);\n          for (var i = 0; i < keysLength; i++) {\n            this._contextualizeCallback(context, keys[i], deprecatedContext);\n          }\n        }\n      }\n    }, {\n      key: '_contextualizeCallback',\n      value: function _contextualizeCallback(context, key, callbackContext) {\n        var _this = this;\n        var callbacks = this.callbacks;\n        var factory = context.factory;\n\n        context[key] = function (options) {\n          if (_this.cachedCalls[key]) {\n            return _this.cache[key];\n          }\n\n          var result = callbacks[key].call(callbackContext, options, factory());\n\n          _this.cache[key] = result;\n          _this.cachedCalls[key] = true;\n\n          return result;\n        };\n      }\n\n      /*\n        Builds a version of the passed in context that contains deprecation warnings\n        for accessing properties that exist on the module.\n      */\n    }, {\n      key: '_buildDeprecatedContext',\n      value: function _buildDeprecatedContext(module, context) {\n        var deprecatedContext = Object.create(context);\n\n        var keysForDeprecation = Object.keys(module);\n\n        for (var i = 0, l = keysForDeprecation.length; i < l; i++) {\n          this._proxyDeprecation(module, deprecatedContext, keysForDeprecation[i]);\n        }\n\n        return deprecatedContext;\n      }\n\n      /*\n        Defines a key on an object to act as a proxy for deprecating the original.\n      */\n    }, {\n      key: '_proxyDeprecation',\n      value: function _proxyDeprecation(obj, proxy, key) {\n        if (typeof proxy[key] === 'undefined') {\n          Object.defineProperty(proxy, key, {\n            get: function get() {\n              _ember['default'].deprecate('Accessing the test module property \"' + key + '\" from a callback is deprecated.', false, { id: 'ember-test-helpers.test-module.callback-context', until: '0.6.0' });\n              return obj[key];\n            }\n          });\n        }\n      }\n    }, {\n      key: '_setupContainer',\n      value: function _setupContainer(isolated) {\n        var resolver = this.resolver;\n\n        var items = (0, _emberTestHelpersBuildRegistry['default'])(!isolated ? resolver : Object.create(resolver, {\n          resolve: {\n            value: function value() {}\n          }\n        }));\n\n        this.container = items.container;\n        this.registry = items.registry;\n\n        if ((0, _emberTestHelpersHasEmberVersion['default'])(1, 13)) {\n          var thingToRegisterWith = this.registry || this.container;\n          var router = resolver.resolve('router:main');\n          router = router || _ember['default'].Router.extend();\n          thingToRegisterWith.register('router:main', router);\n        }\n      }\n    }, {\n      key: '_setupIsolatedContainer',\n      value: function _setupIsolatedContainer() {\n        var resolver = this.resolver;\n        this._setupContainer(true);\n\n        var thingToRegisterWith = this.registry || this.container;\n\n        for (var i = this.needs.length; i > 0; i--) {\n          var fullName = this.needs[i - 1];\n          var normalizedFullName = resolver.normalize(fullName);\n          thingToRegisterWith.register(fullName, resolver.resolve(normalizedFullName));\n        }\n\n        if (!this.registry) {\n          this.container.resolver = function () {};\n        }\n      }\n    }, {\n      key: '_setupIntegratedContainer',\n      value: function _setupIntegratedContainer() {\n        this._setupContainer();\n      }\n    }]);\n\n    return _default;\n  })(_emberTestHelpersAbstractTestModule['default']);\n\n  exports['default'] = _default;\n});","define('ember-test-helpers/test-resolver', ['exports'], function (exports) {\n  'use strict';\n\n  exports.setResolver = setResolver;\n  exports.getResolver = getResolver;\n  var __resolver__;\n\n  function setResolver(resolver) {\n    __resolver__ = resolver;\n  }\n\n  function getResolver() {\n    if (__resolver__ == null) {\n      throw new Error('you must set a resolver with `testResolver.set(resolver)`');\n    }\n\n    return __resolver__;\n  }\n});","define('ember-test-helpers/wait', ['exports', 'ember'], function (exports, _ember) {\n  /* globals self */\n\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports._teardownAJAXHooks = _teardownAJAXHooks;\n  exports._setupAJAXHooks = _setupAJAXHooks;\n  exports['default'] = wait;\n\n  var jQuery = _ember['default'].$;\n\n  var requests;\n  function incrementAjaxPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n\n  function decrementAjaxPendingRequests(_, xhr) {\n    for (var i = 0; i < requests.length; i++) {\n      if (xhr === requests[i]) {\n        requests.splice(i, 1);\n      }\n    }\n  }\n\n  function _teardownAJAXHooks() {\n    if (!jQuery) {\n      return;\n    }\n\n    jQuery(document).off('ajaxSend', incrementAjaxPendingRequests);\n    jQuery(document).off('ajaxComplete', decrementAjaxPendingRequests);\n  }\n\n  function _setupAJAXHooks() {\n    requests = [];\n\n    if (!jQuery) {\n      return;\n    }\n\n    jQuery(document).on('ajaxSend', incrementAjaxPendingRequests);\n    jQuery(document).on('ajaxComplete', decrementAjaxPendingRequests);\n  }\n\n  var _internalCheckWaiters;\n  if (_ember['default'].__loader.registry['ember-testing/test/waiters']) {\n    _internalCheckWaiters = _ember['default'].__loader.require('ember-testing/test/waiters').checkWaiters;\n  }\n\n  function checkWaiters() {\n    if (_internalCheckWaiters) {\n      return _internalCheckWaiters();\n    } else if (_ember['default'].Test.waiters) {\n      if (_ember['default'].Test.waiters.any(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var context = _ref2[0];\n        var callback = _ref2[1];\n        return !callback.call(context);\n      })) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function wait(_options) {\n    var options = _options || {};\n    var waitForTimers = options.hasOwnProperty('waitForTimers') ? options.waitForTimers : true;\n    var waitForAJAX = options.hasOwnProperty('waitForAJAX') ? options.waitForAJAX : true;\n    var waitForWaiters = options.hasOwnProperty('waitForWaiters') ? options.waitForWaiters : true;\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var watcher = self.setInterval(function () {\n        if (waitForTimers && (_ember['default'].run.hasScheduledTimers() || _ember['default'].run.currentRunLoop)) {\n          return;\n        }\n\n        if (waitForAJAX && requests && requests.length > 0) {\n          return;\n        }\n\n        if (waitForWaiters && checkWaiters()) {\n          return;\n        }\n\n        // Stop polling\n        self.clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        _ember['default'].run(null, resolve);\n      }, 10);\n    });\n  }\n});","define(\"qunit\", [\"exports\"], function (exports) {\n  /* globals QUnit */\n\n  \"use strict\";\n\n  var _module = QUnit.module;\n  exports.module = _module;\n  var test = QUnit.test;\n  exports.test = test;\n  var skip = QUnit.skip;\n  exports.skip = skip;\n  var only = QUnit.only;\n  exports.only = only;\n  var todo = QUnit.todo;\n\n  exports.todo = todo;\n  exports[\"default\"] = QUnit;\n});","/* jshint ignore:start */\n\nrunningTests = true;\n\nif (window.Testem) {\n  window.Testem.hookIntoTestFramework();\n}\n\n\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhrblBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxztTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"test-support.js"}